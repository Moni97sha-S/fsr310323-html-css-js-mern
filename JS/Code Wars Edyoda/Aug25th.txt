Answer Link:- 
Link-1: https://codepen.io/Akshitha-Annaram/full/XWomVKd
Link-2: https://codewars-august--akshithaannaram.repl.co/

Question 1 →
Armstrong Numbers →

For a given 3 digit number, find whether it is Armstrong number or not. An Armstrong number of three digits is an integer such that the sum of the cubes of its digits is equal to the number itself. Return “Yes” if it is a Armstrong number else return “No”.
NOTE: 371 is an Armstrong number since 33 + 73 + 13 = 371

Example 1: Input: N = 153 Output: "Yes"Explanation: 153 is an Armstrong number since 13 + 53 + 33 = 153. Hence answer is "Yes". 

Example 2: Input: N = 370 Output: "Yes"Explanation: 370 is an Armstrong number since 33 + 73 + 03 = 370. Hence answer is "Yes".

Your Task:
You dont need to read input or print anything. Complete the function armstrongNumber() which takes n as input parameter and returns “Yes” if it is a armstrong number else returns “No”…

Expected Time Complexity: O(1)
Expected Auxiliary Space: O(1)

Constraints:
100 ≤ n <1000

Answer 1:- 
                 function isArmstrongNumber(num) {
                                           let digits = num.toString().split('').map(Number);
                                           let sumOfCubes = digits.reduce((sum, digit) => sum + Math.pow(digit, 3), 0);
                                           if (sumOfCubes === num) {
                                                  return "Yes";
                                           } else {
                                                  return "No";
                                           }
                                       }
					
	       console.log(isArmstrongNumber(555))

       	        console.log(isArmstrongNumber(153))

                                       console.log(isArmstrongNumber(370))


Question 2 →
Find duplicates in an array - >
Given an array a of size N which contains elements from 0 to N-1, you need to find all the elements occurring more than once in the given array. Return the answer in ascending order. If no such element is found, return list containing [-1].

Note: The extra space is only for the array to be returned. Try and perform all operations within the provided array.

Example 1: Input: N = 4a[] = {0,3,1,2}  Output: -1 Explanation: There is no repeating element in the array. Therefore output is -1.

Example 2: Input: N = 5a[] = {2,3,1,2,3}  Output: 2 3  Explanation: 2 and 3 occur more than once in the given array.

Your Task:
Complete the function duplicates() which takes array a[] and n as input as parameters and returns a list of elements that occur more than once in the given array in a sorted manner.

Expected Time Complexity: O(n).
Expected Auxiliary Space: O(n).

Constraints:
1 <= N <= 105
0 <= A[i] <= N-1, for each valid i

Answer 2:- 
	  function findDuplicates(arr) {
           	    let duplicates = [];

                             for (let i = 0; i < arr.length; i++) {
                                 if (arr[Math.abs(arr[i])] >= 0) {
                                       arr[Math.abs(arr[i])] = -arr[Math.abs(arr[i])];
                                 } else {
                                       duplicates.push(Math.abs(arr[i]));
                                }
                            }

                           duplicates.sort((a, b) => a - b);

                          if (duplicates.length === 0) {
                                  return [-1];
                          } else {
                                  return duplicates;
                          }
                  }
        let a = [0, 3, 1, 2]
                   console.log(findDuplicates(a));

                   let b = [2, 3, 1, 2, 3]
                   console.log(findDuplicates(b));

Question 3 →

Reverse a linked list →
Given a linked list of N nodes. The task is to reverse this list.

Example 1: Input: LinkedList: 1->2->3->4->5->6 Output: 6 5 4 3 2 1 Explanation: After reversing the list, elements are 6->5->4->3->2->1. 
Example 2: Input: LinkedList: 2->7->8->9->10  Output: 10 9 8 7 2  Explanation: After reversing the list, elements are 10->9->8->7->2.

Your Task:
The task is to complete the function reverseList() with head reference as the only argument and should return new head after reversing the list.

Expected Time Complexity: O(N).
Expected Auxiliary Space: O(1).

Constraints:
1 <= N <= 104


Answer 3:-
/*
  class ListNode {
    constructor(val) {
      this.val = val;
      this.next = null;
    }
  }
  
  function reverseList(head) {
    let prev = null;
    let current = head;
    let nextNode = null;
  
    while (current !== null) {
      nextNode = current.next; 
      current.next = prev; // Reverse the next pointer
      prev = current; 
      current = nextNode; 
    }
  
    return prev;
  }
  
  // Function to print the linked list:-
  function printLinkedList(head) {
    let current = head;
    while (current !== null) {
      console.log(current.val);
      current = current.next;
    }
  }
  
  // Example usage:
  const head = new ListNode(1);
  head.next = new ListNode(2);
  head.next.next = new ListNode(3);
  head.next.next.next = new ListNode(4);
  
  console.log("Original Linked List:");
  printLinkedList(head);
  
  const reversedHead = reverseList(head);
  
  console.log("Reversed Linked List:");
  printLinkedList(reversedHead);
  */

<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<link
      rel="icon"
      href="data:image/svg+xml,<svg xmlns=%22http://www.w3.org/2000/svg%22 viewBox=%220 0 100 100%22><text y=%22.9em%22 font-size=%2290%22>🎯🏆</text></svg>"
    />
<style>
  @import url('https://fonts.googleapis.com/css2?family=Font1&display=swap');
  @import url('https://fonts.googleapis.com/css2?family=Font2&display=swap');
  @import url('https://fonts.googleapis.com/css2?family=Font3&display=swap');
  @import url('https://fonts.googleapis.com/css2?family=Font4&display=swap');
  
  body {
    
    font-family: 'Font1', cursive;
    background: linear-gradient(to bottom, #3498db, #e74c3c);
    margin: 0;
    padding: 0;
    flex-direction: column; 
    align-items: center;
    justify-content: center;
    min-height: 100vh;
  }
  .container {
    background-color: rgba(255, 255, 255, 0.9);
    border-radius: 10px;
    padding: 20px;
    max-width: 800px;
    margin: 20px auto;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
  }
  header, footer {
    background-color: #333;
    color: white;
    text-align: center;
    padding: 10px;
    border-radius: 5px;
    width: 100%;
  }
  header h1 {
    margin: 0;
    font-family: 'Font2', cursive;
    font-size: 32px;
    text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.5);
  }
  footer h1 {
    margin: 0;
    font-family: 'Font2', cursive;
    font-size: 32px;
    text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.5);
  }
  header p, footer p {
    margin: 0;
    font-family: 'Font3', cursive;
    font-size: 18px;
    text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.3);
  }
  .section-title {
    color: #333;
    margin-top: 20px;
    font-family: 'Font4', cursive;
    font-size: 24px;
    font-weight: bold;
    text-shadow: 2px 2px 3px rgba(0, 0, 0, 0.2);
  }
  button {
    padding: 8px 16px;
    background-color: #333;
    color: white;
    border: none;
    border-radius: 5px;
    cursor: pointer;
    transition: background-color 0.3s;
  }
  button:hover {
    background-color: #555;
  }
  input[type="number"], input[type="text"] {
    padding: 8px;
    border: 1px solid #ccc;
    border-radius: 5px;
    width: 100%;
    margin-bottom: 10px;
  }
  .output-box {
    border: 2px solid #555;
    border-radius: 5px;
    padding: 10px;
    margin-top: 10px;
    background-color: #f9f9f9;
    animation: fadeIn 0.5s ease-in-out;
  }
  @keyframes fadeIn {
    from { opacity: 0; }
    to { opacity: 1; }
  }

  @media (max-width: 768px) {
    /* Adjust styles for screens with max width of 768px */
    .container {
      max-width: 90%;
    }
    header, footer {
      padding: 8px;
    }
    header h1 {
      font-size: 20px;
    }
    .output-box {
      font-size: 14px;
    }
  }
</style>
<link href="https://fonts.googleapis.com/css2?family=Cursive&display=swap" rel="stylesheet">
<title>Impressive CodeWars Questions</title>
</head>
<body>
  <header>
    <h1> 🚀CodeWars-August 2023!!🌟</h1>
  </header>
  <div class="container">
    <section>
      <h2 class="section-title">💡Question 1: Armstrong Numbers 🧮</h2>
      <input type="number" id="armstrongNumberInput" placeholder="Enter a 3-digit number">
      <button onclick="checkArmstrong()">Check</button>
      <div class="output-box" id="armstrongOutput"></div>
    </section>
    <section>
      <h2 class="section-title">💡Question 2: Find Duplicates 🔍</h2>
      <input type="text" id="arrayInput" placeholder="Enter array elements separated with commas (e.g. 2,3,1,2,3)">
      <button onclick="findDuplicates()">Find Duplicates</button>
      <div class="output-box" id="duplicatesOutput"></div>
    </section>
    <section>
        <h2 class="section-title">💡Question 3: Reverse Linked List 🔄</h2>
        <input type="text" id="linkedListInput" placeholder="Enter linked list elements (e.g. 1->2->3->4->5->6)">
        <button onclick="reverseLinkedList()">Reverse</button>
        <div class="output-box" id="reverseOutput"></div>
    </section>
  </div>
  <footer>
    <p>Designed by AKSHITHA ANNARAM 👩‍💻.<br>❤️Thank you!</p>
  </footer>

  <script>
    function checkArmstrong() {
      const number = parseInt(document.getElementById("armstrongNumberInput").value);
      if (number >= 100 && number < 1000) {
        const digits = Array.from(String(number), Number);
        const sumOfCubes = digits.reduce((sum, digit) => sum + digit ** 3, 0);
        const result = sumOfCubes === number ? "Yes" : "No";
        document.getElementById("armstrongOutput").textContent = result;
      } else {
        document.getElementById("armstrongOutput").textContent = "Please enter a 3-digit number.";
      }
    }
     function findDuplicates() {
      const inputArray = document.getElementById("arrayInput").value.split(",").map(Number);
      const frequency = {};
      const duplicates = [];

      for (let i = 0; i < inputArray.length; i++) {
        const num = inputArray[i];
        if (!frequency[num]) {
          frequency[num] = 1;
        } else if (frequency[num] === 1) {
          duplicates.push(num);
          frequency[num]++;
        }
      }

      if (duplicates.length > 0) {
        const sortedDuplicates = duplicates.sort((a, b) => a - b);
        document.getElementById("duplicatesOutput").textContent = "Duplicates: " + sortedDuplicates.join(", ");
      } else {
        document.getElementById("duplicatesOutput").textContent = "-1";
      }
    }

    function reverseLinkedList() {
      const inputList = document.getElementById("linkedListInput").value;
      const elements = inputList.split(/->|,/).map(item => item.trim());
      const reversedList = elements.reverse();
      document.getElementById("reverseOutput").textContent = "Reversed List: " + reversedList.join(" -> ");
    }
  </script>
</body>
</html>

FSR NodeJS project:-

Create a URL shortener using NodeJS -

Functional Requirements

Users should be able to generate a shorter URL (up to 15 characters long) from the original URL
The short link should redirect the users to the original link
Design Parameters

URL redirection needs to happen in real-time with minimal latency
Shortened links should not be predictable
Special Parameters

The service should be REST API accessible
How many times the URL is visited
Users can specify the expiration time of the URL
:point_right: DEADLINE - 29th August 11:30 PM.

*** The links need to be shared in this post as replies within the deadline, no submissions will be considered after the expiration of deadline.

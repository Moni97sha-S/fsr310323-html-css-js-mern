
JS Fundamental Concepts:
    - for..of loop is for array not object
    - As array is iterable but object is not iterable
    - If you need to iterate over object, u can use for..in loop
    
JS Advanced Concepts:
1.
- Execution context
    > Context is a set of circumstances or facts that surround a particular event, situation, etc.
    > EC means code currently running and everything surrounding it helps run it
- Lexical Environment
    > Lexical means related to something
    > LE means how and where your code is physically placed.
- Parser
    > Syntax Parser takes the array of tokens and create an Abstract Syntax Tree(AST) so that it can be processed further to create executable code.
https://blog.greenroots.info/understanding-javascript-execution-context-like-never-before
/*******************************üö® means important topic for Exam***********************************/

Day 1 : 15.05.2023 -------------------------------------
Curriculum:
üìçIntroduction to Javascript
üìçLanguage Basics: Variables, Data Types - Primitive and Reference, Number (Add, Sub, Mul, NaN, Infinity), Inbuilt Functions - Numbers
üìçDialogs: Alert, Confirm, Input
üìçControl Flow
----------------------------------------------------------
LMS 
Sub-Topics
    Introduction to JavaScript
    Language Basics
    Dialogs: Alert, Confirm, Input
    Control Flow

Session Details
1. Introduction to JavaScript
2. Language Basics: Variables, Data Types - Primitive and Reference, Number (Add, Sub, Mul, NaN, Infinity), Inbuilt Functions - Numbers
3. Dialogs: Alert, Confirm, Input
4. Control Flow

Practice resources:
    ÔªøIntro to javascript
    Javascript tutorial
    notes

LMS END

Intoduction:-
    - Javascript file u must have .js extension
    - JS is case-sensitive language.
    - JS is a script language which needs an interpreter
    - It can change HTML & CSS dynamically.
    - Can do events (click, key press etc.)
    - Sending & receiving data to server.
    - Storing the data in cloud/
        ? 1st old JS is client-side.
        ? Became server-side by using Node.js
    - It can perform an action, validation & adds functionality.
    - We can create dynamic web page.
    - We can interact with web page through JS.
    - Without JS web pages are called as Static & dummy pages.

Lang Basics:
    - Ways to insert js code into HTML file:
        1. Using script tag:
            <script>
            //your js code
            </script>
        2. External script (Insert it after body tag):
            <script src="./style.js"></script>
    - Diff between scripting & programming language?
        + Script:
            > Scripting lang is high-level language.
            > Works according to the script like do this & that.
            > Script works on the programming lang.
            > Executes dependently inside the parent. That parent has to be a programming lang.
        + Programming: 
            > Programming lang is low-level language.
            > Executes independently.
    - Where to Practice :
       > VS Code, Browser console in source tb.
       > Its result will be in browser's console tab.

Dialogs: Alert, Confirm, Input
    - alert('Hi, how are you?');

Control Flow
    -

Variables:
    - It is a container to hold some data that can be used that can be used by the program.
    - It means to store some data in memory address.
    - var name = 'Moni';
        -> var means keywordVariable
        -> name means variableName
        -> = means Assignment operator
        -> Moni means variableValue string should be mentioned inside '' | number can be simple given without inside ''| boolean means true & false | array means [] | object means {}

Declare a variable (Syntax):
        -> keywordVariable yourVarName = yourVarValue;

Types of keyword Variables:-
1. var - Global scope variable. | Global means for easy understanding public but we shld not mention like that
------ came after 2015 ES6 (express.js)
2. let - Block scope variables. {}
3. const means never change - Block scope variables. {} | Block means for easy understanding private but we shld not mention like that

What kind of data u r going to store & declaration + initialization of different data.
(5) Types of Data-types:-----------------
1. number - 12233 | Eg: var mathMark = 95;
2. string - 'nsffd' | Eg: var engMark = 'wwww';
3. boolean - true or false | Eg: var tamilMark = true;
4. array - [] | Eg: var socialMark = [];
5. object - {} | Eg: let engMark = {};
//0 means atleast last empty roll is thr 
    5.1 null means one of object nothing empty toilet roll only it's holder
6. undefined means not clearly defined i dont know what is thr in past no holder

üí° console.log(var-name);
    - gives result at browser console
    - it cannot access var-name before its initialization.
    - always we need to declare variables before accessing it.
    - always takes from bottom to top approach.
    - In othr words, last come first according to the rules below.

üö®Main concept & rules:
üí° redeclare means declare again with same var keyword & variable-name with different value.
    Eg: var name = 'qwe';
        var name = '123';

üí° reassign means assign again without repeating variable keyword but with same variable name with different value.
    Eg: var total = 'qwe';
        total = '123';
üìåRules:-
    1. Var
        > We can redeclare in same & different scopes & reassign.
    2. let 
        > We cannot redeclare in same scope.
        > We can redeclare in different scope.
        > We can reassign.
    3. const
        > We cannot redeclare in same scope.
        > We can redeclare in different scope.
        > We cannot reassign.
   üì¢Notes: scope means a set of code inside a block {}.

Main difference among var, let & const?
    - Var
        > redeclare
            ‚úÖ We can redeclare in same & different scope.
            ‚úÖ Eg: var name = '123'
                    var name = 'abc'
                    console.log(name);
                    Res: abc \\ We can redeclare a global scope variable-name again & again.
        > reassign
            ‚úÖ We can reassign.
            ‚úÖ Eg: var total = '123';
                    var total = 'abc';
                    total = 'wwww';
                    console.log(total);
                    Res: wwww \\ We can reassign a global scope variable-name without mention it's type again.
    - 'let' works on scope-level.
        > redeclare 
            ‚úÖ We cannot redeclare in same scope which will result in error.
                    Eg: let tot = '234';
                        let tot = 'abc';
                   ‚ùå Warning: We cannot redeclare a block scope variable-name again & again.
            ‚úÖ We cannot redeclare in different scope.
               Eg: let name = '123';
                   {
                    let name = 'abc'; //Block of code
                   }
                    Res: abc
            
        > reassign
            ‚úÖ We can reassign.
                Eg: let total = 'abc';
                    total = 'wwww';
                    console.log(total);
                    // Res: wwww

                    if{
                    var a=10;
                    var b=20;
                    let c=a+b;
                    }
                    console.log(c); //Res: ?

    - 'const' means constant
        > redeclare 
            ‚úÖ We cannot redeclare in same scope which will result in error.
                Eg: const pi = 3.14;
                    pi = 5;
                    console.log(pi);
                     // Res: Error
                ‚ùå Warning: We cannot redeclare a block scope variable-name again & again.
            ‚úÖ We can redeclare in different scope.
                Eg: const name = 'Ravi';
                    {
                        const name = 'Ravi One';
                        console.log(name);
                        // Res: Ravi One 
                        // like in scenarios like school attendance register
                    }
        > reassign
            ‚úÖ We cannot reassign.

Day 2 : 16-05-2023 agenda: -----------------
    Basic revise (From Day 1)
    Doubts related to Variable and data type-
    Q&A:
    Strings (One of the data type)
    Control Flow statements
-------------------------------
LMS 
Sub-Topics
    Strings
    Inbuilt Functions - Strings
    Null and undefined
    If-else

Session Details
    1. Strings
    2. Inbuilt Functions - Strings
    3. Null and undefined
    4. If-else

Practice resources:
    FrontEnd Quiz | Community
    Strings
    Working with strings

LMS END

JS handles all the controls in the website
    - how brain controls human body
    - how human contorls the car
What is Variable?
    - It is a container to hold some data.
    - To create a variable, there are some keywords.
What is hoisting?
    - It is moving declaration to the top of the assignment & console and executes the result with value.
    - var name -> declaration
    - name = 'raj'; -> value initialization
    - Eg: name = 123;
          console.log(name);
          var name; // res:123
    - In let & const (more strict & brought discipline in variable declaration), so hoisting is not possible.
Datatype - What type of data u are storing?
    - string: 'name', 'address'
        Eg: var tyre = 'name';
    - number: 12324 ex-phone num, adhaar card not
        Eg: let phone = 123545;
    - boolean: true or false
        Eg: let isTodayMonday = false;
    - object: {} group of related items like variables etc.
        Eg: let tyre = {
            name: 'moni',
            color: 'red',
            owner: 'MRF'
            }
    - array: [] collection of related value
        Eg: let carBrand = [maruthi, tata, java] // One method of create an Array
            let carBrand1 = new Array(maruthi, tata, java); // Another method of create an Array

Day 3 : 17-05-2023 ------------------

LMS 
Sub-Topics
    Switch
    Arithmetic Operators
    Assignment Operators
    Comparison Operators
    Logical Operators
    Coercion - Implicit

Session Details

1. Switch
2. Arithmetic Operators
3. Assignment Operators
4. Comparison Operators
5. Logical Operators
6. Coercion - Implicit

Practice resources:
    JavaScript Practice Resources | Community
    Operators
    Type of coercion / Type conversion

LMS END

Datatypes:
    - string | number | boolean | array |object
In-built methods:
    - predefined rules/codes
    - starts with .
    - Gives us result based on the input

String Methods:-
    >.length
        - It tells how many characters are there in the string.
    >.toUpperCase()
        - It turns all small letter into capital letter.
    >.toLowerCase()
        - It turns all capital letter into small letter.
    >.charAt(3)
        - It shows exact letter at mentioned position.
    >.charCodeAt(4)
        - It shows computer understandable binary (ASCII) code at mentioned position.
        - ASCII -> American Standard Code Information Interchange 
        - If 'm' at 4th position from 0 then it executes m's ascii value 101
    >.trim()
        - It trims from whitespaces before and after of a string.
        - to remove leading and trailing whitespace
    >.trimStart()
        - It trims from whitespaces before of a string.
    >.trimEnd()
        - It trims from whitespaces after of a string.
    >.concat('Morning')
        - It adds two strings (+)
        - adding a string into another string
    >.slice(from, end) 
        - .slice(7,10) or .slice(-3)
        - It takes negative value and start from end position
        - negative number given means it takes from end
    >.substring(3)
        - it won't take negative
        - It don't take negative value and result will be from 0th position always.
    >.indexof('how') 
        - search exactly with word/characters in strings
        - whereas .charAt() mtd will differ as we can mention position in numbers.
    >.startswith('e') 
        - it shows res in boolean T/F if that string starts with given str then true orelse F
    >.

Control Flow
    - how ur code execution happens based on the variables or some operators
    - Conditional statements: if, if-else, switch
        > true or false
        > Eg if-else:   
                let rajesh = 23;
                if(23>18){
                    console.log('He can vote')
                }
                else{
                    console.log('He cannot vote')
                }
        > Eg else-if:   
                let mark = 400;
                if(mark<=400){
                    console.log('C');
                }
                else if(mark <=450){
                    console.log('B')
                }
                else{
                    cosole.log('F')
                }
    - looping statements: for, while , do-while

Day 4 : 18.05.2023 -----------------------
Curriculum:
    - Switch statement
    - for loop
    - while loop
    - do-while loop statement
    - Operators
--------------------------------------
LMS
Sub-Topics
    Coercion - Explicit
    Objects
    Different ways to create Objects
    Updating an Object
    Printing an Object in console
    Remove key-value pair from object
    How to get all values from an object?
    How to get all keys from an object?

Session Details
1. Coercion - Explicit
2. Objects
3. Three ways to create Objects - new Object(), Object.create(), mObj = {}
4. Updating an Object
5. Printing an Object in console
6. Remove key-value pair from object
7. How to get all values from an object?
8. How to get all keys from an object?

Practice resources:
    Objects
    Understanding JS Objects

LMS END

1. Diff between Document.write() & console.log?
    - document.write() used in UI
    - console.log() used in browser/VS code

2. Control flow :-
If-else is used for 2-3 conditions & gives True/False.
Switch Statement
    - It is used for more than 3 conditions

3. Operators :-
    - operators do some operations on operands.
   Types of Operators :-
    1) Arithmetic Operators (+,-,*,/,++a,a++,--a,a--)
        > BODMAS rule (bracket, order means power or roots, division, multiplication, addition, substraction) is the order of operations in calculations.
        > Increment & decrement
            - Pre-Increment - It will increase add 1 and then post value.
            eg:-
            let aa=11;
            console.log(++aa); //Res:12
            console.log(aa); //Res:12
            - Post-Increment - It will post as it is & then increase value for next iteration.
            eg:-
            let aa=11;
            console.log(aa++); //Res:11
            console.log(aa); //Res:12
            - Pre-Decrement - It will decrease and then post value. 
            - Post-Decrement - It will post as it is & then decrease value for next iteration.

            ‚ùå Dont's
            - we cannot assign increment & decrement to a variable.
            
    2) Assignment Operators (+=,-=,*=,/=,%=)
        > a+=1 shorthand for a=a+1; 
    3) Comparison Operators (<, >, =, <=, >=, ==, ===, !=)
        > we have to determine equality between 2 values.
    4) Logical Operators (&&, ||, !)
        [and, or & not]
        > rule for and: Both shld be T means T, anyone F means F.
        > rule for or: Both T means T , anyone T means T, both F means F.
        > rule for not: T ----> F ; F ----> T.
    5) Conditional (Ternary) Operator
        > Syntax () ? T/F : F/T
        > It assigns the value to the variable based on the condition.
    
Day 5 : 19.05.2023-------------------------------
    Curriculum:-
        - Type Conversion is also called as Coercion.
        - Objects
-------------------------------------------------
LMS 
Sub-Topics
    Practice Problem
    Doubts Clearing

Session Details
1. Practice Problem
2. Doubts Clearing

Practice resources:
    Javascript practice challange
    Online quiz

LMS END

Type Conversion: One data type to another data type.
    1) Implicit Conversion:-
        - Js will take care
        - Eg: let a = 12 + "";
              console.log(typeof(a)); //Res: string
        - add: if we have add a number and string then a string.
        - mul, div: if we have sub/mul/div a number and string then a number.
    2) Explicit Conversion:-
        - We tell the js to covert into particular type.
        - String(), Number() & Boolean()
        - Eg: convert number to string
              let age = 35;
              let str = String(age);
              console.log(str);
              console.log(typeof(str));
        - Eg: convert string to number
              let person = 'moni';
              let name = Number(person);
              console.log(name);
              console.log(typeof(name));

              Number('') //Res: 0 [Empty String is equal to 0 number]
        - Eg: convert number into boolean
              let a = 0;
              console.log(Boolean(a)); //Res: false

Objects: 
    - A container has group of properties with key & value pairs.
    - collects 2 or more no of information of a variable name.
    - Here variable-name is known as Object.

// Creation of an object
Skeleton/Syntax:-
    let var-name = {
        key:value,
        key1:value1
    }

//how to access particular key from an Object
//Ways to access are (.) & ['']
    i) console.log(var-name.key1);
    ii) console.log(var-name['key']);
              
Day 6 : 22.05.2023 -----------------------------
Curriculum:
    - Assignment 1 discussion
------------------------------------------------
LMS 
Sub-Topics
    Assignment Discussion

Session Details
    Assignment-1 Discussion

Practice resources:
    Javascript basic- Exercise ,Practice
    Programming Example

LMS END

Q-1 
let Result = str1.concat(' '),str2.trim(),str3.trimEnd()

Q-2
let enteredAlphabet = '123';
if(typeof enteredAlphabet === 'string'){
    enteredAlphabet = enteredAlphabet.toLowerCase();
}
else if(typeof enteredAlphabet === 'number'){
    enteredAlphabet = 'number';
}
switch(enteredAlphabet){
    case 'a':
    case 'e':
    case 'i':
    case 'o':
    case 'u':
    console.log(Vowel);
    break();
    case 'number':
    console.log(Non-Alphabet);
    break;
    default:
    console.log(Consonant);
} 

Q-3 (55:00)

Q-4

Q-5

Q-6

Day 7 : 23.05.2023 -----------------------------
Curriculum:
    - Object
    - Arrays
------------------------------------------------
LMS 
Sub-Topics
    Arrays
    Inbuilt Functions - Arrays
    Practice Problems

Session Details
1. Arrays
2. Inbuilt Functions - Arrays

Practice resources:
    Arrays Intro
    Array methods
    Array const
    JavaScript Practice Resources | Community

LMS END

Object
    - It is a heterogeneous datatypes.

Arrays
    - Collection of homogeneous (same kind of) datatypes
    - storing group of values with same references
    - It is denoted by [].
    - Two types of datatypes:
        1. Primitive datatypes => String, Number, Boolean
        2. Non-primitive datatypes => Array & Object is also called as reference data types
    - Declaration of array (Syntax)
      var <array-name> = [comma separated values];
    - Normally we store one by one in each declaration.
    - But using array we can store many values.
    - We no need to assign size for an array in JS.

JSON
    - Javascript Object Notation
    - Array of Objects

Index
    - Position/location of values/items.
    - index starts from 0 to n-1, where n is the number of items
    - Eg: var users = ["Kajal", "Asin", "Hansika", "Genelia", "Keerthy", "Deepika Padukone"];
          console.log(users);
          n=6 & n-1=5
          console.log(users[6]); //undefined
    - Identify an Item using Index postn values
          console.log(users[1]); //Asin
    - Adding an item in an array
          users[6]="Tammanah";
          console.log(users);
    - Length of an array => arr.length;

Methods
    - Push method to insert an array & it will always adds at end => <arr_name>.push("value");
    - Pop method to remove an items from the end => <arr_name>.pop("value");
    - shift & pop won't accept any item in its argument ().
    - push() => it will insert a new item at the end of array
    - pop() => remove an item from the end
    - unshift() => insert an item at the beginning of an array
    - shift() => Delete/remove an item at the beginning of an array
    - problem of using index for adding an item at middle is it removes before item and store new one.
    - To overcome this we use .splice()
    - sort() => sort / arrange items only in ascending/alphabetical order

**********ANYTHING IN JAVASCRIPT IS CONSIDERED AS AN OBJECT NOT LIKE DATATYPE'S OBJ LIKE IN OOPS CONCEPT*********

    - reverse() => Reverse an array of items by chaining of methods -> .sort().reverse()
    - concat() => It will merge arrays
    - isArray() => to identify array is an array
    - toString() => converts array to string
    - split() => It will convert string to an array
    - üö® splice()
       > It is mutable (changes original array)
       > arr.splice(start-index, delete/remove how many items, "what new item we need to add"); 
       > it will allow us to add an item at any specific position of an array
       > Syntax: arr.splice(start_index, remove_index, "new-item");
       > We can directly edit the original array.
       > We can delete from any index just we have to mention it as 1st parameter.
       > We can add new item in array.

Find/Search in net that object is object or not?

Day 8 : 24.05.2023 -----------------------------
Curriculum:
    - slice()
    üö® Difference between slice & splice methods? 
    - constant arrays
    - Loops
    - Types of Loops:-
        - For Loop
        - While Loop
    - break statement
    - continue statement
------------------------------------------------
LMS 
Sub-Topics
    While Loop
    For loop (Break and Continue)

Session Details
    Learn FREE Spoken English Easy and Quick on YouTube! SUBSCRIBE NOW!

Practice Problems:
    How do you find the missing number in a given integer array of 1 to 100?
    How do you find the duplicate number on a given integer array?
    How do you find the largest and smallest number in an unsorted integer array?
    How do you find all pairs of an integer array whose sum is equal to a given number?
    How do you find duplicate numbers in an array if it contains multiple duplicates?
    How do you reverse an array in place in JavaScript? In place means you cannot create a new array. You have to update the original array.
    How do you print duplicate characters from a string?
    How do you check if two strings are anagrams of each other?
    How do you print the first non-repeated character from a string?
    How can a given string be reversed using recursion?
    How do you check if a string contains only digits?
    How are duplicate characters found in a string?
    How do you count a number of vowels and consonants in a given string?
    How do you count the occurrence of a given character in a string?
    How do you find all permutations of a string?
    How do you reverse words in a given sentence without using any in-built method?
    How do you check if two strings are a rotation of each other?
    How do you check if a given string is a palindrome?

Practice resources:
    Loops
    For loops,of loop

LMS END

üö® slice():
    > Immutable means not change original array
    > Syntax: let newArr = arr.slice(no_of_items_to_delete);
    > Syntax: let newArr = arr.slice(start_index_as_arr_starts_from_[0], normal_position_starts_from_1);
üö®Main diff btn slice & splice methods:-
    slice():
        > Immutable means not change original array.
                    // pass one argument deletes slice of original array & returns in new array.
        > Syntax: let newArr = arr.slice(no_of_items_to_delete); 
                    // passes 2 arguments gives subarray
        > Syntax: let newArr = arr.slice(start_index_as_arr_starts_from_[0], normal_position_starts_from_1);
        > We need to assign it to a new array by creating new one. We can't edit in original array.
        > It takes some slice from original array & distribute it via new array & remaining all items get deleted.
        > Here we can delete from any start (eg:-0) array index & normal position if 3 means it deletes till 2nd postn.
        > We cannot add new item in array.
        > It will take some part from that original array index & return it as subset as new-array from original array.
        > 2nd parameter minus 1st parameter gives position value which counts from 1st parameter.
    splice()
       > Syntax: arr.splice(start_index, remove_index, "new-item");
       > Syntax meaning arr.splice(start-index, delete/remove how many items, "what new item we need to add"); 
       > It is mutable (changes original array).
       > it will allow us to add an item at any specific position of an array
       > We can directly edit the original array.
       > We can delete from any index just we have to mention it as 1st parameter.
       > We can add new item in array.

Constant Arrays:
    > constant means permanent/fixed/stable/can't change
    > We cannot redeclare in same scope with same arr_name.
    > When only one item need to be selected in an array or some array we don't want to change in those cases we use const (keyword means reserved word).

Loops:
    > Cycle
    > Repeating something in a particular manner.
    > Efficient method
    > In order to avoid wasting memory and time, we use loops.
    > Types: Only two i. while loop & ii. for loop

While Loop:
    - Syntax: while(condition){ 
                logic for repeat
                optional: increment / decrement; for next iteration
              }
    - Optimized & efficient one.

For Loop:
    - Syntax: for(initialization;condition;increment/decrement operator){
                    logic for code;
              }
    - 

Break statement:
    - To break at some point and completely come out of it.

Continue statement:
    - continue => To skip the items

Day 9 : 25.05.2023 -----------------------------
Curriculum:
    - Function
------------------------------------------------
LMS
Sub-Topics
    Functions
    Hoisting

Session Details
1. Functions in JavaScript: Writing our first function, Passing Arguments, Optional Args;
2. Hoisting - Variables and Functions

Practice resources:
JavaScript Practice Resources | Community
    Functions
    Define and call a function
LMS END

Function
- What is function?
    > set of reusable code - that we use to perform some action
    > Inbuilt Functions/methods means do some task which already mentioned in that code | We dont need to do any code or write statements Eg:- slice(), toString() 
    > User defined functions are developer created functions.

- How to create a function?
    > function is a keyword
    > sum() is a function_name(parameter/arguments)
    Eg:- function sumOfTwo(){ //Function Declaration | Accelerator or rules
          let a=10;
          let b=10;
          let c=a+b;
          console.log(c);
         } //Res: No execution
- How to call a function?
    > console.log(c); -----> not defined
    > To execute, we need to call the function. Until & unless we call function code will not executed.
    > sumOfTwo(); //Above code executes | Function call 
- How to pass the parameters to the function?
    > Reusability
- how we can get result from the function?
    > return keyword is used to returns the result to function call.
    > If return is spotted immediately comes out and gives the result. This won't checks for code lines after return keyword.
    > return is optional.

-  How to print at console using function call - invoke?
    > using return keyword at end within function block of code 
    > And (outside the function block) variable declaration = function call();
    > 'return' value will store at variable declared outside the function when variable mapped with function call.
    > Without return keyword if we call the function after variable declaration and console it becomes undefined datatype.

- function hoisting:
    > function declaration are hoisted at the top
    > It is similar to var keyword

- Link: https://github.com/Thangarajcs/js-notes/blob/main/day-9

Day 10 : 26.05.2023 -----------------------------
Curriculum:
    - Objects continuation
    - Function continuation
    - Doubt clarification Q&A
------------------------------------------------
LMS
Sub-Topics
    Practice Problem
    Doubts Clearing
    function cont....
    Objects - cont

Practice resources:
    Questions
    Quiz
LMS END

Practice:
    - Square of a Number using dynamic function
      var i;
      function squareOfNum(10){
        var j = i * i;
        return j;
      }
        res = squareOfNum(i);
        console.log(res);
    - https://contactmentor.com/js-function-exercises-solution/
Function (fn):
    - For parameters, we don't need to store in a variables as we are already directly passing the parameter in fn.
    - Because we directly use parameters which are already defined.
    - Always use return in place of console.log inside function so it will come out of fn block which assigns to a var outside and we can reuse it many number of times outside fn block.
    - "===" => compares even datatype of two sides too which evaluates strictly.
    - Scope of Function is within {}
    - Function Hoisting (from Day 2):     
        > Hoisting means moving declaration to the top of the assignment & console and executes the result with value.
        > When fn call placed before fn declaration & executes.
     üö® > Function declaration is Hoisted.
    - Function Expression:
        > When we explicitly assign a func to a variable its called fn expression.
        > Instead of fn name that name comes in place of variable_name
        > Syntax: let variable_name = function(a){
                    return a='Hai';
                  }
                  console.log(variable_name());
        > Eg:- const sum = function (){
               return 'hai';
               }
               console.log(sum());
        > If we try to access this con.log() before fn block, it will show "Cannot access 'sum' before intialization" -> Reference Error
        > So we cannot Hoist around fn expression.
    üö® > Function expression is not Hoisted becoz it is strict validation.

üåüüåüüåüüåüüåüüåüüåüüåüüåüüåüüåüüåüüåüüåüüåüüåüüåüüåüüåüüåüüåüüåüüåüüåüüåüüåüüåüüåüüåüüåüüåüüåüüåüüåüüåüüåüüåüüåüüåüüåüüåüüåüüåüüåüüåüüåü
Conclusion: üö©üö©üö©üö© FN EXPRESSION ARE NOT HOISTED ONLY FN DECLARATION ARE HOISTED AT THE TOP LEVEL   üö©üö©üö©üö©
üåüüåüüåüüåüüåüüåüüåüüåüüåüüåüüåüüåüüåüüåüüåüüåüüåüüåüüåüüåüüåüüåüüåüüåüüåüüåüüåüüåüüåüüåüüåüüåüüåüüåüüåüüåüüåüüåüüåüüåüüåüüåüüåüüåüüåüüåü
    - typeof operator of function => object but it returns function in browser console.
    - 'arguments' is a predefined keyword for inbuilt functions like add() etc. 
        <!----------------PARAM VS ARGUMENTS---------------------------------->
        > Eg:- function sum(gettingReceiveParameters -> a,b,c){
               console.log(arguments <- 10,'Hai", 50);
               }
               sum(givingSendArguments -> 10,'Hai", 50);
        > Eg:- function sum(a,b,c){
               console.log(c); => prints one of parameter named as c => 50
               }
               sum(10,'Hai", 50);
        > Eg:- function sum(a,b,c){
               console.log(arguments); => prints entire list which is stored like array
               }
               sum(10,'Hai", 50);
               //arguments[0] => 10
               //arguments[1] => 'Hai'
               //arguments[2] => 50
Exercise for Function Expression:
    - Odd/even
    - Square of 2 nos

Objects Datatype (obj):
    - Obj is a basic building block of a program.
    - It is a collection of properties in key='value' pairs which are separated by (,)
    - Eg: let car = {
            model:"bmw",
            color:'blue',
            type:'automatic'
          }
          console.log(car.color) => Access above object properties using (. operator) | Printing an obj in console
    - Update an object:
      --------------------------------------------------------------------------------------------------------
        > Now I want to change the color of car
        > Eg: car.color ='red';
              console.log(car.color); 
              console.log(car); => How to get all values from an obj?
        > So best way is to use OBJECT LITERALS means obj={}
        > const student = {
            rollNo: "0024",
            name: 'Ravi',
            mark: 240
         }
    - Three ways to create an obj: new Object(), Object.create(), mObj={}
        1. using 'new' keyword:
        ------------------------------------------------------------------------------------------------------------
        > Syntax: const student = new Object();
                  student.class='first';
        > We can create new pair and make it sit at last inside obj collection of pairs. But it is not correct way of approach which reduces performance.
    -  2. Copy Obj 
      --------------------------------------------------------------------------------------------------------
        > Syntax => let newObjName = Object.create(existingObjName);
       3. 


    - How to get all keys from an obj?
    
    - Remove key-value pair from obj

Day 11 : 29.05.2023 -----------------------------
Curriculum:
    - Array iteration methods: forEach(), map()
    - Assignment-2 discussion
    - Doubt clarification Q&A
------------------------------------------------

Array iteration methods:
    - forEach()
        > It contains 3 params: 1st value, 2nd is index of that value, 3rd is whole array
        > SYNTAX:-
        > arr.forEach(function(currentValue, index, wholeArray){
            console.log(wholeArray);
        })
                    OR
        > arr.forEach(myArr) // myArr is function_name
        function myArr(currentValue, index, wholeArray){
            console.log(wholeArray);
        }
        > checking methodology
        > It does not mutates (changes) original array & returns not as new array but as updated individual values.
        > If we want output in array format we need to explicitly create an empty array and print it.
    - map()
        > if u map an array forms a new array with ur actions
        > always map method will return new array with updated values
        > SYNTAX:-
        > let newArray = orgArray.map(function(value,position,array){
            console.log(value);
        })
                        OR
        > let newArray = originalArray.map(function_name)
          function function_name(value,position,array){
            console.log(value);
        }
        > It does mutates (changes) original array & returns as new array with updated values.

Day 12 : 30.05.2023 -----------------------------
Curriculum:
    - Intro to DOM -> Documentation Object Model
    - DOM methods: getElementById(), getElementsByClassName(), getElementsByTagName(), querySelector(), querySelctorAll()
    - Doubt clarification Q&A
------------------------------------------------
LMS
Sub-Topics
    Introduction to DOM
    Selecting Nodes getElementById() - getElementsByClassName

Session Details
    JavaScript PopUp Boxes | Community!
1. Introduction to Document Object Model(DOM)
2. DOM Structure
3. Selecting Nodes - getElementById, getElementByClassname, getElementByTag, Query Selectors

Practices:
    DOM
    Basics of DOM

LMS END

Intro to DOM
    -> Documentation Object Model
    -> JavaScript can control HTML and CSS via Document Object
    -> JS can change html Element, attribute, css styles (Add or Removed)
    -> SYNTAX
    -> Document is an inbuild Object that has access to html and css
    -> Access any element by id or className

DOM STRUCTURE
    -> It arranges items in tree format like below:
        > Document is root element under which html element comes under which 2 elements: head & body...then under head is link tag element....under body is <div id="myDiv"> placed.
    
DOM MANIPULATION
-> moving / adding / deleting
-> (.) means object
-> Once you get the element u can modify the element: innerHTML, Access style & attribute
-> DOM provide methods to traverse inside the document object or tree:
        ‚èπÔ∏è getElementById()
        ‚èπÔ∏è getElementByClassname()
        ‚èπÔ∏è getElementByTagName()
        ‚èπÔ∏è querySelector()
        ‚èπÔ∏è querySelctorAll()
 1. getElementById()
    - Uniquely identify elements
    - Access html element by id
    - It will always returns u only (single unique) an element with given id
    - once u get the element u can access inside properties
     i. innerHTML
        - innerHTML: content of the HTML element between open & close tag.
        - Eg:- p tag's content - Lorem epsum prints
 2. getElementsByClassName()
    - Access html element by SAME/DIFFERENT className.
    - So we can change same style to multiple elements using same className. From that we can access using index for an element to apply.
    - We can change all css properties too.
    - Returns Collection of Items one by one
 3. getElementsByTagName()
    - Access all html element by HTML Element's Name.
    - Returns Collection of Items one by one
    - Eg:- <div>
 4. querySelector()
    - Combinators like body .child{}
    - Returns only 1 item which is first element in whole document that matches a CSS Selector.
    - Eg:- const q = document.querySelector('body .child'); //  returns only 1 item
           console.log(q);
           
 5. querySelectorAll()
    - combinators like body .child{}
    - Returns Collection of Items one by one
    - Eg:- const allq = document.querySelectorAll('body .child'); // returns all matching items as a list Eg: NodeList
           console.log(allq);
      Eg:- <script>
           let a = document.querySelctorAll(p.para); // we can access only p element with para class content
           console.log(a);
           </script>
           <body>
           <p class="para">1</p>
           <p class="para">2</p>
           <p class="paragraph">3</p>
           </body>


Day 13 : 31.05.2023 -----------------------------
Curriculum:
    - DOM add, delete & update
    - Array iteration methods
    - Doubt clarification Q&A
------------------------------------------------

LMS 

Sub-Topics
    find tags
    update tags
    delete
    
Session Details
1. Finding HTML Elements:
    document.getElementById
    document.getElementsByClassName
    document.getElementsByTagName
    document.querySelector
    document.querySelectorAll

2. Changing HTML Elements:
    innerHTML
    style
    src
    attribute
    element.setAttribute(attribute, value)

3. Adding and Deleting Elements:
    document.createElement(element)
    document.removeChild(element)
    document.appendChild(element)

Practice resources:
    Events
    Handling Events in javascript

LMS END
img
    - adding id & classnames dynamically
    - UPDATING ALL BY SEARCHING DOCUMENT ELEMENTS
Changing HTML Elements:
    - innerHTML
    - style
    - src
    - attribute
    - element.setAttribute(attribute,value)
Adding & Deleting Elements:
    - document.createElement(element) - add a new element to the Document
    - document.appendChild(element) - push our image into document's body tag | adds newtag variable
    - document.removeChild(element) - it removes from existing child
    - document.replaceChild(new,old)
<!-- <img id="myimg" class="image1 image2" src="" alt="">
    <div class="newpara">

    </div>
    <div class="empty" id="tag">1
    </div>
    <div class="empty">2
    </div>
    <div class="empty">3
        <img src="" alt=""> This image should be push into this div using JS // Comment
    </div>
    <div class="empty1">
    </div> -->
 /* Practice Ques:
            - Add img tag using createElement method
            - Perform delete of 2nd para element <p> tag that is inside is div
            - for a div set class, set some new attribute
            - add input tag into body
            - in html div has yellow background - change to green backgroung using JS */
//img
        /* let imgtag = document.getElementById('myimg');
        //let imgtag =document.querySelector('#myimg');
        //let imgtag =document.querySelectorAll('#myimg');
        //UPDATING ALL BY SEARCHING DOCUMENT ELEMENTS
        imgtag.src = 'https//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/External_link_font_awesome.svg.png'
        imgtag.style.width = '200px';
        imgtag.style.height = '200px';
        // adds classname for your element dynamically | Updating class names
        imgtag.classList.add('wwww'); // This will append at last of image1 image wwww
        imgtag.id = ('sss');
        imgtag.setAttribute('mybatch', 'sssss'); */

        /*
        //CREATE IMAGE TAG
        // doing operation like adding style like css in js, creating html elements in js inside document
        let imgnew = document.createElement('img');
        //added src attribute
        imgnew.src =
            console.log(imgnew);
        imgtag.setAttribute('dddddd', 'aaaaa'); // dddddd & aaaaa means attribute name
        */

        /*
        // now I need to tell document where to add my image
        document.body.appendChild(imgnew);
        //if u want in specific place
        //search ur target element - where to add ur img
        let target = document.getElementsByClassName('empty'); //empty means classname
        //As class returns in array we need to indicate index
        target[2].appendChild(imgnew);
        */

        /*
        //removeChild()
        let targetDocument = document.getElementsByClassName('parent'); //parent means classname of body
        targetDocument[0].removeChild(targetDocument[1].firstElementChild); // removed 2nd div inside body by using classname
        targetDocument.removeChild(targetDocument.firstElementChild); // removed 1st div inside body by using id
        targetDocument.removeChild(targetDocument.Children[1]); // removed 1st div inside body
        */

        //Task - create/add a button to the body
        /* let newBtn = document.createElement('button');
        newbtn.innerHTML = "Button";
        document.body.appendChild(newBtn); */

        //need to add paragraph to div with class - ragav
        /* let newpara = document.createElement('p');
        newpara.innerHTML = 'sawetwhgbnfmgj,ykuytrere dsryteryuyjtu'; */
        //u need to find the target by className
        /* let targetDiv = document.getElementsByClassName('ragav');
        targetDiv.appendChild(newpara); */
        //u need to find the target by id
        /* let targetDiv = document.getElementById('ragav'); //if ragav is id means
        targetDiv[0].appendChild(newpara); */

Day 14 : 01.06.2023 -----------------------------
Curriculum:
    - Intro to Events
    - Event Handler
    - Event Listener > Event Propagation : i) Bubbling ii) Capturing
    - Doubt clarification Q&A
------------------------------------------------
Events means actions like click using mouse, pageload, keypress using keyboard
onclick we have to add event which wrapped in a function 

In HTML how to add events attr:
event attributes: onclick(), onchange(), onload()
<body onload="sayhi(5)">

event handlers - who handles ur task like click | perform tasks when action fires
_______________________________________________________
How to add events using JS:
Without Param:
let btn = document.getElementsByClassName('btn');
btn[0].onclick = sayhi; // We cannot assign using js mtd but useful when everything is dynamic onclick what content show up

With param:
To generalize using arrow wrapper function with param:
let btn = document.getElementsByClassName('btn');
        btn[0].onclick = function () {
            sayhi(4)
        }
Note:- Assignment-4
We should not store image's index number as parameter directly in event handler. Instead create new function with index & call inside event handler.
_____________________________________________________

event listeners - who listens to that click which take care of what event should do
                - will observe events & if specification matches actual execution starts and obeys
                - we can add same event multiple times
______________________________________________________________
        btn[0].addEventListener('event_name', when I click what i should do -> functionName)

______________________________________________________________
diff btn event handler & event listener
handler: to click
    - with this we can add only one event
Listener: to solve overlap/override problem we have this will doesn't overlaps shows all values
    - with this we can add same event multiple times
________________________________________________________________-
bubbling:
    It means button inside div but both alerts will pop ups even we touch button only div's alert also will PopUp
    Inward to outward as btn1 inside div1 container
    in addEventListener('click', sayhi)
    by default bubble
    inner element to outer element
    if there is no third param then bubble will happen or if u send 3rd param as true capturing happen


Event Propagation: (in to out or out to in) Another feature of event listner
Transmitting an event on click
To overcome bubbling, Way of defining the event order 

    1) bubbling (in to out)
            in addEventListener('click', sayhi, true) 
               -> false means by default bubble happens;  
               -> button => div => body | child to parent to grand parent

    2) Capturing (out to in)
               -> true should be passed as 3rd parameter in addEventListener
               -> body => div => button | grand parent to parent to child


Day 15 : 02.06.2023 -----------------------------
Curriculum:
    - DOM add, delete & update (CRUD file)
    - Array iteration methods
    - Doubt clarification Q&A
    https://github.com/Thangarajcs/todo-project
------------------------------------------------
üö®/***********innerHTML VS innerText VS textNode**********/

/* // Diff btwn innerHTML, innerText & textNode using <button>
function getData(){
    let todovalue = document.getElementById('user-btn');
console.log(todovalue.innerHTML); -> Res: Add todo
}

*/
/* // Diff btwn innerHTML, innerText & textNode using <div>
function getData(){let todovalue = document.getElementById('user-div');
console.log(todovalue.innerHTML); -> Res: this is div &<p>ssss</p>
todovalue.innerHTML=''; -> This will remove innertext & html tags

console.log(todovalue.innerText); -> Res: this is div & ssss 
// innerText will extract only text from all tags like todovalue.innerHTML; & we cannot assign like todovalue.innerText='';

// to add a text via code use createTextNode()
let newNode=document.createTextNode('ssssqqqqq');
todovalue.appendChild(newNode);
}
*/

// HTML like string in JS using back tick (`)



Day 16 : 03.06.2023 -----------------------------
Curriculum:
    - Event 
    - small projects using event listener
    - Data Validation
    - Doubt clarification Q&A
    
------------------------------------------------
Event -> Any action performed by user / happened on web browser
Eg:- click, scroll, keypress, page load

üö®SYNTAX:
 Event Handler 
    -> elementName.eventName = functionName;
    -> eventName : onclick

 Event Listener 
    -> elementName.eventName("event" ,functionName);
    -> eventName : addEventListener()
    -> event : click, keyUp, submit, scroll, keyPress, pageLoad

DOM 
    -> Documentation Object Model
    -> To get an element from html

Features:-
1. dark Mode/light Mode Model
2. zoom In and zoom Out

Data Validation for form:-
    - Reg form contains Email, pwd & confirmPwd
    - Kinds of Events in reg form's input field & in addEventListener("below_ones", functionName)
    - Input:
        > keyup
        > keyPress
        > onFocus
        > onBlur
        > click
        > mousemove: when u move cursor inside some div/html elements
        > mouseover: hover-on
        > mouseout: hover-off
        > mousedown: when u click mouse button & till release of it this happens
        > mouseup: A user releases a mouse button over an element
        > https://www.w3schools.com/jsref/dom_obj_event.asp
    - SYNTAX:
        > element.addEventListener(event, function, useCapture);
        > useCapture means true gives event capturing otherwise by default false which represents event bubbling(inner to outer elements)
    - function functionName(e)
        > e means event for input key events like keyup or keydown events 
        > we need to pass from our input field for which key we press and same shows at console when we console.log it
        > e.target.value attribute for which key press there
    - To store these keyPress values
        > Create a variable & store in it
        > Default functionality of Register button is load to next page
        > To make it not to load to next pg by default, we use event.preventDefault() -> prevent from reload a page so that we can view in console log
Hamburger button:-
https://codepen.io/Athira231996/pen/wvYVQoX

Day 17 : 05.06.2023 -----------------------------
Curriculum:
    - String Literal : new way to build html in dom.
    - Arrow Function
    - Array method (reduce, some, every)
    - Doubt clarification Q&A
------------------------------------------------
Normal quotes:
    > Eg:-'This is my name' 
    > between Normal Quotes used for string
    > We can't pass dynamic value between normal quote

String Literal / Template literals ${}:
    > HTML skeleton inside JS using SL
    > Eg:- `String value` 
    > between (` `) Back Tick (Above Tab key) used for string literal we can pass dynamic value (multiple string lines) using ${}
    > SYNTAX: 
        `ur whatever str value ${variable}`;

Arrow Function:
    > SYNTAX: Without function keyword
        const arrowFunc = () => {
            console.log(this);   
            console.log('ssss');   // Res: ssss
        }
        arrowFunc();
    > But in normal function it won't behave like this
    > It is same as function expression only usage of binding of this will vary.
    > It is a regular expression function only syntax is diff & this keyword has some effect advantages in the arrow function.
    > If we pass only 1 param in function then no need to use ()
    Eg:-const arrowFunc = q => {
        console.log('ssss');
     }
    > If multiple params use within round brackets()
    > usage same as regular function expression but syntax will vary and 'this' in arrow function will behave differently according to the call

this
    > 'this' keyword behaves like according to the situation
    > suppose this called from some other object/function that will be different.
    > ryt now this called from global top-level so only window object output given
    > In HTML, we can use instead of parent element.

forEach()
    > It is used for no updation in future.
    > Don't want to return in new array.

Map()
    > It is used in use case scenarios like we want to update data in future.
    > This will return in new array which assigned to a variable.
    > Stores return values of updated array in a variable.

Array Methods:
1. every()
    > It will return True only when all items matches the condition.
    > Even one item fails to match condition returns False
    > Next condition won't be executed so strict officer it abruptly stops when not matched
    Eg:-let age = [13, 19 ,19,20,9]
        const result = age.every(function(val){
            return val > 18;
        })
        console.log(result);
    > every() means is everyone is above 18? asking....no so it returns as false as not every val is above 18 (Boolean Value). If one fails also this will return F
    > similar to map every() also assign to a variable

2. some()
    > It will return True if anyone items matches the condition.
    Eg:-let age1 = [13, 19, 19, 20, 9]
        const result1 = age1.some(function (val) {
            return val > 18;
        })
        console.log(result1);
    > Anyone item passed condition, it will returns True.

Diff among (forEach & map) and (every & sum)?
- In forEach & map, it iterates for every items no matter what 
- In every & sum, it won't iterates after encountering 1st instance once condition not matched or matched returns False or True.

reduce()
    > we are going to reduce this array into one result like addition
    > We perform some operation in this so it returns one res
    > Syntax:
    const res = total.reduce(function(acc, value, index, arr){
            return acc*val;
        })
    console.log(res);
        where function means callbackfunction
              total means holds calc temporarily for every iteration / accumulator = 0 initially

Day 18 : 06.06.2023 -----------------------------
Curriculum:
    - BOM 
    - 
    - Array method ()
    - Doubt clarification Q&A
------------------------------------------------
DOM
    > Ur representing ur content (document tree)

BOM (Browser Object Model)
    > We will talk to browser
    > Interact with browser using Objects
    > Browser is a tool to showcase ur website using DOM

> Window Object -> Inside window only document is available
    -> Only var can be used to declare a variable as it is global keyword.
    - window.open()
    - window.close()
    - window.moveTo(2)
    - window.moveTo(0,300)
    - window.innerHeight
    - window.outerHeight -> Total Height of screen
    - window.innerWidth
    - window.document
> Screen Object
> Navigation Object
> Location Object
> History Object
> Local Storage

1. Window Object:
    - It represents the browser's window
    - all JS global objects, (var) functions will be under window.
    - Eg:- window.innerHeight, window.innerWidth

2. Window ----> Screen Object:
    - Presents inside a window
    - window.screen 
    - visitor height in pixel, avialHeight:1080, availLeft:-1920, availTop:-180, availWidth:1920, orientation & many 

3. Window ----> Navigation Object:  window.navigator
    - Visitor browser from one tab 
    - browser setting information 
    - Like name of the browser, 
    - appName: Netscape is developer of Chrome,
    - connection: NetworkInformation{effectiveType:'4g', downlink:1.55}
    - vendor: Google Inc 
    - cookieEnabled: true or not

4. Window ----> Location Object: window.location
    - Like URL, host: "127.0.0.1:5501"
    - hostName: "127.0.0.1"
    - href: "http://127.0.0.1:5501/"
    - origin: "http://127.0.0.1:5501"
    - pathname:"/"
    - port: "5501"
    - protocol: "http:", "https:" s means connection is secured
    - reload: f reload()
    - reload: f reload()
    - replace: f replace()
    - toString: f toString()
    - valueOf: f valueOf()
-> location.reload() is used to reload the browsers
-> location.reload() is used to reload the browsers
-> location.origin('www.gmail.com') 

5. History Object: history
    - It holds the browser history
    -  history.back() -> archives
    -  history.forward()

6. Storage üö®: [Front-end developer can access]
    Eg:- AddToCart things are stored in LocalStorage
    - Web storage under Application Tab we can see both storages.
    - It is a way to store some information in the browser
    - There are two storages:
    1. Local Storage:-
        > It is a container where u store local objects
        > To set a new item in local storage using setItem()
        > Permanent storage of key:value pairs
        > There is no expiry for setItem once we set an item unless until we manually / port deletes it...this stored in local storage forever even we remove code also that stays all time.
        > It keeps info forever until we delete (either manually or using removeItem method)
    localStorage.setItem(key, value)
    localStorage.getItem(key)
    localStorage.removeItem(key)

    2. Session Storage:-
        > Temporarily stored key:value pairs
        > This means once we close that tab session gets expires and deleted stored value without deleting too.
        > This is active only until we close that tab.
        > It keeps info only till we close the window
    sessionStorage.setItem(key, value)
    sessionStorage.getItem(key)
    sessionStorage.removeItem(key)

Cookies: [Back-end developer can also access]
    - It is also kind of storage but not locally related to our code 
    - It is a kind of high level storage purpose in string form
    - Keys stores like some minute high level information
    - Like logged or not, user-id, ur information is shut down, server forgot about
    - This can be interacted with & sit directly in str form by server also
    - It contains name, value, domain, path, expires, size, HttpOnly, secure, sameSite, partition, priority etc.
    - Used for secured information like login credentials, bank details etc.
    - There is connection loss suddenly due to power cut server won't send again n all webpage takes from cookie.
    - How I know user information or how to remember if connection loss happens?
    - window.document.cookie = 'name=hi'
    - Cookies are saved in name-value pairs like:
            document.cookie='name=test; expires=Thu, 01 Jan 2024 00:00:10 GMT'
    - expires: session or date with time 
    - Max. storage 4MB  

Day 19 : 07.06.2023 -----------------------------
Curriculum:
    - JSON
    - AJAX
https://github.com/Thangarajcs/js-notes/blob/main/ajax-07-06

https://www.tutorialspoint.com/http/http_methods.htm
------------------------------------------------
JSON - Java Script Object Notation
    > Data Format that will be used to exchange things
    > Most popular data exchange format from front-end to back-end or vice-versa.
    > When client req for data match at server end becomes success by matching then server responses back with some information like next page comes in JSON format.
    > JSON is a text format to store & transporting the data . It is a data format between server and client
    > Can read server data in JSON format - JSON Strings
    > Sometimes called as json string which makes everything string.
    > There are many formatters like XML, JSON etc.
    > JSON is the most popular data exchange formatter.

JSON Data Formatter:
    > Client-side: JavaScript lang
    > Server-side: Some othr langs like GoLang, Java, Python etc
    > 2-Way Communication: While communicating b/w client & server should be of same language for that JSON format is used like common lang English. Then respective to their ends we will convert into their formats.
SYNTAX: (No Space)
JavaScript Object:
    const obj = {
        name: 'raju'
    }
    console.log(obj.name); 
Syntax:
        const jsobjName = {
            key:"value"
        }
        // Key access (Direct)
        console.log(objName.key);

JSON Object String:
    > If we add everywhere string in JS Obj becomes JSON Object
    > It is called as JSON String as it looks like string.
3 set of Rules for JSON Obj String:
    > There shld be No Space in syntax, 
    > {} should be within '' -> '{}' & 
    > keyNames should be within "" -> "key".

JSON Declaration:
    > SYNTAX: (No Space)
     const obj1 = '{"name":"raju","age":27}';
     console.log(obj1); // Prints as it is!
     console.log(obj1.name); // Res: Undefined

Conversion gives us JSON key's value:
1. GET method:
    > 2 Scenarios
    i. Fetched - Received from Server end as reponse for our request, so we convert at client end for accessing it.
    ii. Created - Already we created a JSON Obj Str, but need to see it as JavaScript for that convert.
    > Front-end sends req for that received response as in json format. Now to show it in UI we convert into JS.
    Example:- 
    criccBuzz.com website under Network -> Fetch/XHR -> select Fetch, under Response (JSON) / Preview (JS)
    > JSON.parse() - convert fetched/created JSON String into JS Object format
    > Syntax:
        const JSONobjName = '{"key":"value"}'
        // JSON String to JS Obj
        const varName = JSON.parse(JSONobjName);
        console.log(varName);
        // Res: {key:'value'}
        // Key access (Indirect)
        console.log(varName.key); //Res: value

2. POST Method: (Stringify & Send it to Server for Storing)
    > From Client to Server end we convert while data Exchange
    > Send above normal js obj to server by converting into JSON Str
    > JSON.stringify() - convert JS Object into JSON String format 
    > Syntax:
        const jsobjName = {
            key:"value"
        }
        const varName = JSON.stringify(jsobjName);
        console.log(varName);
        // Res: {"key":"value"}

JSON.parse() & JSON.stringify() are translators which inbuilt properties.

Diff b/w JS Obj & JSON StringObj?
    > We can console obj.key in JS Obj whereas in JSON Str cannot directly console but we can console after conversion using JSON.parse()
    > As JavaScript is normally understandable lang but JSON is not understandable format.
    > So we need to convert JSON str into 
    > Compare line nos 1534 & 1548

AJAX
    > Asynchronous Javascript And Xml
    > Instead XML, we use JSON format.
    > To make connections betweeen client and server
    > Data transferred to our User Interface and displayed like cricket score, weather report data
From where data is getting updated in UI?
    > Web-Server & client interaction using method AJAX
    > Reads dynamic data from Web-server & show in Web-browser UI Page (Client)
    > For that we have mechanism/tool in JS called AJAX & advanced form of AJAX is Fetch.
    > On clicking Sign Up button handled by AJAX
    > Reads data from server & display on web-page as UI display (data always supplied from server)
    > You can also send the data to server using AJAX.
    > Client sends request
    > Server process the request and sends the response back to client
    > Server URL - API

    > new is a keyword complicates the code and slows down execution speed. 
    > Do not create Number Objects which produce unexpected results.
     Eg:- let y = new Number(123);

    > XMLHttpRequest() 
        - creates new http request object
        - initiator of AJAX Object
        - is a method gives you several properties to communicate with server
    > both creates a new xmlhttprequest object
    
this 
    -> this is a keyword reponses according to the situation
    -> represents here xml http request object 
    -> Here it is a response of req.open('GET method', 'URL') & req.send()'s request

response -> Gives output once request is accepted. It is also in JSON object.

responseText -> Data is stream & response will be json like that. Sometimes both can be same. Not worried about server in that scenario u can use it.

HTTP METHODS:-
GET, POST, PUT, HEAD, PATCH, DELETE, etc refer above site.
HTTP Request Methods
> Onclick some interactions happens due to httpreq sent to the server. 
    > send() -> send request to server via browser
    > send() -> Initiates communication
    > open() -> Which server address & what http method
    > onload -> we can assign a function this will be executed once request is successful & data delivered
    Within function we can access those delivered data.
    > status() -> 200 means successfully data delivered but 400+ or 500+ means fails to get data due to some mistake in url or errors.
    > onchange()  
    > post()
    > put()
    > head()
    > patch()
    > options()
    > connect()
    > trace()
    > delete()

Http Status codes
    > 100 - Information
    > 200 - Success
    > 300 - Redirection
    > 400 - Client level Error
    > 500 - Server level Error

Response part
    > onload to the request part

HTTP Request part
    > Hyper Text Transfer Protocol
    > makes connection to server URL using get method

RequestHeader
    > We sends it.

// task 

//url - https://jsonplaceholder.typicode.com/albums
// method - GET

// get the data from server and show in  UI

Day 20 : 08.06.2023 -----------------------------
Curriculum:
    - AJAX
    - HTTP
    - Array method ()
    - Doubt clarification Q&A
    - For practice dummy json site:
https://jsonplaceholder.typicode.com/
https://dummyjson.com/products
https://github.com/Thangarajcs/js-notes/blob/main/1686176884663.pdf
------------------------------------------------
AJAX

Error Handling with Try-Catch:
    > try-catch error
    > catch an error and how to find & avoid it?
    > using throw
    > this gives the way to handle the errors
    > for API errors not for validation errors
    SYNTAX:
    try{
        normal code
    }
    catch(err){
        // from try block error will be caught here
        console.log('my error',err);
    } finally{

    }

throw (compilation error means code err):
    > throw keyword means manually throws the error missing

finally (funny):
    > no matter what it executes all time

API:
    > Application Programming Interface
    > That fake or reel API/dummy json placeholder itself is called API
    > Bulk Data (Datum) usually we get from APIs/KPIs
    > Interacting with some other machine.
    > In BackEnd only back end developers create APIs

Fetch - api: 
    > fetch()
    > new way of calling ajax urls
    > It allows you to make http request to server
    > No need to use XMLHttpRequest()
    > This makes code simpler way & advanced version.



Day 21 : 09.06.2023 -----------------------------
Curriculum:
    - Event Handler VS Event Listener
    - Simple Object
    - BOM
    - DOM
    - JSON
    - AJAX
        -> GET Method
https://codepen.io/Athira231996/pen/bGQNmKV
        -> POST Method
https://codepen.io/Athira231996/pen/bGQNmmE?editors=1111
------------------------------------------------
Event Handler VS Event Listener:
    > Handler assigns to a function & replaces/overrides for same function with different values
            // btn.onclick=function(){} -> One Way Handler

    > Listener itself a function inside which we pass an event, function
    > It won't replaces/overrides for same function calls with different values
            // btn.addEventListener("click", function); -> One Way Listener

Simple Object:
    > How to access keys (2 methods)
        1. Object.key="";
        2. Object["key"]="";
    > Reference Chaining: We can also assign an object to another variable which passes same Key:Value pairs to it.
       Eg:- let newObject = oldObject;
    > To overcome this Reference Chaining, we can do copy of that object. Refer Qiuz-6 Q-1
    > How to update value? oldValue gets replaced by newValue
       Eg:-  newObject.key="newValue";

BOM (Browser Object Model):
    > Anything related to browser
    > Window: 
        window.alert(), prompt() etc
        document => history => location => screen => navigator
    > document: DOM -> CRUD Operations(Create, Read, Update, Delete)
        // search
        document.getElementById
        document.getElementsByClassName
        document.getElementsByTagName
        // create
        document.createElement('div)
        // remove
        element.remove();
    > history: History of the browser
        search history
        > history.length
        < 2
        > history.forward
        < f forward(){[native code]}
    > location: shows current URL
        window.location
        port, hostname, protocol: "http:" without s means not secured | "https:" means secured
        To access location.port, location.protocol, location.pathname
    > screen: Screen Size
        orientation, width, height
    > navigator: device specification (Hack)
        bluetooth, appVersion, Connection, geolocation, userAgent, permissions

DOM (Document Object Model):
    > Document, HTML & its children elements
    > It is like a tree model.

JSON (Javascript Object Notation):
    > Array of Objects
    > How to access json? -> objectName[i].keyName -> here 'i' means 0 to ObjectName.length

    For Practice:
        https://jsonplaceholder.typicode.com/todos

AJAX (Asynchronous JavaScript And XML):
    > AJAX is httprequest made by the JS to receive or send data from the server without refreshing the page while we jump from one page to another page.
    > Update a web page without reloading the page
    > Requests data from a server - after the page has loaded
    > Receives data from a server - after the page has loaded
    > Sends data to a server - in the background 
    > Synchronous means will take some time until it gets response won't move to next line of code
    > Asynchronous means it will not wait up to get the response, it will run the next lines
    > Advantages of Asynchronous: Time consumption reduced, quick compilation
    > XML means Extensible Markup Language is user-defined tags like in keyName we create tags of user-details within user tag

AJAX Steps:
There are 4 steps to create AJAX. They are:
__CONNECTION_________________________________________________________________________________
    Step:1 Instantiate/start XMLHttpRequest() connection
    Step:2  To open a connection: use open method on it and pass methods(GET,POST etc.) and endpoint means URL
    Step:3 Send the request to Server
    Step:4 Register an Add EventListener method to eventName = "readystatechange", function = onReadyStateChange
__CHECK RESPONSE______________________________________________________________________________
Within server send us reponse, what are the things we have to check
    Step:5 After receiving the response, what are the things we have to check following:
        1. readyState should be 4
        2. statusCode should be 200 for success code - correct response
        This means getting exact responses & no data missing

___Pre-request OR AJAX Call___________________________________________________________________
        1. endPoint: "https://jsonplaceholder.typicode.com/todos"
            demo API / Public API from websites for practice
            In real projects, backEnd developers will provide endPoint URLs
        2. method: "GET"
____SYNTAX:___________________________________________________________________________________
    1. var ajax = new xmlHttpRequest();
    2. ajax.open(method, endpoint) => ajax.open("GET","URL");
    3. ajax.send();
    // Register an Event Listener to make this step work
    4. ajax.addEventListener("readystatechange", onReadyStateChange);
    // string to JSON 
        => let a = JSON.parse(String);
    // JSON to string 
        => var b = JSON.stringify(JSON);

Http(Hyper-Text Transfer Protocol):
    http Methods: 
        GET, -> to send the request to the server
        POST, -> to send data to the server
        Patch, -> to update data 
        delete -> to delete/remove data

    status codes: 1xx-5xx
        1xx & above 100 -> Information
        2xx & above 200 -> success code
        3xx & above 300 -> Redirection
        4xx & above 400 -> client error code
        5xx & above 500 -> server error code

    readyStateChange in AJAX:
        https://w3schools.com/xml/ajax_xmlhttprequest_response.asp
        - Request is sent by Frontend Application & Response is sent by Backend Application
        - The onreadystatechange property defines a function to be executed when the readyState changes.
        - The status property and the statusText property holds the status of the XMLHttpRequest object.
        - readyState: Holds the status of xmlhttprequest()
            0 - request not initialized
            1 - server connection established
            2 - request received by server
            3 - processing request & preparing response / waiting for response
            4 - request finished and response is ready / response received
        - statusText: Returns the status-text (e.g. "OK"-200 or "Not Found"-404)
        Eg:- The onreadystatechange function is called every time the readyState changes.
            When readyState is 4 and status is 200 - "OK", the response is ready: 
            readyState 4 !== status 200 as readyState is different property & status is different property



Day 22 : 11.06.2023 -------------------------------
Agenda:
    - Assignment:4
    - onClick image changes in preview
https://www.geeksforgeeks.org/how-to-preview-image-on-click-in-gallery-view-using-html-css-and-javascript/
    - active class toggle
https://www.w3schools.com/howto/tryit.asp?filename=tryhow_js_active_element
    - co-students work
https://codepen.io/sameersinha512/pen/qBoEwMO
https://codepen.io/Bibhujit/pen/gOQpawa
---------------------------------------------------------

Day 23 : 12.06.2023 -------------------------------
Agenda:
    - Assignment:4 Discussion
    - this
    - üö® call-bind-apply
https://github.com/Thangarajcs/js-notes/blob/main/12-06-call-bind-this
    - YouTube JS tutorials
https://www.youtube.com/@akshaymarch7/playlists
https://www.youtube.com/watch?v=hdI2bqOjy3c&list=PLillGF-RfqbbnEGy3ROiLWk7JMCuSyQtX
https://www.youtube.com/playlist?list=PLRAV69dS1uWSxUIk5o3vQY2-_VKsOpXLD
---------------------------------------------------------
'this'
    > this means from where u are calling
    > In general, it refers to currently calling an object
    > In global (Outside function), it refers to window
    > In javascript, it refers to object's key

call-bind-apply : Reusability of function code
    > call: arguments passed by ,
        SYNTAX: student.showName.call(stud2, 1, 2); // Moni 1 2 

    > apply: arguments passed inside array []
        // Difference from CALL mtd is Parameters are passes within an array
        SYNTAX: student.showName.call(stud2, [1, 2]); // Moni 1 2

    > bind
        // bind will not be called immediately
        SYNTAX: const laterUse = student.showName.bind(stud2);
        laterUse(1, 2); // Res: Moni 1 2

Day 24 : 13.06.2023 -------------------------------
Agenda:
    - OOPS in JS
    - Object, Class, Inheritance, Encapsulation, Abstraction & Polymorphism
    - Study Materials for JS
https://betterprogramming.pub/object-oriented-programming-in-javascript-b3bda28d3e81
    - JS Notes
https://www.simplilearn.com/tutorials/javascript-tutorial/oop-in-javascript
    - PDF for JS
https://github.com/Thangarajcs/js-notes/blob/main/1680523006597.pdf

    - The Net Ninja Youtube JS tutorial
https://www.youtube.com/@NetNinja
    - Traversy Media YouTube Channel
https://www.youtube.com/@TraversyMedia
    - Today's notes
    - JS code challenge websites
https://www.jschallenger.com/
https://www.learn-js.org/
https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/
---------------------------------------------------------
OOPS:
    > Object Oriented Programming Language in JS
    > JS is not OOPS; it is scripting language
    > But we can use OOPS concepts in JS
    > In Express JS (ES6 version) only OOPS concepts have more power & are mostly utilized.
    
Object:
    > Object is one of JS datatype & also comes under OOPS
    > It is one of the concept in OOPS.

Class: introduced ES6
    > Kind of object but not fully object.
    > It has some properties of object.
    > Blueprint of an object
    > It is also called as Constructor.
    > instance means from one prototype we can create 10 more bluprint from an object
    > new keyword is used to create instance (copy)

Inheritance:
    > extends keyword is used for
    > super keyword is used for
    > we can exchange one class's properties & methods to another class - Reusability

Encapsulation:
    > Hiding the information from outside world.
    > Outside the function can't know
    > Hiding as much as possible and exposing a minimal public interface.
    > mechanism by which the data & function are bound together within the object
    > multiplying the data
    > used for binding the variable functions
    > Protecting your information
    > For Our Code security

Abstraction:
    > We hide the implementation details itself. (Private)
    > Good maintainability of code & reusability is also achieved.
    > Unneccessary expose about ur code is avoided.

Polymorphism:
    >
    >

Composition:
    >
    >

Abbreviation:
    >
    >

Day 25 : 14.06.2023 -----------------------------
Curriculum:
    - JQuery & its features
    - GET Methods
    - SET Methods
    - jQuery.com (Official Website) https://jquery.com/download/
    - Add/Update/Delete HTML Elements:
https://www.w3schools.com/jquery/default.asp
https://github.com/Thangarajcs/js-notes/blob/main/jquerynotes
------------------------------------------------
jQuery
    > It is a javascript library.
    > It also simplifies the JS programming language usage.
    > "Write less code, do more." - Slogan
    > Features: 
        - HTML DOM Manipulation,
        - CSS Manipulation,
        - Events manipulation,
        - AJAX Handling,
        - Animation, Other utilities etc.
    > We use $ symbol for every action in jQuery
    > How to add jQuery into our code?
        - CDN (Content Delivery Network) internet is must to use cdn hoisting network.
        - jQuery CDN:
        Include the CDN link in the head tag
    > selectors & Events
    > create methods: append(), after(), before()
    > delete methods: remove(), empty()
    https://ajax.googleapis.com/ajax/libs/jquery/3.6.4/jquery.min.js

syntax:


Selectors and Filters:

$(<<taget ele/class/id>>).action()

$().hide();

event:

$('.b2').dblclick(function(){
  $('.jq').hide()
})

$('.txt').keypress(function(){
  $('.jq').show()
})


Add/Update/Delete HTML Elements:


// 
//js
//document.getElementsByClassName('jq')[0].style.display = 'none';

//selector
//$('.jq').hide()
//event
// $('.b1').click(function(){
//   $('.jq').hide()
// })


// $('.b2').dblclick(function(){
//   $('.jq').hide()
// })

// $('.txt').keypress(function(){
//   $('.jq').show()
// })

//eq(1) - to traverse the array 


//jQuery GET

//text()
$('.b1').click(function(){
  console.log($('p').eq(1).text())
})


//html()
$('.b1').click(function(){
  console.log($('p').eq(2).html())
})

$('.b1').click(function(){
  console.log($('p').eq(1).attr('myname'))
})

$('.news').text(function(){
  return 'HELLOW THIS IS NEWS'
})


$('.b1').click(function(){
  console.log($('p').eq(1).attr('myname1','this done now'))
})

//create a new element
//jQuery SET
const divtag = document.createElement('div');
divtag.innerHTML = 'this a javascript way';
document.body.appendChild(divtag);

//jquery
//append
//after()
//before()
const mydiv = $('<div></div>').text('this a jquery way');
$('.news').after(mydiv);

//jQuery remove
//remove()
//empty()

Day 26 : 15.06.2023 -----------------------------
Curriculum:
    - RegEx
    https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/#regular-expressions

    - More JQuery validations
    - Asynchronous JavaScript
    https://dev.to/nodedoctors/an-animated-guide-to-nodejs-event-loop-3g62
    - Event Loop
    https://dev.to/lydiahallie/javascript-visualized-event-loop-3dif        
    - Class Notes
    https://github.com/Thangarajcs/js-notes/blob/main/15-06-2022

------------------------------------------------
Regular Expressions
    > It is a sequence of characters that create a pattern. It can be later used to validate our input.
    > Like Built-in objects
    > User-input correction or replace can happen with regex.

SYNTAX:
Modifiers:
    > It tells u whether pattern should be case insensitive or global or multiple match.

Link: https://html.form.guide/jquery/validation-using-jquery-examples/
FORM VALIDATION:
    RegEx:
    ! -> Don't come inside
    /\d/g -> Gives only numbers (digit) in the string
    /\D/g -> Gives only alphabetical & whitespace (non-digits) in the string
    /^\d{10}$/ 
        -> / denotes start and end
        -> ^ means start
        -> \ means escape sequences (ignore special characters or whitespaces)
        -> d means numeric values
        -> {10} how many digits
        -> $ means end
ES6 means ECMAScript version 6
Synchronous:
    > Doing each activity/task in an same order at different time (row-wise)

Asynchronous JavaScript:
    > Multiple tasks can be done in Parallely.
    > Human daily task (Synchronous):
        - GetUp with Alarm
        - FreshUp
        - cooking breakfast
        - Having breakfast 
        - Go to Clg/Work
    > Human daily task (Asynchronous):
        - GetUp with Alarm
        - FreshUp (bath)
        - cooking breakfast (cook)
        - Having breakfast (dress)
        - Go to Clg/Work (bus)
      > But it works not in same above order
      > So I need to make it wait for some time
      > CALL BACK: running async task one by one by calling back manually each functions. Complex & confuses when many things runs.
      > Call Back Hell happens when u nest too many async functions one by one.
      > Instead of call back hell, we can use Promise
      > to rescue the call back hell and neatly execute task we got new
      > js feature PROMISE (Asynchronous concept)
      > doing the things.................................. 
      > Story on mountain well, 2 child fetch water & village house parents.
      > Syntax:
        let myPromise = new Promise(function(resolve, reject){
            if(true){
            resolve('success');
            } else {
            reject('error');
            }
        })
        myPromise
        .then(function(res){
            console.log(res);
        },
        (err)=>{
            console.log(err);
        })

Day 27 : 16.06.2023 -----------------------------
Curriculum:
    - Call Back function
    - CallBack Hell
    - Promise (Async Concept)
    - Closures

------------------------------------------------
Call Back Hell:-
    > calling function back in Nested way through which we can't find error, confuses & complex
    > Creates pyramid structure

Promise (Async Concept) - rescue from call back hell
    > Promise is the way introduced to overcome call back hell
    > to rescue the call back hell and neatly execute task we got new 
    > js feature promise
    > Either resolve success or error
    > Make asynchronous code to synchronous code through promises.
    > There is no asynchronous way.
    > We are going in synchronous way (orderly manner only) through asynchronous method
    > resolve - success
    > reject - error
    > SYNTAX:
        urPromiseName.then(function(){}, function(){})
    > Each promise has 3 execution states: Pending, Fulfilled, rejected
        1. Pending state: When execution happens & if u try to access the promise
        2. Fulfilled state: Sucess status
        3. Rejected state: Error status
Closures:-
    > Closure means when a function returns from another function that will have a context of its created place (parent context).
    > Closure means a return function will have access to its lexical context
    > Lexical means variables places way ahead / before.

Pending Topics:
    - Async using await method to fetch an API
    - Filter function
    - Polymorphism in OOPS
    - Exeception context
    - Parser
    - Indexed DB from BOM
    - for...in loop & for....of loop
    - how to get * in red when mandatory field not filled?
    - Fetch API
    x jQuery concepts
    x Closures
    x Arrow function

Final Assignment Link:-
https://drive.google.com/file/d/1FMJdWCTHDGXEWLr7XOBitsuHzogGFQfm/view

Day 28 : 17.06.2023 (SAT) -----------------------------
Curriculum:
     - jQuery
     - AJAX in jQuery
     - Fetch API in jQuery
     -  
     -
     -
https://api.jQuery.com
------------------------------------------------
jQuery
    > Library of framework | $ used to represent jQuery
    > How to add jQuery?
        - go to jQuery CDN in browser
        - Add script file in html header before title tag
    > Get
    > Get & Update content
    > addEventListener means in JQuery "on"

Ajax Get & POST Method:
    >

Day 29 : 26.06.2023 -----------------------------
Curriculum: (Harshit Raj Sir's Tutorials)
    - Different ways to produce function
    - Function advance concept : CALL, APPLY & BIND
    - Why call() & apply() - Usecase
   
https://docs.google.com/presentation/d/18filyiHB3bKs4MJZ4m0PX3vWm7Dv7wrsV1UvvhcGy_4/edit?pli=1#slide=id.g20a15d1d7d2_0_50
------------------------------------------------
Different ways to produce function
    > 1. Normal function
        -> If you have a normal function without any return value, then it returns "undefined".
        -> If you have a Promise function without any return value, then it returns "Promise object".
    > 2. Function expression
    > 3. Anonymous function (Function expression & Anonymous function are almost similar)
    > 4. Arrow function
    > 5. IIFE 
        -> Immediately Invoked Function Expression
        -> Definition: When we define a function, it will call automatically.
        -> In IIFE, we will wrap the function & make this function call pass something within parentheses like "India".
        -> Define, How to pass arg and return from IIFE
        -> SYNTAX:
            let f2 = (function (country) {
                console.log("hello f2() --> ", country);
            })("india");
                console.log(f2); // Undefined
        -> Why IIFE......
            - Protecting our data (implementation details like bank account number)
            - For security reasons, this works like oops concept Abstraction
            - Not conflicting with other functions
            - We are not polluting our global scope
        -> in which places we use IIFE...
            - It is used while designing libraries like jQuery Library for JavaScript (hidden code) 
            - Library means big chunk of code where u push ur code & give to world.

Lexical Scope / Lexical Context: 
    > Context means value of this
    > Scope means place where a ground in which u can access the variable like visa valid only within that particular country 
    > Assigning variable from parent scope
    > Lexical scope = Local Scope + Parent scope + Global Scope

Function Advance Concepts:- 
call():
    > Whenever we want to invoke a function & pass the lexical context
    > 'this' keyword will not invoke object (key-value pair) when u normally call a funcion with objectName & without .call() gives output as global things
    > We use skeleton of one function from another object by invoking and passing the context means values of current object
    > TODO: obj3 is borrowing print() function which is inside of obj2 

apply():
    > 100% same as call() only difference is syntax how u pass string values in ["str1", "str2"]

Why call() & apply() - Usecase
//! Function borrowing & Reusability

Example:
let obj2 = {
    name: 'Virat',
    country: "India",
    test: function (){
        console.log('test');
    },
    print() {
        console.log(`Name = ${this.name} and Country = ${this.country}`); // 'this' means obj2 used for reusability
    }
};
obj2.test(); // test
obj2.print(); // Name = Virat and Country = India

let obj3 = {
    name: 'Smith',
    country: "Australia"
}

obj2.print.call(obj3); // Name = Smith and Country = Australia  ‚úÖ syntax call method

// obj2.print() --> invoke print() function from another 'obj2' object
// obj2.print.call(obj3) --> passing context of 'obj3' current object (this)

//obj3 is borrowing print() function which is inside of obj2 


Day 30 : 27.06.2023 -----------------------------
Curriculum:
    - Live Project 1 - Video Player Application like YouTube
    - Fetch API using async-await functions
 
[Time Stamp: 01:51:01] 
------------------------------------------------
Live Prject 1 - Video Player App
    -> Sprint means in a MNC company a developer will develop only a feature till it's deadline.
    -> Each feature is a sprint.
    -> We have a player section with 2 wrappers
        1. Player Wrapper [Main Video]
            - iframe tag with src, allowfullscreen, frameborder=0 attributes contains video
            - video actions: 
                viewsCount, icons, 
            - title & description
        2. Playlist Wrapper [Thumbnails]
            - List of videos to select which to display at Player Wrapper.
            - Initially, we kept placeholder image on load.
            - Then videos getting called from API & diplay over here.
            - For that we need to create a HTML structure at JS file & then render videos & its contents.
    -> Implementation of Javascript Functionalities [Need]:
        1. Render the playlist dynamically.
        2. Render the first video from the playlist automatically and dynamically.
        3. The video card click from the playlist should load the video and data in the video player section.
        4. On the video card click, the current video should get the highlighted border.
    -> We have 2 JSONs contains static data from which we dynamically render.
        1. playlistData: 
            - It is for Thumbnail Cards [side-list].
            - It contains Array of objects(json-javascript object notation).
            - Each object contains id, title, thumbnail
        2. videoPlaySectionData:
            - It is for Main videos to play at player section.
            - It contains Array of objects(json-javascript object notation).
            - It contains list of videos with its contents.
            - Each object contains some details of each video id, title, description, views, vimeoId and isLiked, isSaved.
    -> We should start build real video player app with functionalities.
        1. Build Video Cards:
            - We need to create html structure for the cards to render from static data.
        2. Fetching static data:
            - Using JS function we need to fetch the static data.
    -> How to render the cards dynamically / create it?
    > 1st functionality:
        - Let's focus on the first card only by creating a function only for it.
        - After create a card in function now we will run a loop and call that function & append it to DOM div element.
    > 3rd Functionality: OnClick
        - For this we need to grab all cards from playlist-wrapper div
        - This can be done by querySelectorAll() which returns NodeList(10) of elements which can be loops through each using forEach/for loop. Here we used forEach.
        - forEach performs specific action for each node in an list.
            SYNTAX:
                NodeListOf<Element>.forEach(callbackfn: (value: Element, key: number, parent: NodeListOf<Element>))
        - callbackfn: A function that acceps upto 3 arguments.
        - forEach calls callbackfn function 1 time for each element in the nodelist. 
        - Always in companies they use querySelctorAll() only instead of getElementByClassname(). So we will follow also it.
        - We attached event listener on every cards.
        - Now onclick of each card bring it to play at player along with its content.
        - On click of each card gather it's source url from videoplayer iframe tag's src by getElementById()
    > 4th functionality:
        - Gather all cards by querySelctorAll()
        - Run a loop over cards and remove the border
        - And then add border to only clicked video 
    > 3rd functionality:
        - Render the 1st video from the Playlist automatically and dynamically
        - There is somthing called DOMContentLoaded.
        - When ur DOM content is fully loaded, then do the thing u want.

Fetch API using async-await functions
    -> async keyword gives response as promise
    -> await keyword unwraps promise

[Time Stamp: 01:51:01] 

Day 31 : 28.06.2023 -----------------------------
Curriculum:
    - Live Project 2 - Music Player Application like YouTube
    - Features like Play, Previous and Next buttons
    - Play/Pause Feature & their functionalities.
    - Storage
    - Show Pop Up of favorite music list

------------------------------------------------

Storage:-
    > Session Storage:
        - max 5dB
        - Exists till session tab closes only.
        - Eg:- Many big sites like IRCTC, Bank and payment pages store in this only.
        - For security reasons, the session storage helps.
    > Local Storage:
        - max 10dB
        - Local Storage is also object
        - Even after session tab closes by accidently/powercut, stored key-value pairs exists
        - Eg:- To store Add To Cart lists

    > Indexed DB: 
        - Persistent databases like mySQL, MongoDB, SQL etc.

Show Pop Up of favorite music list
    > To show music list, we need to add some animations (@keyframes) for pop up.
    > 1st step: On click of like button, we need to Add that song to fav list in Local Storage.
    > 2nd step: Grab all btns & Just add click event on every button (1st chunk)
    > 3rd step: Try to store liked btn's song's id & name by fetching song via btn id in local storage         


Day 32 : 29.06.2023 -----------------------------
Curriculum:
    - Live Project 3 - Video Player Application like YouTube
    - 
    - 
    - 
    - 

------------------------------------------------
Application:-
    > web browser's inbuilt feature
    > There are 3 types of storage in browser.
        1. Session storage
        2. Local storage
        3. IndexedDB

Session Storage:
    > Temporary for each session and on close stored data cleared & lost like IRCTC
    > expires after session close or powercut or shutdown

Local Storage:
    > Permananent storage of data 
    > Unless and until we delete it manually.
    > Max. limit 10MB
    > We can small amount of data for small applications
    > It is also object stores key-value pairs.
    > We can access using Object.keys() method 

Show PopUp of favorite songs:
    > add a button object for every song's buttons by using className
    > on click of button of a song that song should pops up and store

Day 33 : 30.06.2023 -----------------------------
Curriculum:
    - Asynchronous
    - HTML & CSS & JS
    - Single thread / Multi Thread
    - Keywords (var), datatypes, Strings, Array, etc
    - Functions (Code Execution & scope)
    - Browser

------------------------------------------------
Asynchronous:
    -> Non-blocking code
    -> Can avoid blocking of like setTimeout() block of cod
    -> We can do Project like live-recodring apps etc using async functions.

Language:
    1. Markup Language
        -> Doesn't throw any error and static
        -> No security and Validation available 
        -> Using HTML & CSS we can produce webpages statically only.

    2. Programming Lanaguage 
        -> Talk to ur hardware and software
        -> Capable of making Decisions (right/wrong) 
        -> This makes now Powerful in 0's & 1's binary (machine) lang

HTML: (Hyper Text Markup Language)
    -> Structure & skeleton
    -> Markup language:
CSS: (Cascading Style Sheets)
    -> Styling for Design purpose
    -> Decorate ur webpage like makeup
    -> Using HTML & CSS we can produce webpages statically only
Javascript: 
    -> But using JS we can produce dynamic websites
    -> JS is for both for frontend and backend
    -> But Java and python is only for backend & Multi Threaded language and platform independent
    -> Frontend means client-end users side in web browsers like websites or mobile user
    -> JS is Single Threaded language, Synchronous and platform independent
    -> There are 2 things in JS:
        (1) Single Thread / Multi-Thread
            (i) Javascript is Single Thread
                -> Just runs only one line of code at once.
                -> As it  behaves like man with 2 hands. If >2 balls, it can't handle & leads to hanging problem while running for loops directly in browser window's under source tab.
                -> Fully occupied and condition can't relieve current thing going on.
            (ii) Multi-Thread means superman with super power / octopus with 8 hands (NICE CONCEPT)
                -> Do task in concurrently (multitasking)
        (2) Synchronous / Asynchronous
            (i) Javascript is Synchronous
                -> Blocks the code when any interruptions like error etc occurs
                -> Blocking code and it needs all previous line should be executed
            (ii) Asynchronous
                -> Non-blocking code
                -> Youtube, FB & Insta like apps using this behaviour even we upload a big video content we can simueltaneously use it to watch some other
        (3) Var / Datatypes / Strings / Array
                -> To store we use Datatypes container
            Var: In var, we can change by re-assign its datatype according to stored values.
            Let: In let, we can't change by reassigning. 
            const:
            Datatypes: Number, String, Array, Objects & Symbol etc. 
        (4) Functions basic in-depth concepts
            (i) Code Execution:-
                1. Phase 1: Global Memory manager[GMM] (Intialization & declaration)
                    -> Checks only at Left hand side 
                    -> Looks for var, let, const & function keyword
                    -> Not exists then assign undefined to it
                2. Phase 2: Global Code Execution manager[GCEM]
                    -> Checks only value at Right hand side 
            Eg 1:-  console.log(x); -> Undefined
                     var x = 10;
                     console.log(x); -> 10

                Reason (BTS): Behind the scene, GMM assigns 'x' to undefined in first line then 
                GCEM: Asks MM what is 'x'?
                GMM: 'x' is undefined
                GCEM: Okay I will execute as undefined
                GCEM: After execution it checks 2nd line and go to MM and say I saw value as 10.
                GMM: Okay I will update it
                GCEM: Then I will execute as 10

            Eg 2:-
                console.log(a); // undefined
                function funcA(){
                    var a = 100;
                    console.log(a); // 100
                }
                funcA();

            Reason:
                GMM   - Global Memory Manager
                GCEM  - Global Code Execution Manager
                F1MM  - Function 1 Memory Manager & 
                F1CEM - Function 1 Code Execution Manager

            Behind the Scene (BTS):
                -> GMM checks for let, var, const & function keyword at first line 
                -> And then goes to 2nd line found function keyword assigns funcA's code to some other memory manager named as 'funcAMM' 
                -> And then goes to last line at funcA() no keyword so it ignores.

            Conversation between GMM & GCEM in global scope:
                GCEM: Asks GMM Do you know 'a' in 1st line?
                GMM: I don't even know what is keyword of 'a'.
                GCEM: Ok. I will execute by throwing a Reference error as 'a' is not defined at all
            
            Conversation between F1MM & F1CEM inside function scope:
                BTS, F1MM analyzes in left hand side & found var keyword and ignores console.log line as there is no keyword.
                F1CEM: Asks F1MM Do you know 'a'?
                F1MM: Yes, I know 'a'. It has var keyword.
                F1CEM: Checks for Right Hand Side and takes value as 100 & executes it.
            
            Eg 3:-
                console.log(y); // undefined
                function f1(){
                    var y = 100;
                    console.log(y); // 100
                }
                var y ="Sagar";
                console.log(y); // Sagar
                f1();

            Reason: There are GMM, GCEM, Function 1 Memory Manager(F1MM) & Function 1 Code Execution Manager(F1CEM)
            Convo: BTS, GMM checks for let, var, const & function keyword at first line then goes to next ln found function keyword assigns func code to some other memory manager named as F1MM and goes to next var keywrd found 
            F1CEM: Asks F1MM what is 'y'?
            F1MM: Yes I know'y'. It is undefined
            F1CEM: Okay I will execute as undefined
            F1CEM: After execution it checks 2nd line and go to MM and say I saw value as 10.
            F1MM: Okay I will update it
            F1CEM: Then I will execute as 10
            F1CEM: GMM

            Warning: Different functions have seperate managers for each & seperate memory.

        Eg 4:-
                console.log(y); // undefined
                function func2(){
                    console.log(y ==>", y); // undefined
                    var y = 100;
                    console.log(z); // Sagar
                }
                var y ="Sagar";
                console.log(y); // Sagar
                func2();

            Reason: There are GMM, GCEM, Function 2 Memory Manager & Function 2 Code Execution Manager
                GMM   - Global Memory Manager
                GCEM  - Global Code Execution Manager
                Func2MM  - Function 2 Memory Manager & 
                Func2CEM - Function 2 Code Execution Manager

            Behind the Scene (BTS):
                -> GMM checks for let, var, const & function keyword at first line 
                -> Then goes to 2nd line found function keyword & assign func2's code to some other memory manager named as 'func2MM'
                -> Then goes to 7th line found var keyword & ignores 8th line as no keyword.
                -> And then goes to last line at func2() no keyword so it ignores.

            Conversation between GMM & GCEM in global scope:
                GCEM: Asks GMM Do you know 'y' in 1st line?
                GMM: I don't know 'y'. So I declared as undefined.
                GCEM: Ok. I will execute 'y' as undefined
                GCEM: Asks GMM Do you know 'y' in 7th line?
                GMM: Yes, I know 'y'with var keyword.
                GCEM: Ok then I will check at Right Hand Side for value & execute 'y' as Sagar.
                GCEM handover to function managers as function called at last line 
            
            Conversation between F1MM & F1CEM inside function scope:
                BTS, Func2MM analyzes in left hand side leaves console.log line as there is no keyword & found var keyword and ignores console.log line as there is no keyword.
                Func2CEM: Asks Func2MM Do you know 'y' at line 3?
                Func2MM : No, I don't even know keyword of 'y'. So declared as undefined.
                Func2CEM: Ok. I will execute 'y' as undefined
                Func2CEM: Do you know 'z' at line 5?
                Func2MM : No, I don't even know keyword of 'z'. 
                Func2CEM: Go to it's parent scope & asks Global MM (GodFather) about 'z'
                GMM: Yes, I know 'z'.
                Func2CEM: Checks for Right Hand Side and takes value as Sagar & executes it.
            -> scope: 
        (5) OOPS
Browser
    -> It is single threaded language
    -> It get hangs / lagging while we use more tabs than its compatibility.
    -> Not responding while any for loops runs

Day 34 : 01.07.2023 -----------------------------
Curriculum:
    - Asynchronous
    - 
    - 
    - Keywords (var), datatypes, Strings, Array, etc
    - Functions (Code Execution & scope)
    - 

------------------------------------------------

Day 35 : 02.07.2023 -----------------------------
Curriculum:
    - CallBacks
    - Asynchronous
    - 
    - Keywords (var), datatypes, Strings, Array, etc
    - Functions (Code Execution & scope)
    - 

------------------------------------------------

Callbacks:-
    > Callback is a function called as an argument inside another function like addEventListener.
    > Arguments passes while calling the function. But parameters are passed in callbackfunction introduced.
    > We can call callbackfunction similarly as normal function. We can treat (return) in callbackfunction same as normal function 
    > Syntax: 
        function f1(name, x){

        }
        x(); //fnName
        f1("Monisha", function(greet){

        });
    > Nameless functions are Anonymous functions. Here x() is Anonymous fn.

    Purpose of callbackfunction:-
    -> To do some kind of future tasks
    -> Eg:- school boy's tasks
            - Go to school
            - Take Lunch
            - Return from school
            - Go to tution/Coaching
            - Return to home
    -> Now we need asynchronous to tell await for some time to finish before tasks in synchronous way(orderly manner).
    -> Using Callback function for above eg:
        function gotoSchool(callback){
            console.log("Going to school");

            setTimeout(() => {
                console.log("Reached the school");
                callback();
            }, 10000); // 10,000 milliseconds means 10s
        }
        function takeLunch(callback){
            console.log("Studying in school");

            setTimeout(() => {
                console.log("Taking my lunch");
                console.log("Lunch completed");
                callback();
            }, 2000);
        }
        function returnFromSchool(callback){
            console.log("Returning from school");

            setTimeout(() => {
                console.log("Reached at home");
                callback();
            }, 3000);
        }
        function goingtoCoaching(callback){
                console.log("Going to Coaching");

            setTimeout(() => {
                console.log("Reached to Coaching");
                callback();
            }, 2000);
        }
        function comeToHome(){
            console.log("Returning to Home from coaching");

            setTimeout(() => {
                console.log("Reached to HOME And Now Sleeping");
            }, 2000);
        }

        gotoSchool(); // this works fine till "Reached the school" line
        takeLunch(); // Messed up the flow of tasks so I pass it as callback

        // Defining future tasks in order using callback
        gotoschool(function(){
            takeLunch(function(){
                returnFromSchool(function(){
                    goingtoCoaching(function(){
                        comeToHome()
                    });
                });
             })
        })
        // Accept a variable as callback in gotoschool as parameter

Promises:-       
        // U can solve problem of Callback Hell using Promise
        //? What is promise?
            Javascript Object is very special object not a normal obj
            1st property - Status & 2nd property - Value
            IOC (In Version of control) -> ??? leads to drawback of CallBack Hell
            But Promise gives us 100% guarantee atleast returns error msg if something goes wrong
            But in case of callback if something goes wrong by mistake forgot to callback() this won't return anything as error
        // 3 Conditions in Status (Glimpse) of Promise:
            - Pending state (on hold not executed)
            - Resolved state (successfully finished executed) -> returns Resolved Value
            - Rejected state -> returns Error Msg
        //? How to create promise? (Syntax)
            > Using promise for below eg:-
                Eg 2:-
                Promise creation:>
                    function f1(){
                    let x = new Promise(function(resolve, reject) {
                        resolve("Monisha");
                    });

                    return x; // Promise Object
                    }

                    let p1 = f1();
                    console.log(p1); // Promise {'Monisha'}

             //! Reject
                function f1(){
                    let x = new Promise(function(resolve, reject) {
                        reject("Returns any Error Msg");
                    });

                    return x; // Promise Object
                }

                let p1 = f1();
                console.log(p1); // Promise {'Monisha'}

            Eg 3:-
            Promise after 2s:>
                function f1(){
                    let x = new Promise(function(resolve, reject) {
                        setTimeOut(function() {
                            resolve("Monisha"); // Resolving Promise after 2 seconds
                    }, 2000);
                    });

                    return x; // Promise Object
                }

                let p1 = f1();
                console.log(p1); // Promise {<pending>} --> Bcuz this is in pending state.
        
        //? How to consume promise
        In above eg3 Promise after 2s:>
        .then -> using .then method we can get the value of resolve
            Eg 4:-
            function f1(){
                let x = new Promise(function(resolve, reject) {
                    resolve("Monisha"); // Resolve value: "Moni"
                });

                return x; // Promise Object
                }

                let p1 = f1();

                // I only need my resolve value to return at console not Promise{'Moni'}
                //? To get resolve value from Promise Object, we will be using .them()
                // So I need to pass callback function inside .then() method as parameter (value)


                p1.then(function(){
                    console.log(value); // Moni
                });

                Eg 5:-
                 function f1(){
                let x = new Promise(function(resolve, reject) {
                    setTimeOut(function() {
                            resolve("Moni"); Resolved Value --> "Moni"
                    }, 2000);
                    // Resolving Promise after 2 seconds
                });
                return x; // Promise Object
                }
                let p1 = f1();

                //TODO: If your promise is in Pending state, we can use .then() method to get Resolve Value
                //! In case of setTimeOut() --> then method waits until Promise is resolved
                //! Once it resolved afterwards callback inside the method was executed.

                p1.then(function(value){
                    console.log(value); // Waits for 2s and then prints "Moni"
                })
                
                let x = p1.then(function(value){
                    console.log(value); // Waits for 2s and then prints "Moni"
                })
                console.log(x); // Promise { <pending> }

                x.then(function(value){
                    console.log(value); // undefined
                    // In case you don't return resolved value will be undefined.
                });

                // Prints return value
                let x = p1.then(function(value){
                    console.log(value); // Waits for 2s and then prints "Moni"
                    return "Abhi";
                })
                console.log(x); // Promise { <pending> }

                x.then(function(value){
                    console.log(value); // ABHI
                    // In case you don't return resolved value will be undefined.
                });
//* Only 1st half promise completed

Day 36 : 03.07.2023 -----------------------------
Curriculum:
    - Completing 2nd half promises & Async and await discussion
    - Let's Talk about OOPS (Object and Class)
    - Abstraction
    - Encapsulation
    - Inheritance is nothing but just Prototype
    - Prototype Part-1
For own websites deploy:- render.com (famous for public usage)
------------------------------------------------

2nd half promises & Async and await discussion:-
    Callback Problems:- (Trust Issue)
          1. Callback Hell
        üö®2. IOC (In Version of Control)
    Promise has 2 parameters:
        1. Status -> Pending status, Resolved status & Rejected status
        2. Value -> Resolved value/Rejected Value(Error Message)
        -> Placeholder (Eg:-)
           > Booked Burger, got recipt of token/counter no/order no  
           > Proof of payment so customer can wait n relax
           > Pending State: Waiting for preparation
           > Resolved State: Delivery
           > Rejected State: Sorry for ur inconvenience we're shortage of burgers (Error Message)
        -> How to create Promise?
        -> How to consume promise value when callback functions throws using .then() method
        -> Syntax: new keyword with Promise function with resolve & reject parameters
            function f1(){
            let p = new Promise(function(resolve, reject){
                resolve("Monisha");
                setTimeOut(function(){
                    resolve("Harshit");
                }, 2000);
            });
            return p;
            }
            let q = f1();
            let z = q.then(function(value){
                console.log(value);
            })
            console.log(q); -> Returns Promise Object

            z.then(function(value){
                console.log(value);
            })

            // This is shortcut chaining method used now-a-days in companies
            //! .then() method is used for getting Resolved value........
            //! .catch() method is used for getting or handling Rejected value.........
            f1().then(function(value){
                console.log(value);
                // If no return value, it prints undefined.
                return "Mythili";
            }).then(function(value){
                console.log("Resolved value", value);
            }).catch(function(value){
                console.log("Catch Error Msg",value);
            })
    Create a Promise:-
        let variable = new Promise(function(resolve, reject){
            // More n more lines of code
        })
    Consume a Promise:-
       - Using .then() -> To get resolved value & .catch()-> To get rejected value methods
       - Promise acts as future Placeholder value
       - Promise is confusing syntatically
       - So in ECMAScript 8 2017 many faced problem with consuming part (.then()/.catch()). 
       - So new feature introduced Async & await concept
       - This helps to simplifying Promise Consuming part 
    Async & Await
       - Place async keyword before function keyword Eg:- let a = async () => {};
       - Place await keyword only within async function only (within scope of async function)
       - We are using await keyword to pause only our function execution until it get resolved
       - await keyword won't pause global executions after async function only blocks it's async function lines
       - Only function scope paused not global scope
       - f1() function will return you Promise object
       - If u not return anything from async function, it will return Promise { <pending> }. Promise Object with pending State
    Fetch API
        Eg:-
        async function f1(){
            let response = await fetch("url");
            let data = await response.json();
            console.log(data);
            return data;
        }
        - fetch await and response await returns promise value from promise object 
        - So first catch it/consume it using .then() & .catch() methods
        - And use for in loop for json


JS OOPS:
    > A fundamental feature of OOPS in javascript is its capability to model a problem using real-life objects. To achieve that, we should be able to define real objects and define relationships among them using three principles:
        1. Association
            -> It means when 2 objects are unrelated and independent of each othr, then define that relationship as independent of any hierarchy.
            -> This means none of the objects is sibiling, child or parent of other objects.
            -> Eg:- In scenario like patient visits a doc, this relationship built through Association.
        2. Aggregation
            -> There is ownership in this relationship.
            -> It holds a parent/child relation.
            -> Essential property is parent can live without child object & vice versa. (parent/child can exist independently)
            -> Eg:- An employee (child) works for > 1 depts (parent) in a company. If anyone dept gets removed, the employee still has job n exist in that company.
        3. Composition
            -> Special type of Aggregation
            -> If parent object dies, child object also ceases to exist.
            -> Precisely, only parent can live without child object but vice versa not true.
            -> This child can't live without parent object.
    Class:-
        -> Blueprint of Object/real entity
        -> Class is virtual entity
        -> Description of object
        -> Kind of person/human
        -> Template
        -> Every properties methods of object a class have
    Object:-
        -> Instance of class (real Person)
        -> Object represents Real Entity
        -> Note: Always use small first letter for object name as it is not mandatory but standard pattern
    Eg:- car is class, Branded cars are object

    Syntax for class:-
    Note:- Always use capital letter in className not mandatory but naming conventions in public
    class Car{
        // Constructor(){
            console.log("Called Constructor");
        }
        //Define Properties - variables
        //Define Methods - function
    }

    Creation of object:-
    let alto = new Car(){

    }
       -> Whenever we create an object with or without assigning it to any variable (everytime of object creation), constructor called everytime.
       -> Purpose of Constructor:- To initialize an object
    Eg:-
    class Car(){
        // Properties
        constructor(color, maxSpeed, price){
            console.log();
            // Getting is not important
            this.color = c; // 'this' keyword is every objects we creates. Here alto, i10 etc.
            this.maxSpeed = mS;
            this.price = p;
        -> No need to write function keyword. This method (action) provided to every objects (cars).
        -> This method can call by anyone cars (objects)
        // Methods
        printCarInfo(){
            console.log("Print Info called -->", this); 
            consoel.log(this.color);
            consoel.log(this.maxSpeed);
            consoel.log(this.price);
        }
        }
    }
    let alto = new Car("Red", "100km", "Rs400000"); // These cars are real entities(objects).
    let i10 = new Car("White", "100", "500000");

    console.log(alto);
    console.log("============="); // Divider
    console.log(i10);
    console.log("=============");

    alt0.printCarInfo();

-> Function have properties of Protoype
-> How can we loop through JSON (Array of Objects) using a for loop?
   1.
    for (var i = 0; i < productList.length; i++) {
        for (var j in productList[i]){
        console.log(productList[i][j]);
        }
    }

Eg from Abhishek batchmate:
    class Employee {
        constructor(name, address, salary) //properties
        {
            this.name = name;
            this.address = address;
            this.salary = salary;
        }

        EmployeeInfo() //method
        {
            console.log(this.name);
            console.log(this.address);
            console.log(this.salary);
        }
    }

    let en1 = new Employee(‚ÄúAbhi‚Äù, ‚ÄúBanglore‚Äù, ‚Äú50000‚Äù)
    let en2 = new Employee(‚ÄúAmit‚Äù, ‚Äúvaranasi‚Äù, ‚Äú60000‚Äù)
    let en3 = new Employee(‚ÄúAkash‚Äù, ‚Äúdelhi‚Äù, ‚Äú70000‚Äù)
    let en4 = new Employee(‚ÄúSunil‚Äù, ‚Äúchennai‚Äù, ‚Äú80000‚Äù)

    en1.EmployeeInfo()
    console.log("..........‚Äù)
    en2.Employeenfo()
    console.log(‚Äú..........‚Äù)
    en3.EmployeeInfo()
    console.log(‚Äú..........‚Äù)
    en4.EmployeeInfo()


   2. Use for...of Loop
   3. Don't use forEach while fetching using Async & Await as it returns key-value pairs in unorderly manner.

Day 37 : 04.07.2023 -----------------------------
Curriculum: [Refer Pg 206 in PPT]
    - OOPS
    - Encapsulation
    - Abstraction
    - Inheritance is nothing but just Prototype
    - Polymorphism with Overiding
    - Prototype Part-1 & __proto__

------------------------------------------------
OOPS:
    > OOPS is a principle. This principles is for every programming languages.
    > 4 pillars of this principle.
        1. Encapsulation
            > We cannot achieve 100% of encapsulation always. But we try put max effort to achieve by gather maximum.
            > Bundle (collection) of data(properties inside constructor) & related behavior (methods) into single unit called an Object.
            > Eg:- Autobiography of Sachin Tendulakar not fully captured some things might be left out.
            > To achieve 3 things:
                -> data Privacy (Hiding for security purpose)
                -> code Organization
                -> code Reuse
        2. Abstraction
            > Process of hiding Unneccessary details and Complexity (tough codes).
            > Hiding implementations part & exposes functionalities at end-User side.
            > While exposing only the essential information & functionality
            > It allows you to work with high-level concepts and simplify the code by encapsulating implementation details.
            > Eg:- gPay App at user-end just need to install & start use that application.
            > User will not care about Backend of that app 
            > Backend details are hidden by developer
            > This provides only for end-user or other users.
            > Eg:- API -> Developers just call that data using predefined functions. They no need to know about how thodse predefined functions coded n built.
          //? How can we get Abstraction?
                1. Function üö®üì¢
                2. Class and Objects
                3. Inheritance
                4. Polymorphism with Overiding   

        3. Inheritance:
            > Inheritance is nothing but Prototype.
            > Inheritance means childClass inherits some property from parentClass.
            > It tells if childClass(derivedClass) has similar properties we can use inheritance by using 'extends' keyword from parentClass(baseClass).
            > //! super class is used inside child class to call parent constructor. 
            > Instaed of repeating same properties again n again super class is introduced in childClasses to inherit them from parentClass.
            > In programming field, ther shld be no repitition of codes as a developer we need to reduce no.of lines of codes. To make it works more efficient.
            > When we create an object 'doggy', it creates a constructor automatically.
            > When we use extends, we need to call parent constructor by using super(parentClass PropertNames passed here as aruguments) as we need to exceute those properties inside childClass.
            > Without super constructor which calls parent construcor & should be at 1st line inside child's constructor, it shows Reference Error: Must call super constructor in derived class before accessing 'this' or returning from derived constructor.
            > Without passing parent constructor's propertyName inside super() parameters, it shows undefined even u give value for it at object. But we need to atleast call super() otherwise it throws error.
            > Only childClass can access parentClass's properties but parentClass can't access childClass's properties.
            > When an object trying to access variables and properties of another object.
            > Note: Strings & Arrays all get coerced‚Äã into its object equivalent called as wrapper object when we try to access it's built in properties. This is the reason why we use the dot(.) Operator to access them.

        üö®Before learning about Polymorphism, we need to understand Overiding:
            > U can overide Parent method inside ur Child class 
            > Eg:- chilClass first checks for f1() in its own class if can't find then only it will check/search in its parent class.
            > Similar to lexical scope (1st it will check in local scope then in parent scope & then only in global scope). This concept is called Overiding.
            > Definition: Overiding is a process or mechanism in which we overides with same function name inside the both parentClass & childClass with some different definition.
        
        4. Polymorphism:(Many/multiple/different Forms)
            [Refer 4-poly-overiding.js file]
            > Poly means "many" & morphism means "form". Polymorphism defined as one name but many form.
            > polymorphism also called as overriding.
            > override is the process in which child class also with some definitions
            > you can override parent method inside your child class.
            > No one will ask on Polymorphism, they will ask about overiding in interviews.
            > If we overiding, then we need to change atleast definition part. Otherwise it will be meaningless.

    // Eg 1:-
    let‚Äôs understand with Example of Overiding:-
    class ParentClass {
        constructor() {}

        f1() {
            console.log("Parent f1 is Invoked");
        }
    }

    //? You can overide Parent method inside your Child Class ‚Üí Overide

    class ChildClass extends ParentClass {
        constructor() {
            super(); // call your parent constructor
        };
        f1() {
            console.log("Child f1 is Invoked ");
        }
    }

    // ChildClass's Object creation
    let childObject = new ChildClass();

    childObject.f1();
    // OUTPUT:- Child f1 is Invoked

Till now 50% of Javascript is over. Now we enter into Prototype which is another 50% of Javascript.

Protoype & __proto__: _proto_ is on the object instance, prototype is on the constructor function.

YouTube Link: https://www.youtube.com/watch?v=wstwjQ1yqWQ

(a) Prototype:
    > Javascript is not truly oops language, JS is protoypical language. JS supports OOPS.
    > In 2016, ES6 introduced class in JS which are syntactic sugar.
    > Technically, there is no class in JS, they are both just functions.
    > Any function can be invoked as a constructor with keyword 'new'.
    > The prototype property of that function is used for the object to inherit methods from.
    > Whenever we create/define a [Eg:- 'car'] function, there unnamed object created along with it.
    > We can access/reference unnamed objects by using prototype. [Eg:- Car.prototype]
    > Function Car has Prototype & Unnamed Object has constructor
    > Car -> Prototype -> Unnamed Object [Eg:- Car.prototype represents towards Unnamed object]
    > Car <- Constructor <- Unnamed Object [Eg:- Car.prototype.constructor represents towards Car function]
    > We create objects like alto to refer unnamed object by [Eg:- alto.__proto__]
    > Dot underscore underscore proto underscore underscore can be also called as 'dunder proto'.
    > When function created, we get prototype as property.
    > When object created, we get .__proto__ as property.
    > [Eg:- alto.__proto__.constructor --> class 'Car']
    > prototype is an Object that get attach to function/method/object and this object has some hidden properties.
    >

(b) Protype Chaining:
    let arr = ["Akshay","Aditya"];
    arr.__proto__ ==> Array.prototype
    arr.__proto__.__proto__ ==> Array.prototype.__proto__ ==> Object.prototype => object
    arr.__proto__.__proto__._proto__ => object.__proto__ = null;


(c) __proto__:

Day 38 : 05.07.2023 -----------------------------
Curriculum: 
    - Prototype Part-3 & __proto__
    - github
    - VCS
    - git Installation & Configuration
    - node.js & npm Installation & link in VS Code:

------------------------------------------------
Protoype:
    > Classes are Syntactical sugar in Javascript and it was intriducesin ECMAScript 2015/2016
    > But this classes also have prototype but this is very tricky to understand 
    > But in Interviews, they will ask about this prototype only as this is ur core JS concept.
    > When u create any function Car, we also get a property called Protoype & creates unnamed object.
    > Using Car.Prototype property, we can refer and access unnamed object & we can create a new function of class Car.
    > When we create any object like alto & bMW, we get __proto__ property.
    > Now we use alto.__proto__ to access unnamed object
    > When we can create a new function printInfo() of class Car using Class.prototype & obj1.__proto__ properties. 
    > This function will reside inside unnamed object. So we can call it like alto.printInfo() or Car.protoype also.

    Eg:- function Car(name, price){ // [Refer 6-prototype-function.js file]
            this.name = name;
            this.price = price;
         }
         let alto = new Car("Alto", 400000);
         let bmw5 = new Car("BMW X1", 5000000);
         Car.prototype.printInfo = function () {
            console.log("Name == ", this.name);
            console.log("Price == ", this.price);
         }

         Car.prototype.greetInfo = function () {
            console.log("Happy");
            console.log("Sad");
         }
         alto.__proto__.f1 = function () {
            console.log("Inside f1 function");
         }
         bmw5.__proto__.f1 = function () {
            console.log("Inside f1 function");
         }

        alto.printInfo();
        bmw5.printInfo();

        alto.greetInfo();
        bmw5.greetInfo(); // Possible

        alto.f1();
        bmw5.f1();

        if(Car.prototype == alto.__proto__){
            console.log("Yes, they are same --> Unnamed object");
        } // This condition is true so this line gets printed.

        if(Car.prototype == bmw5.__proto__){
            console.log("Yes, they are same --> Unnamed object");
        } 

    > So finally while we creating a function, get prototype & using this prototype can access unnamed object.
    > How u access unnamed object?
        - Function.prototype: functionName like Car.prototype 
        - Object.prototype: objectName like alto.__proto__
    > Using both we can create function inside unnamed object too. And we access them normally.
    > Why this unnamed object & its purpose?
        - To store something like functions inside unnamed object.
    > Which way is better way to access unnamed object?
        - As per industry standard, we always use prototype way/method only. 
        - We never use __proto__ way/method which actually confuses us.

üö®  > Interview Question from Prototype:
        -> Under Browser's console, let's create an object.
        -> let s = {name: "Monisha"}; and press Enter. We get undefined.
        -> s // type s to print on console
        -> We get our key-value pair along with [[Prototype]]: Object
        -> [[Prototype]]: Object consists of all functions of prototype like hasOwnProperty, toString, valueOf() etc.
        -> Let's expand one of them like toString(). Again we have prototype inside it with methods like apply, call, bind etc. 
        -> And then expand again we get same functions/methods/properties.
        -> Along with it we got get __proto__: f __proto__(). Let's expand it.
        -> Everything is linked with everyotherthing in Javascript.
        -> This is called as Prototype Chaining
        -> If we again start this expanding process from 1st [[Prototype]]: Object expanded.
        -> Then let's expand __proto__: (...) click on spread operator (...), we will get 'Object'.
        -> Then again expand __proto__: Object, we get another __proto__:(...)
        -> Let's click on spread operator (...), now we will get 'null'.
        -> So finally s if we expand __proto__, which refers to Object and then null prototype chain ends. 
        -> There is something called as capital 'O' Objects

    // On browser console, if we type String.
    // It gives f String() { [native code] }
        -> There is nothing called as class in JS. So everyting is internally, they are functions.
        -> How we register / assign / store our functions inside unnamed object of function Car.
        -> Similarly developers registered / assign / store predefined functions inside unnamed object of function String, Array etc.
        -> To check we console.log(String.prototype) and see if toString(), toLowerCase() etc. r thr.
        -> We can see what is inside String's unnamed object by String.prototype
    // Now we register our own function inside String.prototype
        let n = "Monisha";
        String.prototype.isMythili = function () {
            console.log("Yes, Mythili is Monisha");
        }
        n.toUpperCase(); // Only Returns your string's upper case
        console.log(n.toUpperCase()); // To print your string's upper case
        n.toLowerCase(); // Only Returns your string's lower case
        console.log(n.toLowerCase()); // To print your string's upper case
        n.isMythili(); // This prints by logging string inside this function at console

        console.log(String.prototype); 
    // In your node environment, it will not show up in the console.
    // But in your browser, it will show up in the console. If we type String.prototype

üö®üì¢üö© Interviewer asks you to build your own function in string/Array?
    Answers:
    Eg1:-    
        let m = "KEERTHI";

        String.prototype.isKeerthi = function () {
            console.log(this.valueOf());
        }

        m.isKeerthi(); //KEERTHI

    Eg2:- To register your own function in String use String.prototype
        let u = "Raji";

        String.prototype.isRaji = function () {
            if(this.valueOf() == "Raji"){
                return true;
            } else {
                return false;
            }
        };

        console.log(u.isRaji()); //true
> Capital 'S' is your function name

üö®Two questions under topic Protoype:-`
`1) What happens when function created?
Ans:-  When you create a function, unnamed object & property name called "Prototype" are also created. And we can access that unnamed object using functionName.prototype & we can access unnamed object using objectName if we have created objects for that function.
From Below Example :- Car.prototype or Alto.__proto__ both refers to unnamed object of Car function

2) What happens when object created from that function?
Ans:- When we create object from that function, we also get property called as __proto__. And we can access that functions unnamed object using objName.__proto__`
    
Git:
    > git & github are totally different terms.
    > When u work on a project, only u will not develop entire thing.
    > U will work alongwith 10/100/1000's developers work on same project.
    > Among them u will only develop few features of that project.
    > U need something that can track whatever changes made by any of teammate of that project
    > What newly added/changes/updations/removing all those things tracked by VCS.
    > Git is a version control tool.
    > First, we need to Install & configuration in our (local system) desktop.

VCS:
    > Version Control System
    > Maintain a version for every changes by taking/create snapshots & tracking them(What/Who/When/How) even for every small changes made by each (1000's) developers working in same project in production uses this feature.
    > Let's say we made a feature in 2023 & we rolled out that feature to production. Now everyone using this feature. 
    > After sept month, we feel this feature is not good so we bag / delete this feature. Again we need that feature in December month
    > Now we need same feature in the production lane. So we will not copy & paste / code again & again from scratch.
    > Now VCS comes into picture, if we use VCS this saved deleted feature somewhere. We can grab same feature again from VCS.
    > And launch in our current project by merging into production lane.
    > Conclusion: VCS helpful to track whatever cahnges made & we can again retrieve it.

Github:
    > Hosting platform to just store ur built code in which we have repositories to showcase it to ur recruitor.
    > Github to store our code (personal). It is product of Microsoft's which owns this application
    > For company projects, we use gitlab.
    > Similar to Google Drive etc. --> are gitlab, bigbucket in companies etc.
    > So gitHub, gitLab or BigBucket etc. which we use depends on usage but under long technology VCS --> Git only never changes
    > We use Git in our local system but to push our code, save our code somewhere, we need to use either GitLab/GitHub etc.
  
  //? How to use this github?
    > Free using ur email id for GITHUB account creation.
  
  //? How to connect git & github?
    > We created a repository(kind of Folder) in Github.
    > Now we want this repository in our local system.
    > For that we have to go to gitbash.
    > If we truly want to understand how to use git to run command, we also need to learn some linux commands.
    > To use in command prompt 

Git Installation & Configuration:
  1.Installation:-
    > Go to Git Download (website: git-scm.com/downloads)
    > For Windows Setup, 64-bit (Standalone Installer)
  2.Configuration:-
    > Using git commands
    > Ctrl ++ -> To increase fontSize in git bash
    > Linux Commands:
        1. To check where u r: pwd and enter
        2. To check (what r the files inside ur folders Eg:- Desktop): type 'ls' means list
        3. To change directory: Go to any folder in any drive like Desktop & right click then select 'Git Bash Here'
        4. To clear git bash command: clear
        5. To create a folder: mkdir New-folder (make directory)
        6. Space between folder name makes a folder into 2 folders
        7. To get into New-folder: cd New-folder [cd means Change Directory]
        8. git init -> Initialized empty git repository in C:/Users/naman/DESKTOP/New-folder/.git/
        9. ls
        10. ls -la -> To view hidden files uses dot things ./ ../ .git
‚ùå'git add README.md' -> When we tried to add README.md file into git, it says fatal: pathspec 'README.md' did not match any files.
        11. Cloning:- So we need to Create a file and push that file into github from desktop via git bash.
        12. ls -> We can view git.txt inside New-folder from GitBash Command Prompt.
To Create a file, we use touch command.
        13. 'touch test_git.txt' & then 'ls' -> We can view our created file in New-folder -> git.txt test_git.txt (2)files.
To Add a file, we use 'add' command.
To check content inside a text file, we use 'cat' command.
        14. To check content inside this file -> cat test_git.txt (this file is created using touch)
        15. Shortcut for 14th point: 'cat te' & then press ur Tab key
        16. To Push 2 files to github account -> 'git status' -> On branch master -> No commits yet
            16.1 Untracked files: (use "git add <file>..." to include in what will be committed)
                    git.txt
                    test_git.txt
                nothing added to commit but untracked files present (use "git add" to track)
            (a) First we need to add this 2 files into staging area
        17. git add git.txt test_git.txt 
        18. Shortcut for 17th line:- 'git add .' in order to add more no.of files at same time.
        19. git status -> Added both files
        19.1 On branch master -> No commits yet -> Changes to be committed: (use "git rm --cached <file>..." to unstage)
             new file: git.txt
             new file: test_git.txt
             [From red to green] --> Red means not added/deleted, green means added/updated
        20. Create another file & type something & then git status
        21. New 'naman.txt' file is untracked file
        22. To move files from untracked to tracked file -> git add naman.txt
        23. To view status is it added -> git status (All are getting tracked)
'git add .' --> Just putting ur files from your local space to the staging space
Staging space means we are placing our local files which are inside from untracked area to tracked area.
üö©Now we create a snapshot which means commit. 
Unless until we do not commit, these changes will not be saved in order to track. But it is getting tracked currently.
        24. 'git commit -m "My 1st commit"' -> Message to commit
[master (root commit) c5c9c2f] My 1st commit
3 files changed, 3 insertions(+)
crate mode 100644 git.txt
crate mode 100644 naman.txt
crate mode 100644 test_git.txt
        25. 'git branch -M main' -> Changes branch from master to main
We cannot push just somewhere, we need to push inside correct repo for that we need to give Correct URL.
        26. (main) git remote add origin https://github.com/LovelyNMTech/text_.git/git
        27. Push ur code from local system to github but it asks for github authorization signup: 'git push -u origin main'
        27.1 info: please complete authorization in your browser...
             Enumerating objects: 5, done.
             Counting objects: 100% (5/5), done.
             Delta compression using up to 4 threads
             Compressing objects: 100% (2/2), done.
             Writing objects: 100% (5/5), 395 bytes | 28.00 KiB/s, done.
             Total 5 (delta 0), reused 0 (delta 0), pack reused 0
             To https://github.com/Moni97sha-S/test_git.git
              * [new branch]   main -> main
             branch 'main' set up to track 'origin/main'.
For 1st time, we need to tell Github userName and password for it to identify which user pushing their code into their account using GitBash. So we need to Sign In with Browser and give ur authorization details like password after it automatically finds ur userName.
At 01:48:19 --> Time Stamp
Now go to GitHub account on web browser and click at top-left corner 'text_git' beside ur profile name.
Now we able to see all 3 files pushed into GitHub from local system with who has committed, commit message and commit time.

    Delete a file from GitBash Command Prompt:-
        1. ls -> To check what files r there inside ur directory folder. Here all 3 files showed up.
        2. git status
        3. To check what is deleted & modified in one of file -> git diff
        4. changes not staged for commit -> To push commit into stage area -> git add .
        5. git status
        5.1 On branch main
            Your branch is up to date with 'origin/main'.
            nothing to commit, working tree clean
These branch things we will come to know while building projects.
After deletind a file from explorer and change content of another file. Type 'git status'
        On branch main
            Your branch is up to date with 'origin/main'.
            Changes not staged for commit:
                (use "git add/rm <file>..." to update what will be committed)
                (use "git restore <file>..." to discard changes in working directory)
                    modified: Monisha.txt
                    deleted: git.txt
                no changes added to commit (use "git add" and/or "git commit -a")
        6. 'git diff' --> This command tells us what content is modified within our modified file.
        6.1 diff --git a/git.txt b/git.txt
            deleted file mode 100644
            index c1ccf82..0000000
            --- a/git.txt
            +++ /dev/null
            @@ -1 +0,0 @@
            -we are learning git from this. (Removed content by Deleted that file )
            \No newline at end of file
            diff --git a/naman.txt b/naman.txt
            index 47132af..5115f36 100644
            --- a/naman.txt
            +++ b/naman.txt
            @@ -1 +1,0 @@
            -my name is Naman. --> Red Color (Removed name)
            \No newline at end of file
            +my name is Harshit. --> Green Color (Changed name)
            \No newline at end of file
        7. 'git status'
        7.1 On branch main
            Your branch is up to date with 'origin/main'.
            Changes not staged for commit:
                (use "git add/rm <file>..." to update what will be committed)
                (use "git restore <file>..." to discard changes in working directory)
                    modified: Monisha.txt (Red Color)
                    deleted: git.txt (Red Color)
                no changes added to commit (use "git add" and/or "git commit -a")
To push the changes from local to stage area, we need to use 'git add .' command
        7.1 On branch main
            Your branch is up to date with 'origin/main'.
            Changes to be committed:
                (use "git restore --staged <file>..." to unstage)
                    modified: Monisha.txt (Green Color)
                    deleted: git.txt (Green Color)
                no changes added to commit (use "git add" and/or "git commit -a")
Now we can commit this one.
        8. git commit -m "deleted git.txt & changed name in naman.txt"
        8.1 [main ccbe51b] deleted git.txt & changed name in naman.txt
            2 files changed, 1 insertion(+), 2 deletions(-)
            delete mode 100644 git.txt
        Note: Green things are added & red things are removed/modified.
Now we don't need to remote add (Only at initial stage we need to code it).
Now we are ready to push the code into github.
        9. 'git push -u origin main' command to push into github.
        9.1 Enumerating objects: 5, done.
             Counting objects: 100% (5/5), done.
             Delta compression using up to 4 threads
             Compressing objects: 100% (2/2), done.
             Writing objects: 100% (5/5), 341 bytes | 42.00 KiB/s, done.
             Total 3 (delta 0), reused 0 (delta 0), pack-reused 0
             To https://github.com/Moni97sha-S/test_git.git
              c5c9c2f..ccbe51b   main -> main
             branch 'main' set up to track 'origin/main'.
Finally it didn't ask us to authorize to give password.
Now if we see 2 commits in the Github account file page, click on it.
We can see list of changes and removed files here. (When we click on each file name we see things in red & green)

Node.js & npm Installation & link in VS Code:
    > In browser, type "node download" of 18 version for LTS(Long Term Support) for Windows Setup .msi file.
    > Now in command prompt (cmd black screen), check if node installed or not.
    > node --version ---> v18.16.1
    > To check npm installed along with node, type npm --version --> v9.5.1
    > Open ur VS Code & install extension 'Code runner'
    > To run ur JS code in OUTPUT tab instead of Terminal tab, go to Manage at left panel in VS code and then inside settings search bar type "runinterminal" and then uncheck. And then close & open VS code app to restart it. Now it will run in output tab neatly.
    > We should not try to run DOM code in this output tab as they are browser things.
    > üìåüì¢Remember runTime discussion of Harshit sir's:
        - Node.js runtime do not have this document.
        - This document object present only in browser runtime.
        - Should not try to access this document object in node environment
        - Document is part of javascript, it is part of web APIs.

Day 39 : 06.07.2023 -----------------------------
Curriculum: 
    - Intro to Project
    - Feature walkthrough
    - Building UI for app
    - Writing Javascript for Record Live Stream and download
    - Writing Animations and Build Live Timer


------------------------------------------------
Introduction to Project:
    - We can split this proj into 2 to 3 projects (Resume & Advantage)
    - We already have a black screen with video record button in red and photo capture button in white.
    - We will use web browser's powerful functions
    - Firstly, we need access of both camera and microphone.

Feature Walkthrough:
    On 06.07.2023 
    1. Video Play
    2. Record Audio & Video & download
    3. StopWatch & Animation
    On 07.07.2023 
    1. Capture our own photo & Apply Filter (light Yellow color)
    On 08.07.2023 
    1. Save this photo in database (Indexed DB)
    2. Display on screen & all the recorded videos displays on screen
    3. When we hover on youTube video, it runs. 

Explanation: 
    -> Navigator.object (Read Navigator MDN)
    -> Navigator.mediaDevices:- MediaDevices are camera, microphone etc.
    -> 1st line gives promise so use .then()
    -> We will pass stream object to backend and then do something.
    -> When we initially click recording shld start & again we click stops.
    -> When recording starts, put your data in chunks. As recording is very large collection of data.
    -> So we saved data in chunks & there can be stored in chunks somewhere n we start ur recording.
    -> finally we stops ur recording, these chunks colected and stops.
    -> When we record.start(), it throws event called start.
    -> When we record.stop(), it throws event called stop.
    -> But we get third event too. Whenever one chunk is prepared n available it throws event called dataavailable(chunk). Just push each chunk in array.
    -> When video stops, Gather all chunks & Merge all video chunks n say this is ur video
    -> Blob MDN: Binary Large Objects
    -> Convert this chunk into Blob
    -> chunk.data is object typeof
    -> Whenever we start our recording clear old recording and then u will get only current recording in downloaded video.

Building UI for Application:

Writing JS for Record Live Stream and download:

Writing Animations and Build Live Timer:
    StopWatch:-
        > Build a timer
        > 3875 seconds -> H = 3875 / 3600 = 1hr -> 3875 % 3600 = 275secs -> 275 / 60 = 4 mins -> 275 % 60 = 35 secs

Day 40 : 07.07.2023 -----------------------------
Curriculum: 
    - Feature walkthrough
    - Building UI for app
    - Capture ur photo
    - Adding Filters

------------------------------------------------
Feature walkthrough:
    1. Capture a picture in that fraction of second 
    2. Adding Filters

Capture a picture:
    > Canvas API: Focuses on 2D Graphics
    > Drawing Graphics via Javascript using Canvas
    > Use this feature to capture ur photo.
    > Refer (developer.mozilla.org/canvasAPI) Documentation
    > From DOM, we used getComputedStyle method to set the style

Every feature should develop in different branch. 

Day 41 : 08.07.2023 -----------------------------
Curriculum: 
    - Feature Walkthrough/Agenda
    - Storing our Recorded Stream Video in Database IndexDB
        -> Exploring Databases - IndexDB
        -> Recording a Video & Save into Database
        -> Get videos from Database
------------------------------------------------

 Storing our Recorded Stream Video in Database IndexDB:
    > Using Canvas, we can build MS paint in Windows/Excalidraw/whiteNotebook in Mac feature also someday we will build.
    1. What is database?
        - Helps with storing data in the database
        - As backend engineer, we work with the databases like MongoDB, postgres, AWS s3, MySQL.
    * IndexDB
        - Object to store complex things
        - Really powerful than LocalStorage (10 Mb) & SessionStorage(5 Mb).
        - More capacity than 5 & 10 Mb
        - Locaal & SessionStorage are kind of databases.
        - This database is frontEnd database. Rarely we use to store photos & videos as Backend engineer.
    //! Important Concept
        - This is for all fully fledged of databases.
        - Transaction   
            -> Eg:- Person A & person B 
            -> A want to share Rs200 to B
            -> It was about to reach due to internet disconnection, it breaks.
            -> Sometimes we sent money in gPay but not received by receiver.
            -> Where that money gone?
            -> Principle: Either completes fully ur pure transaction or not even started transaction.
            -> From computer science background ACID: Atomicity, Consistency, Isolation & Durability.
        - Refer IndexedDB MDN:
            -> Low-level API
            -> 
            -> Transactional database system like SQL RDBMS system
        - Make use of any Database
            -> Open database
            -> Initialize your database
            -> Create tables in MySql, Documents & Collections in MongoDB like that in IndexedDB we have Object Store
            -> Let's Create seperate file for ur database
            -> When we try to open database only from 1st time, it will automatically upgrades & then opens. Afterwards it will just open.
            -> As it throws DOMException, ObjectCloneError in that case due to hardcoded same id.
            -> To creat unique id, we use uuid cdn links dist from cdnjs

On Day 29 : 26.06.2023 (call & apply taught):
    Bind:-
        > assign it to functionName & then call functionName
        > bind() method:- When we want to create a new function with specific to this context use bind. 
        > And we can call whenever we need it. We can use it later as well.
        > Problem with call & apply, it will return immediately or nothing.
    
    Coersion:-
        > Automatic conversion of values from one data type to another.
        > It can be manual also.
    2 types of coersion:-
        1. Explicit Coersion
            -> Converting type using Built-in functions
            Eg:- let num = "42";
                 console.log(typeof num); // string
                 num = Number(num);
                 console.log(typeof num); // number

        2. Implicit Coersion
            -> Javascript converts automatically.
            Eg 1 :- let num = "42";
                    let s = "this is my name" + num;
                    console.log(s);
                    console.log(typeof s); // string
                    // string - number ----> number (Substracts)

            Eg 2 :- let num = "42";
                    let result = "42" - 34;
            Eg 3 :- let num = "42";
                    let result = "42" + 34;
                    console.log(result); // 4234
                    console.log(typeof result); // string
                    // string + number ----> string 
                    // string tries to concatinate only either operand have string type
            Eg 4 :- let num = "42";
                    let res = "4" * '4';
                    //JS try to convert Number("4") * Number('4')
                    console.log(res); //16
            Eg 5 :- let s1 = "10" + { name: "moni" };
                    // JS try to "10" + toString({ name: "moni" })
                    // => 10[object Object]
                    console.log(s1);
            Eg 6 :- let s2 = "10" - { name: "moni" };
                    // JS try to "10" + toString({ name: "moni" })
                    // JS try to Number("10") + Number([object Object])
                    console.log(s2); // NaN
            Eg 7 :- let arr1 = 10 + [10, 20, 30];
                    // JS tries toString([10, 20, 30]) on array, object etc.
                    // 10 + "10,20,30" ---> 1010,20,30
                    console.log(arr1); // 1010,20,30
            Eg 7 :- let arr1 = 10 - [10, 20, 30];
                    // JS tries toString([10, 20, 30]) on array, object etc.
                    // "10,20,30" ---> Cannot 
                    console.log(arr1); // NaN

Day 41 : 10.07.2023 (DSA Basics) -----------------------------
Curriculum: 
    - Linear DS
    - Arrays
    - Arrays methods: Push, Pop, Shift, Unshift and Splice
------------------------------------------------
Data Science and Algorithms:-
    > In scenario like an aeroplane from Delhi to Mumbai, how much data it produces? 120Tb approx.
    > Manage, Organize & Manipulate data efficiently.
Why DS is important?
    > To store & retrieve ur data efficiently/effectively.
    > When we throw/dump(store) things randomly in a container, they become unorganized data. So it takes more (5 mins) of time for us to retrieve a data from it.
    > If he arranged in an organized/managed manner, it takes very few seconds to retrieve a data from it.
    > Let's say we have 100Tb of data. To retrieve data from DB takes 1 hour/1 month of time, if we stored in unorganized manner.
    > Store: Get, delete & Update.
    > Data Structures divided into 2 parts:-
        1. Linear DS: Arrays, Linked Lists, Stack & Queues
        2. Non-linear DS: Trees & Graphs
    > Non-Sequential Manner:
        - Store data in some hirarchical things
    > Linear (4 types):
        - Organize data in a sequential manner where each element has a direct predecessor & successor.
        - Straight / Linear/Revolving motion (travelling in a direction)
    > Stack
        - Call Stack from JS engine & LIFO rule (Last In First Out)
    > Queues
        - Call Queues from JS runtime & (First In First Out)
    > Linked List
    > Arrays + (Map, Filter, forEach, Reduce, Every & Sum methods of array function):-
        -> 4 ways:
        -> Insert, get, update & delete data.
        -> Whatever we do in Internet, we do above either of 4 things.
    > Arrays:-
        - It is a fundamental ds that stores in a sequence of elements.
        - From left to right (index 0) in array. (1-Dimensional data)
        - Block of memory: When we combine every block of memory, it becomes final memory.
        - Contiguos meaning next of next
        - Indexing based system (0 based index)
        - To get last index:- (arr.length - 1)

Day 42 : 11.07.2023 -----------------------------
JS Final Proj: 
    - https://moni97sha-s.github.io/ecommercejsfinalproject/index.html
    - Doubts:-
        -> Why is local storage returning null?
        -> https://community.edyoda.com/t/regarding-js-final-assignment-clarification-doubts-from-fsr310323/7254
        -> https://www.youtube.com/watch?v=cT_ZYrS3tKc
    - https://www.youtube.com/watch?v=RDLg-p6PdTA (For Order Animation)
    - https://codepen.io/andrewmillen/pen/MoKLob

Curriculum: 
    - Iteration
    - Arrays methods: forEach, for..of, map, reduce, filter, every & some
    - Stack -> LIFO rule
    - Stack with real case examples with clear Structure
    - And their use Cases
    - Decide the operations
    - And their Implementation
------------------------------------------------
Iteration:
    > Loop over the arrays
    > normal for loop
    > forEach loop
        -> It accepts callback as parameter of function
        -> It will just iterate on array.
        -> forEach doesn't returns a new array.
    > for...of loop
        -> for...of doesn't returns a new array.
        -> It will just iterate on array.
    > filter 
        -> It filters to get only like even numbers.
        -> It returns you a new array.
        -> This will not change the original array.
        -> filter condition will create a new array with only elements that passes specific condition
    > map 
        -> map function is used to apply transformation to each element of an array.
        -> It returns you a new array.
        -> This will not change the original array.
        -> It will just iterate on array.
    > reduce
        -> Returns a numerical value.
        -> It has 2 paramenters: Accumulator, element
        -> // Reduce Syntax:
            array.reduce(function (accumulator, element) {}, initialValueOfAccumulator);
        ->  'initialValueOfAccumulator = 0 / 10 / any numeric values' 
                - It will also add if we give any other values at 0's place?
                - 0 means initial value before summing up & then adds to total
    let arr4 = [1000, 400, 200, 100];
    // 1000-400-200-100 = 300
    // üö®üì¢Capture Intern Question
    // With Accumulator - Wrong Answer in -ve
    let value = arr4.reduce(function (accumulator, element) {
        return accumulator - element;
    }, 0);
    console.log(value); // -1700
    /*
    0 - 1000 ==> -1000
    -1000 - 400 ==> -1400
    -1400 - 200 ==> -1600
    -1600 - 100 ==> -1700
    */

    // Without Accumulator - Correct Answer
    let value1 = arr4.reduce(function (accumulator, element) {
        return accumulator - element;
    });
    console.log(value1); // 300
    /*
    1000 - 400 ==> 600
    600 - 200 ==> 400
    400 - 100 ==> 300
    */

    > some()
        -> Reason: Anyone value satisfies condition, it returns true value. If nothing satisfies only returns false.

    > every()
        -> If all elements satisfies this condition, then only it will return True. If anyone not satisfies then False.

Stack:-
    > Last In First Out (LIFO rule)
    > Practical example is balls put inside a glass. We can pull out last ball only.
    
Stack with real case examples with clear Structure:-
    > In Browser History, last & recently viewed web pages are stacked at top.
    > In chat application also recent messages are stacked at last.

Decide it's operations (6 operations):-
    > Push means insert operation
    > Pop means deleting/removing the 'top' element
    > Top is just to check who is on the top position
    > 'sizeof' -> How many elements are in ur stack? Total Elements
    > clear our stack like console.clear()
    > empty to check our stack is empty or not

Stack's use Cases:-
    > Function call stack in JS engine
    > Executes functions one by one and popped out last function element


Day 43 : 12.07.2023 -----------------------------
Curriculum: 
    - Arrays methods: Push, Pop, Top, sizeof and Empty
    - Stack's Implementation
    - Queue Clear Structure
    - Queue's use cases
    - Queue Methods
    - Queue's Implementation
------------------------------------------------
Implementation of Stack using Array, Class in JS:-
    > Build stack using Array
    > Stack class has empty container by empty array.
    > 

Queue:
    > First In First Out (FIFO)/First Come First Serve(FCFS)
    > Inserts items at Rear-end
    > Adding operation in Queue is known as Enqueue
    > Deletes items at Front-end
    > Deleting operation in Queue is known as Dequeue
    > 2 Ends

Use Cases:
    > Single Resource Multiple Consumers
    > Buffer for Devices like Keyboard keyin and show on Monitor
    > Os Scheduling
    > Mail Queues
        -> Airline System - Remainder mail before 5 hrs of travel for plane takeoff
        -> Sending mail to 10,00,000 people passengers so server can break/crash
        -> Placing Queue which is secured even after server crashes also and no loss of data
        -> When in queue, we use to secure our state/position
        -> OTP mails takes some time to reach customer's mail as slowly clearing queue & then only reaches customer mail.
        -> Message Brokers (Kafka,Rabbit&Q)
    > GPay or PhonePe or etc [Money Transaction]
        -> Due to our money got stuck Transaction Queue, one's money got debited but other end didn't receive. 
    > When our data 


Day 44 : 13.07.2023 -----------------------------
Curriculum: 
    - Queue methods: Enqueue, Dequeue, Peek(), isEmpty(), clear & print()
    - Queue's Implementation
    - Linked List Clear Structure 
    - Linked List's Use Cases
    - Linked List's methods / operations
------------------------------------------------
Queue methods: 
    > Enqueue:- Queue(this.items).push
    > Dequeue:- Queue(this.items).shift

Queue Implementation:- 
    Update:
    > So we can't erase or update wrong middle user details until it becomes peek element 
    > remove all front details by dequeue and then we can peek and update it
    > Eg:- 10, 20, 30, 40, 50
    > I need to make 40 -> 60
    > Then we have to make 40 as peek element and then only we can update it
    > So we should not implement in Stack or Queue when we need to update, we can use array.
    
    Full:
    > In java, there is concept of we need to declare array length at the time of creation.
    > But in JS, Pythion, Dart etc. we don't need to declare array len at time of creation. 
    > So we can't ask isFull or not. Only when we know the len of arr we can ask isFull().
    > only when we know length of queue beforehand we can check isFull

    dequeue:
    > Dequeue using which we can delete only from front end.
    
    deque:
    > Double ended que using which we can delete from both front & rear ends.

Linked List Clear Structure [Easy concept]:-
    > We can easily update and delete like array.
    > It has index/address at 2nd position of all nodes.
    > current index points to next node
    > LL is a collection of randomly stored elements in memory is called as 'nodes'.
    > These data need not to be in continuous format. They are randomly stored.
    > In array, data stored in continuous format.
    > In LL, data will be stored in contiguos manner too. (jointly next to next -> aduthu aduthu in tamil)
    > Each node has 2 parts: 1st is data & 2nd is address
    > Next half address of 1st node copied from 2nd node's adress and pointing to 2nd node.
    > At last node's address is null as we don't point to anymore nodes at tail end.
    > So current node can be access using current address of current block which is at top/below of node.
    > We need to go inside address field of previous Node to access of next node.
    > To access 1st node we need to go inside & take address of Head as startNode.

Day 44 : 13.07.2023 -----------------------------
Curriculum: 
    - LinkedList methods/operations: append, prepend, traverse, search() & print()
    - Linked List's Implementation

------------------------------------------------
Linked List Imp:-
    > Head -> First Node
    > Tail -> Last Node
    > Tail.next -> address of current node points to the next node
    > 

Day 45 : 14.07.2023 -----------------------------
Curriculum: 
    - LinkedList Definition
    - LinkedList methods/Basic operations: append(), prepend(), traverse-length(), search() & print()
    - Visual Explanation
    - Linked List's Implementation (Explanation)
Time Stamp 01:00:59
    - Complexity introduction

------------------------------------------------
Linked List Definition:-
    > Array, Stack & Queue are array-based & contiguous memory allocation data structure.
    > A LL is a collection of randomly stored elements in the memory. These elements are nodes. In memory block, one data(element/node) can be stored at first and another will be stores at last (Random manner).This is possible in case of linked list.
    > We use pointers to connect & maintain linear order between these random nodes.
    > LL have collection of nodes. Next step, we need to connect/link the nodes.
    > Every node of a LL consists of atleast 2 parts - Data (value) & Address (next) of next node.
    > In data, we can store any type of information like number, array, object, string etc. 
    > In address, we can store address of next node. (Long number)
    > Head points to 1st node's address & Tail points to last node's null address of LL.
                            
Basic Operation:-
    > Append: Add a new node to the end of the linked list.
    > Prepend: Add a new node to the beginning of the linked list.
    > Traverse: Iterate through the linked list.
    > Search: Search the node with the given value in the linked list.
    > Print: Print the values of all nodes in the linked list.
    > Size: Length of Linked List (Node Count).
    > isEmpty: Check is Linked List is empty or not
    > insertAt() - [üö®Very important] Add a node at the specified index in the Linked List
    > deleteAt() - [üö®IMP] Delete a node at the specified index in the Linked List

Visual Explanation:-
                             Value| Next
                            |_____|_____|
                                 Node
            Tail.value
                    Tail.next
    Head---->|___10__|__a2___|---->|__20___|__null___|-> Tail
                a1(Node1)          a2(Node2)


LinkList Implementation (Explanation):- 
(1) New Node Creation | Basic rules
 Step 1: Linking process - Link newNode to already existing node in LL (Both ends like front & back)
 Step 2: Shifting process - Shift head to firstNode and tail to lastNode becomes null always (Both head & tail)

(2) Append - (Shift tail to newNode & always lastNode changes)
        -> Adding newNode after lastNode
    1. First Node:
    - condition -> Empty LinkedList (No node as of now)
    - head.next = null only 1st time. From 2nd time, it points to address of 2ndNode / prevNode while prepending
    - head.value -> 10
    - tail.value -> 10
    - head.next -> address of null (newNode/nextNode)
    - tail.next -> address of null

    2. nextNode from 2nd Node:
    - Always tail.next = null[oneNode, after adding newNodes]
    - 2nd node = newNode
    - this.head.next -> to access prev node's address part
    - this.head.value -> to access first node's data part
    - this.tail.next -> to access next node's address part is null
    - head.value -> 10
    - tail.value -> 20
    - head.next -> address of newNode (a2 of 20)
    - tail.next -> address of 20 is null

    3. Case - When there is no nodes, 2 times prepending & then append means TypeError: Cannot set properties of null (setting 'next')
            this.tail.next = newNode;
        Solution: We need to add if condition whether LL is null at prepend also.

(3) Prepend() - (Shift Head to newNode & always firstNode changes)
        -> Adding newNode before firstNode
    1. newNode
    - newNode's next is head (connection/linking newNode to 1stNode) to make newNode as 1stNode
    - current head is shifted to newNode
    
    2. Case - When there is no nodes
    - Adding if condition to check LL is null.

(4) Print():
    - CURRENT is temporary CONTAINER represent headNode at first.
    - current (new varaible created) assigning headNode's value
    - values -> Creating an Empty array
    - while loop Condition => [current != null] to run this loop until current reaches lastNode's null.
    - I'm pushing my current value into values Array
    - Shifting my current to nextNode's value by pointing to currentNode's address(next) which is similar to incrementing in loops.
    - join Operation means used to convert array from string. So it lookslike LinkedList.

(5) isEmpty():
    - To check if LL have any node or not (is head & tail null?)
    - If they are null, then LL has no nodes.
 
(6) length():
    - CURRENT is temporary CONTAINER represent headNode at first.
    - Iteration/traverse this container throughout LL with counter = 0
    - For every movement/iteration, counter increases till reaches null.

(7) clear():
    - How we can clear our Linked List?
    - Just by intializing head & tail as null.

(8) delete():
  1. First Node Deletion:
    - To delete firstNode -> newhead = head.next
    - head.next points to address of 2nd node
    - Automatically firstNode deleted as no one is referring it.
  2. Last Node Deletion:
    - When there is 4 nodes say A, B, C & D => To delete D node, tail = B.next
Eg:- 
 Question: 
    >llObject.append(10);
    >llObject.append(20);
    >llObject.append(30);
    >llObject.prepend(40);
    >llObject.append(50);
    >llObject.print(); // output 

 Output: 40 -> 10 -> 20 -> 30 -> 50

 Explanation: 
     - 'Append' means adding node from 'END' of the LinkedList
     - 'Prepend' means adding node from 'START' / beginning of the LinkedList
    => Here we first adding 3 nodes with values 10, 20, 30 at end of LL
    => So it becomes 10 -> 20 -> 30
    => Then we adding a node has value as 40 at start of LL.
    => So it becomes 40 -> 10 -> 20 -> 30
    => Now adding last node with value 50 at end of LL
    => Thus, results in 40 -> 10 -> 20 -> 30 -> 50

Eg:- 
 Q: if (!!!true) {
       console.log("iff");
    } else {
       console.log("else");
    }
 Output: else (part executes) [null -> false]
 Explanation: !true -> false | !!true -> !false -> true 
              !!!true -> !true -> false
 Reasons: Shortcut to memorize this is Even no of ! means same
            !true = false
            !false = true
            !! false = false
            !! true = true
            !!!true = false
            !!!false = true

Complexity Introduction:-
    - Complexity means checks whether our program is Bad, Better or Best
    - Based on Time & Space
    - The Code which takes less time & space is called Better program.
    (1) Time Complexity:-
        - How much time program takes to run?
        - Min time is better than max
        - Eg:- Amazon takes order in 1min but flipkart takes order in 1 second
        - Code that takes less time to run is better. So here Flipkart is better than Amazon.
    (2) Space Complexity:-
        - Code that takes less space to run is better.

Day 46 : 15.07.2023 -----------------------------
Curriculum: 
    - Linked List's Implementation: Delete(index)
    - Difference betweeen Array & Linked List?
    - Time Complexity
    - Absolute & Relative 

------------------------------------------------
Linked List's Delete(index):-
    
(8) delete():
Case 1. First Node Deletion/0th index node Deletion:
    - To delete firstNode -> newhead = head.next
    - head.next points to address of 2nd node
    - Automatically firstNode deleted as no one is referring it.
    - Let's say we have 5 nodes. I need to add/delete 1ST Node. How many operation it takes?
    - Only one as it is in first place having 0th index.
    - In LL, T.C of add-> prepend/delete 1st Node is O(1) always.
    - O(1) is contant time.
Case 2. Any Node Deletion:
    - When there is 4 nodes say A, B, C & D => To delete D node, tail = B.next
    - Change address of delete's next node to delete's prev node
    - We want to delete Node3, change Node2.next as 'a4 - address of Node4'
    - Before deleting Node3, get deletingNode (Node3's) deleteNode.next (address) to store at Node2's next (address) & then change/connect prev & next nodes.
    - In LL, we need not delete explicitly, we have to remove the link/chain which automatically deletes non-referring node.
    - In LL delete function, we need to track previous & current(going to delete) node 
    - currentNode = deleteNode
    - As in previous node, we need to store nextNode's address lies at current.next
    -> Intitally prevNode is null & current is 1st node
    -> Run Loop to traverse/iterate both prev & current nodes
    -> Instead of counter, we say currentIndex.
Case 3. Last Node Deletion: 
    - If previousNode.next == null, then make tail as previousNode.
    - Let's say we have 5 nodes. I need to delete last Node. How many operations it takes?
    - Only one as it is in last place having nth index.
    - In LL, T.C of add/append at last node is also O(1) always.
    - In LL, T.C of delete at last node is also O(n) always.
Case 4. Only 1 Node but Deletion of 3rd node (Impossible): 
    - append(10), isEmtpy, length, print, delete(3rd index)
    - In above scenario, it throws TypeError: Cannot read properties of null (reading 'next')
    - At current = current.next;
    - To handle error situations, we need to check index is >= 0 & index is < length of LL

Visual Explanation:          
 Step1:   Head-->|___10__|__a2___|-->|___20__|__a3___|-->|__30___|__a4___|-->|__40___|__null___|-> Tail
                     a1(Node1)            a2(Node2)            a3(Node3)          a4(Node4)
--------------------------------------------------------------------------------------------------------
 Step2:   Head---->|___10__|__a2___|---->|__20___|__a4___|-‚ùå->|__40___|__null___|-> Tail
                        a1(Node1)              a2(Node2)           a4(Node4)    

Eg1:-
    let a = null;
    if(a){
        console.log("if");
    }else{
        console.log("else");
    }
Output:- else
Reason:- As null is also falsy value, we get 'else' part.

Eg2:-
    let a = null;
    if(!a){
        console.log("if");
    }else{
        console.log("else");
    }
Output:- if
Reason:- As null is falsy value not(false) becomes true, we get 'if' part.

Eg3:-
    let a = 10;
    if(!a){
        console.log("if");
    }else{
        console.log("else");
    }
Output:- else
Reason:- As 10 is truthy value not(true) becomes false, we get 'else' part.

Eg4:-
    let a = 0;
    if(!a){
        console.log("if");
    }else{
        console.log("else");
    }
Output:- else
Reason:- As 0 is falsy value not(false) becomes true, we get 'if' part.

console.log(0); //false üö©
console.log(1); //true  üö©
console.log(!0); //true üö©
console.log(!1); //falseüö©

üìåConclusion:- 
________________________
|  -> 0, null = false   |üö©
|  -> !null = true      |üö©
-------------------------

NewNode MIDDLE INSERTION using insertAt():-
 - Insertion of newNode at middle position of Linked List using insertAt() method.
 - We pass 2 arguments: newNode's newPosition/Index as index, newNode's newValue as value.
 - MISTAKE: this.length will not append, we need to call it by adding () to this.length
 - Creating new node to add at middle.
 - Just set a variable currentNode as head & currentIndex as 0.
 - We need to iterate till index - 1 by moving forward.
 - While condition is true, then we need to shift out currentNode to nextNode & incrementing currentIndex for next iteration.
 - To loop through the linked list, we shift currentNode.
 - And once we reached before user given index (index - 1)
 - Let's say index given by user is 2, then we need to stop at 1st index.
 - And change pointer from 1st index(currentNode) to newNode & newNode to 2nd index.
 - This chain will help to add newNode automatically into LL.
 - Then we need to shift next(address) of newNode to 1st index's next (address of 2nd index node) to make newNode as 2nd index & nextNode as 3rd index.
 - And we need to mention 1st index's next as newNode's address

Difference betweeen Array & Linked List?
üåüArray List:-
‚èπÔ∏è Array/Stack/Queue are contiguously (Tamil Meaning for contiguous - aduthuaduthu) stores in the memory.
‚ùå The array size should be declared inside the program in advance in case of other programming languages. But not in Javascript. We can change arraySize at runtime (which is not fixed rule) also in JS 
‚ùå It is difficult to change the size of the array afterwards its creation.
‚èπÔ∏è Array allows random access of elements with its index.
‚èπÔ∏è Array have slower insertion or deletion time as compared to linked lists.
‚èπÔ∏è Arrays require less memory per element.

üåü Linked List:-
‚èπÔ∏è LL are not necessarily contiguous inside the memory. They are randomly stored elements. 
‚èπÔ∏è We need not declare the size of the list in advance.
‚èπÔ∏è We can expand or shrink a linked list any time during the execution of the program.
‚èπÔ∏è In a linked list, we cannot randomly access any element, we need to traverse/iterate/movethrough the list from the beginning (index 0).
‚èπÔ∏è Linked List have a slower search time because of the absence of random access.
‚èπÔ∏è Lists require more memory because we need to maintain extra pointers.

Note:- ‚ùå means need not to be taken while comparison and exemption in JS

Time Complexity:-
    - Intro
    - Big O, Omega, Theta Notation
    - Types of Time Complexity functions
    - Maths behind Time Complexity & Comparison
    - Practice on Time Complexity
    - Best, Worst & Average cases
    -> What is T.C?
    -> How to Calculate it?
    -> Common big 'O' notations
    -> Questions

Algorithm Analysis:-
    -> Which algo is better & which is worse?
    -> What is absolute & relative time?
    -> What is input size & growth rate & Big O Notation?
    -> Travelling from Delhi to Mumbai directly. [BEST WAY as less time]‚úÖ
    -> Delhi to UK to US to Japan to Kolkata to Mumbai.
    -> Similarly, Algorithm means steps to code by analysing which algorithm is better & which is worse.
    -> To check the algorithm, there are 2 ways.
        1. In terms of Time 
        2. In terms of Space 
    -> Let's assume that from Delhi to  Mumabi 1st one is better in terms of Time.
    -> Assume that from Delhi to  Mumabi 2nd one is better in terms of Price(Space).
    -> As a manager we will decide accordingly to scenario
    -> If we need to be in budget, then we are not worry about time taken. Then we choose 2nd one. Orelse vice versa.

Time Complexity:- [V.V.I Concept]
    - There are 2 types of time: Absolute & Relative
        (1) Absolute Time
            -> Tells exact computational time like Hours, minutes or seconds.
            -> Eg:- To open amazon app takes 5 seconds which is absolute time.
            -> Depends on Hardware like 106 GB of RAM, things will getting very fast.
            -> Let's say we have very good processor, handles ur operations very fast
            -> That's why absolute time will not give correct/uniform measurement on which Algorithm is better A or B
            -> Maybe Algo A works fast on MAC & same works slow on Windows system.
            -> It depends on different processor/internet speed as well.
        (2) Relative Time
            -> Time can be linear, quadratic, cubic or log etc.
            -> This will not tell exact time like Hours, minutes or seconds.
    - We need to focus only on 'Relative' as a developer.
    - Absolute time we will not consider
    - üö®(Int Q) Why we not consider Absolute ?
        -> As we will not get accurate time of results in Algorithm
        -> Refer from 3rd point under Absolute time
    - üö®(Int Q) Why we care about Relative time?
        -> How our alogirthm is growing with input size?
        -> Now we will not care about seconds (time taken).
        -> We care about scaling with input size.
        -> Let's say we run a loop from 1 to 10 & doing some task inside loop results in A
        -> We run another loop from 1 to 1000 & doing some task inside loop results in same output A.
        -> Now say who is better algorithm? 1st for loop with less time with 10 iterations.
        -> O(n) not depends on no.of operations but relative depends on no.of operations.
How to calculate Time Complexity?
    - To denote Time Complexity with Capital 'O'(Big O notation).
    - Calculate using Number of Operations
    - Eg1:- for(let i = 0; i < 10; i++){
            // Some Task
            console.log("Hello"); -> This is 1 operation
            console.log("Bye"); -> This is another operation
           }
      Run time of for loop: 10 times
      Total no.of operations: 2 operations (Each time of iteration)
      Therefore, T.C of above program: 10 times * 2 operations = 20 operations
    - Eg2:- for(let i = 0; i < 5; i++){
            // Some Task
            console.log("Monisha"); -> This is 1 operation
           }
      Run time of for loop: 5 times
       -> We usually don't depend on constants but here 5 is a constant
      Total no.of operations: 1 operations (Each time of iteration)
      Therefore, T.C of above program: 5 times * 1 operation = 5 operations
    - Eg3:- for(let i = 0; i < n; i++){
            // Some Task
            console.log("Monisha"); -> This is 1 operation
           }
      -> Run time of for loop: 'n' times
       -> We usually don't depend on constants but here 5 is a constant
      -> Total no.of operations: 'n' operations (Each time of iteration)
      -> Therefore, T.C of above program: n times * 1 operation = n operations
       -> This is called as Relative Time.
       -> We represent this as O(n) - order of 'n'

    - Eg4:- for(let i = 0; i < n; i++){
            // Some Task
            console.log("Monisha"); -> This is 1st operation runs for n times. 
            console.log("Raji"); -> This is 2nd operation runs for n times. So n+n=2n
           }
      -> Run time of for loop: n times
      -> Total no.of operations: 2 operations (Each time of iteration)
      -> Therefore, T.C of above program: n times * 2 operations = 2n operations
      -> We usually don't depend on constants but here 2 is a constant
      -> For this also we say O(n) T.C only.
      -> We discard constants of absolute terms & we concenterate on only relative (n).
      -> O(n) not depends on no.of operations.
    - Eg5:- for(let i = 0; i < n; i=i+2){
                clg("Moni');
            }
      Run time of for loop: n/2 times
      -> But we discard /2 & say 'O(n)'
    - Eg6:- for(let i = 0; i*i < n; i++){
                clg("Moni');
            }
      -> Let's say n=16
      -> Run time of for loop: 4 times
      -> i square = n => i = root of n = n to the power of (1/2)
      -> We discard 1/2 & say O(n)
      -> But power thing we cannot neglect so 'O(root(n))' operations

    - Eg7:- for(let i = 1; i <= n; i++){
                for(let j = 1; j <= n; j++){
                    clg("Moni');
                }
            }
      -> Run time of for loop: n*n times Moni will be executed
      -> Let's say n=5 for 25 times above program runs
      -> But we cannot discard power thing
      -> Therfore, T.C of this program is 'O(n square)' operations

    - Eg8:- for(let i = 1; i <= n; i++){
                for(let j = 1; j <= n; j++){
                    for(let k = 1; k <= n; k++){
                        clg("Moni');
                    }
                }
            }
      -> Run time of for loop: n*n*n times Moni will be executed
      -> Let's say n=5 for 125 times above program runs
      -> But we cannot discard power thing
      -> Therfore, T.C of this program is 'O(n cube)' operations

    - O(1) is constant time.

        
Myths & What is Log?
        -> Only care about growth rate anything else.
        -> What is Log & what makes it so powerful?
        -> Questions on Logs 
    Log:-
      - Class 11th & 12th
      - Why? We represent T.C in terms of log also.
      - How? We will see in DSA advanced
      - What? 2 raise to power of 3 = 8
      - This Exponent is just opposite of Log.
      - To what power should we raise 2 to get 8?
      - log of 8 subscript of (down) 2 is 3
    Identities of Logs:-
      - log ax to subscript of b = x times log a to subscript of b

Big O Notations (Increasing series):-
    -> O(1)
    -> O(log n)
    -> O(sqrt n)
    -> O(n)
    -> O(n logn)
    -> O(n^2)
    -> O(2^n)
    -> O(n!)

Space Complexity & how to calculate?

Day 47 : 17.07.2023 (React JS) -----------------------------
Curriculum: 
    - Difference ES 5 & ES 6
    - ES 6 Features let & Const
    - Scope & Hoisting difference
    - Spread & Rest Operator (...)
    - Destructuring
    - Promise & Async-await

------------------------------------------------
Day 48 : 18.07.2023 -----------------------------
Curriculum: 
    - 2 main Categories data types
    - ES 6 Primitive Types
    - ES 6 Reference Types
    - ES 6 Strings or literals templates
    - ES 5 & 6 New Array methods

------------------------------------------------
ES 6 Primitive Types
    > Represents simple values and are immutable.
    > Cannot be changes after they created.
    > Reassigning is not mutable.
    > Primitive types:-
        -> Number, String, Boolean, Null, Undefined, Symbol, 
ES 6 Reference Types
    > Represents simple values and are mutable.
    > Can be changes after they created.
    > Reference types:-
        -> Array, Object
    > Interview Question:-
        -> üö®Diff b/w Primitive & Reference types
        -> Unlike, primitive types, which are copied by value, reference types are copied by reference. 

ES 6 Strings or literals templates
    >  ${Any expressions can be written not statements}
    > `` -> Within Backticks, we can write sentences along with expressions/variables.

ES 5 & 6 New Array methods
    > Map 
        -> Creates a new array with the results of calling a provided function on every element
        -> Undefined if we not return anything
    > Filter
        -> Creates a new array with all elements that pass the test implemented by the provided function
        -> [] if we not return anything
    > Reduce
        -> Reduces the array to a single value by executing a provided 
        -> When no initialValue, it takes first value as accumulator
    > Find
        -> 
        -> It returns -1, if we don't have any even number

    > FindIndex
        -> 
    > Some 
        -> Test whether at least one element in the array passes the provided test condition in function
    > Every
        -> Test whether all elements in the array pass the provided function
    > From [is from ES 7]
        -> Array-like or object

Day 49 : 19.07.2023 -----------------------------
Curriculum: 
    - ReactJS (Pg 256 in ppt)
    - Advantages
    - Pain of writing React Pure Code
    - Bundler
    -
    - Installation of Node & npm & reactApp
    - What is App? (JSX Intro & Components)
    - Websites:
        https://legacy.reactjs.org/docs/cdn-links.html

------------------------------------------------
ReactJS 
    -> React is a JS framework
    -> Jordan Walke Fb developer who created ReactJS (2011 & 2012 Only for FB)
    -> Released for public in 2013
    -> React helps to create Single Page Applications(SPA)
    -> A Single Page Application (SPA) is a web application or website that operates on a single web page, without the need for constant page reloads.
    -> SPAs load the initial HTML, CSS, and JavaScript resources once and then dynamically update the content as the user interacts with the application.
    -> Eg of SPA:- Airbnb, Swiggy, Zomato, Netflix, BookMyShow (no Reload & smooth application)
    -> EPFO site is traditional application which reloads with each request which is bad
    -> Sometimes reload will also happen when our net connection is not properties
    -> Traditional WebApp each interaction with website involves a request to the server & a full page reload.
    -> Angular JS is by Google

Advantages of ReactJS:-
    -> Job opportunities
    -> Backed by Fb
    -> Easy to learn
    -> Long term support
    -> Good Salary

Pain of writing Pure React Code:-
    -> When developer use React to build applications, feels the pain.
    -> Typically we use JSX (Javascript XML) instead of using React.createElement
    -> JSX is 99.99999% html not 100%

Bundler:-
    -> It is a tool that packages & prepares all the necessary assets, such as JS, CSS, images and more files.
    -> Popular bundlers in React.js projects:-
        (i) Webpack
        (ii) Vite
        (iii) Parcel

Installation of Node & npm & reactApp:-
    > In Win+R -> cmd (command prompt black screen) paste "npx create-react-app my-app"
    > Inside my-app, package.json has dependencies used while creating projects
    > npm packages
    > react may be dependent on some other packages. And those other pkgs depends on some othr pkgs (package-lock.json consists of these)
    > Where r they? Inside node.modules exists.
    > .gitignore just for gitHub to ignoring some files.
    > src folder - App.css, App.js, index.css & index.js
    > public folder - index.html
    > App.js returns some piece of JSX which is not pure HTML 
    > Whatever tags we use in React are called as JSX instead of HTML even though it looks like HTML.
    > Shows writing HTML(JSX) in .JS file

 What is App? (JSX Intro & Components)
    > üì¢Everything in React is ur 'component'.
    > Component: 
        - Go to React.dev website
        - function App() is our component inside App.js file
        - Whatever we build/see/code in React are components
        - 2 types: Functional & Class Components
        - Now-a-days we use only Functional components (easy)
    > Functional Component:
        - Just a JS function returns some kind of JSX.
        - Naming Convention of functionName startsWith CAPITAL letter.

Day 50 : 20.07.2023 -----------------------------
Curriculum: 
    - React Installation Doubts Clarification
Noteüì¢:- Cannot give React project name with 1st letter CAPS.
         We can use "npm install -g create-react-app" global command. Then we can use npx create-react-app my-app. This works for me in windows command prompt.
------------------------------------------------

Day 51 : 21.07.2023 -----------------------------
Curriculum: 
    - Foundation of React (this class & next)
    - Revise Bundlers (CRA, VITE, PARCEL)
    - Writing JSX
    - 

--------------------------------------------------
Revise Bundlers (CRA, VITE, PARCEL):-
 SuperPower of Bundlers : 
    (1) üö® HMR:-
        -> HMR (Hot Module Reload or Replacement)
        -> Which keep a track of all files which are changing in realtime & tells server to reload.
        -> Eg:- Go Live Server, ReadMe files etc.
    (2) Caching while Development 
        -> Cache / Cookies
    (3) Dev & Production Build & Staging Environment
        -> Beta means developing period.
        -> NetFlix is Production product.
    (4) Image Optimization
        -> 

 CRA (Create React App) / Webpack [Famous]
    -> It is one of Bundler tool used to convert JSX code into React.createElement.
    -> Popular bundler in React.js
    -> https://create-react-app.dev/
    -> Node Modules gives babel dependency
 
 VITE:
    -> 
    -> https://vite.dev/

 Parcel
    -> https://parceljs.org/


JSX:
    -> Browser cannot understand JSX. But Babel understand JSX.
    -> Javascript XML is not pure html
    -> Javascript XML is kind of / like html
    -> It‚Äôs syntax extension for javascript that allows to write html-like syntax in javascript code.
    -> Because it‚Äôs like HTML like Syntax - It‚Äôs easy to create and easy to manipulate and already known to you.

BABEL:
    -> Babel in Javascript Compiler or transpiler.
    -> It is a library that converts JSX into pure JavaScript/Pure ReactCode meets HTML & put in DOM.
    -> Also helps in converting ES5-6 syntax into code that older JS engines.
    -> It is given by node module in CRA/VITE/Parcel

React Components:
    (1) Functional Component
    (2) Class Component

(1) Functional Component: 
    -> RFCE shortcut for Function Component
    -> From 2018, React said only supports this with new features.
    -> It is just JS function/arrow Function etc which returns JSX.
    -> Function name starts with Capital & returns JSX.
    -> Magic of Components lies in it's Reusability as it is function.
    -> How to change content using component for different videoCards multiple times?
    -> Calling it in rendering at ReactDOM root div
    -> To call in different file, we need to add export keyword before function keyword in component / adding a line export default Header;
    -> import Header from './Header.jsx' at main.jsx

Day 52 : 24.07.2023 -----------------------------
Curriculum: 
    - Let's understand Export & Import
    - JSX with Curly Brackets
    - What is Props in Components
    - Apply Style or CSS on Components
    - Talk About npm, yarn, pnpm

--------------------------------------------------
Note: React Components always returns JSX

Destructuring in JS:-
    Eg:- const Obj = {
            "name": "Moni",
            "last": "sam"
         }
         const {name, last} = Obj;
         console.log(name); // Moni
         console.log(last); // Sam
    
Export & Import:
    - Are used to enable the reusability of code.
    - There are 2 primary ways to export values with Javascript.
        1. default exports 
        Eg:- export default Button; import Button from './Button.js'
        2. named exports - export Keyword before child function
        Eg:- export function Button(){} | import {Button} from './Button.js'
        Note: 
            -> {Button} is destructuring named export part from JS, 
            -> key of object
            -> While importing Key should have same name as named export function name.
    - RULES: ["Only 1 default export, multiple named export"]
        > A file can have not more than one default export (Only 1).
        > but it can have as many (multiple) named exports as you like.
    - Important Rules on default and named export and import:
        > When you do export default, you can put "any name" while importing.
        > When you do named export, destructure with "same name" should used while importing as key -> {key1, key2}. That's why they are called named imports!
    - Component Conventions (Everyone follows):
        > Usually, people often use default exports if the file exports only one component.
        > And use named exports if it exports multiple components & values.
    - Eg:-
        // Parent.js file
        import Child from './Child';
        export default function Parent (){
            return (
                <div>
                <h1>Parent to Child</h1>
                <br />
                <Child messages = {"Messages from Parent"} />
                </div>
            );
        }

        //Child.js file
        export default function Child(props){
            return (
                <div>
                    <p>I got this msg from Parent - {props.message}</p>
                </div>
            );
        }
    - In above program, can we write named export with default keyword like first line?
    - ‚Äúexport default function Child (props){}‚Äù instead of ‚Äúexport default Child;‚Äù at last line
    - Yes it‚Äôs same thing.

JSX with Javascript within Curly Brackets {}:
        > {} is used to evaluate a JavaScript expression during compilation .
        > JSX lets you write HTML-like markup inside a JavaScript file.
        > Browser cannot understand JSX. Babel is a compiler/transpiler.
        > Ther comes Babel into picture which converts JSX into Browser's language
        > We have babel inside node modules of CRA [Create-React-App].
        > VITE is very fast when compare to CRA (CRA -> very famous).
        > Sometimes you will want to add a little JavaScript logic or reference a dynamic property inside that markup. 
        > In this situation, you can use curly braces {} in your JSX to open a window to JavaScript.
        > That means it‚Äôs possible to use JavaScript inside it with curly braces { }. 
        > Apart Form number, string and normal things, We can pass Objects in JSX.
        > Let‚Äôs Check Some Example Now.

Component:
    > It is nothing but just Javascript function which have 3 things.
    > function body, return statement & parameters.

What is Props in Components? [Time Stamp:- 01:12:50]
    - Props means Properties. They are read-only components.
    - It is an object which stores the value of attributes of a tag and work similar to the HTML attributes.
    - It gives a way to pass data from one component to other components. It is similar to function arguments.
    - Props are passed to the component in the same way as arguments passed in a function.
    - When you are passing data from parent component to child component , you can use props to transfer the data. The Child will access the data in the props
    - Props allow you to pass data from one component to other components as an argument. Props can be accessed by the child component.
    - Passing properties from parent to child component using functional components
        i. Embed the child component to the parent component.
        ii. Pass the props to the child component as an argument while embedding it to the parent component.
        ii. In the child component, access the data variable value by writing the name or variable only.
    - Pass the data variable (props) with an assigned value to the child component as an argument while embedding it to the parent component. So to pass props into the child component we need to import it in App.
    - React Components communicate with each other using props
    - rfce means React Functional Component Export [ShortCut]
    - Parent Component - App.js
    - Child Component - ProductCard.js
    - Every Parent Component can pass some information to its child components by giving them props.
    - Eg:- Created a ProductCard.js [Time Stamp:- 01:20:25]
    - Passing Arguments is different from passing Props but technically same

    Eg:- Difference between
    In Normal Javascript,
        function f1(obj){          -> Function declaration/Creations
            obj.a;
            obj.b;
            obj.c;
        } 
        f1(10, 20, 30); -> Calling Function

    In React,
         function f1(props){        -> Component creation at child (Receiving props)
            return (
                //Shaping/Structuring process
                <h1>{props.a}</h1>
                <h1>{props.b}</h1>
                <h1>{props.c}</h1>
            );
         } 
         <f1 a={A} b={B} c={C} /> -> Calling Component at parent (Passing values[A, B, C] of props)
    -> Without passing A, B, C values, it won't get reflected on UI.

    In React, we are destructuring props
        function f1({a, b ,c}){        
            -> Component creation at child (Receiving destructured props)
            return (
                //Shaping/Structuring process
                <h1>{a}</h1>
                <h1>{b}</h1>
                <h1>{c}</h1>
            );
        } 

    - Props is our big object which contains 3 things url, title & desc.
    - Props might remind us of HTML attributes.
    - But you can pass any Javascript value through them.
    - Including functions, objects, arrays etc.
    - Props are the information that you pass to JSX tags like HTML's attributes.
    - Props is also called as properties / arguments.
CONCLUSION: Updating props is bad as it is read-only at childEnd component.
Parent Component:
    -> We are creating key-value pair
Child Components:
    -> We need to pass with same key name at {props.sameKeyName}

Apply Style CSS:-
    - There are 4 ways to apply the style in React.
    (1) INLINE (as Object):
        Syntax: {Javascript} -> <p style = {{color:"red" fontSize:"35"}}></p>

    (2) Object:
        Syntax: 
        let style1 = {
            backgroundColor: "lightblue",
            borderSize: "1px",
            borderStyle: "dashed",
            borderColor: "red"
        }
        function f1(){
            return(
                <p style = {style1}></p>
            );
        }
Day 53 : 25.07.2023 -----------------------------
Curriculum: 
    - Apply Style or CSS on Components [(3) External file & (4)External Library]
    - Talk About npm, yarn, pnpm
    - Rendering List of Components [Movie Posters API]
        -> omdbapi.com/?s=iron&apikey=53b4ed65
    - Let's learn State Management in components
    - Introduction to Hooks in Functional Components
    - State Management & state Variables
    - React Hooks: Core React Hooks & Custom Hooks
    - useState [Let's learn 1st Hook]
    - Your First Hook - useState hook.
    - Let's build a counter components
    - VS Code Git pushCode 3 Command Lines 
    - üì¢[Backend Watch After Node.JS] Json Web tokens Youtube URL: https://youtube.com/watch?v=YxMIhGZlrTM
    - API call: https://omdbapi.com/?s=iron&apikey=44c0b96f
--------------------------------------------------
Apply Style or CSS on Components:-
    (3) External file 
        -> As same as normal CSS file
        -> Only importing at .js file
        -> Because import & export used in .js files only.
        -> Main difference is className in JSX not class
        -> As class is itself JSX, we need to give className instead of class.
        -> 
    (4) External Library [Material UI, Tailwind CSS, Ant etc.]
        -> Bootstrap is used for normal projects
        -> In MNCs, they use Material UI, Tailwind CSS etc.
        -> Tailwind CSS blows market as they use less installation time.
        -> JWT means JSON Web tokens which is token generated system [Backend].

NPM, Yarn & PNPM:-
    Refer Slide

Rendering List of Components:-
    -> Before Rendering List of Components
    -> You will often want to display multiple similar components from a collection of data.
    -> Refer Youtube Video Card & Flipkart Product Card
    -> Component is same but names and videos differ
    -> Shortcut for instead of repeating rendering a component.
    -> We use Arrow function is passed as callback function in map loop which gives a new array.
    -> Everytime we return same component with different data. 
    -> (Assignment 1) we need to use static data.
    -> (Assignment 3) we need to use dynamic data using API call.

State Management:-
    -> Best feature in ReactJS is State
    -> [IMP] Changes to local variables won't affect render in React
    -> Not re-rendering
    -> Local variables don't persist between re-renders.
    -> React don't realize it needs to render the component again with the new local variable data.
    -> When Component should re-render?
    -> When the data is updated. It can be updated on each time events happens in UI.
    -> Let's update somethings and Check if it trigger re-render or not.
    -> Local variables are not allowed in React.
    -> Local variables changing only at console.
    -> Not re-rendering & updating at DOM & UI.
    -> Solution is using State Variables when component should need to re-render by remembering. [Value Updation]

State Variables:-
    -> Use a state variable when a component needs to "remember" some information between renders. (Re-renders)
    Q: How to create State Variables in functional components?
    A: State Variables are created only in functional components by calling 'useState Hook'
    -> Hooks are special functions that start with use. They let you "hook into" React features like state.
    -> Hooks are just Javascript functions with which we use lots of react features.
    -> Now let's learn HEART OF REACT - REACT HOOKS

React Hooks:-
    -> React Hooks are a feature introduced in React 16.8 (2018).
    -> It works only in functional components 
    -> Not used in class-based components.
    -> Hooks are just Javascript functions with which we use lots of react features.
    -> Some hooks are already created & provided by React(Kind of built-in functions)
    -> We can also create our own custom hooks 
    -> Every (built-in & custom) Hooks should startsWith 'use' keyword.

Core React Hooks (in-built given by React):-
    -> useState, useEffect, useReducer, useCallback, useMemo, useRef, useContext etc.
    -> Q: What is common in all above hooks?
    -> Try to read all Hooks name and tell me ?
    -> use is common which is keyword in all hook name (in-built/custom-made) 

useState [Let's learn 1st Hook]:-
    -> When you call useState, you are telling React that you want this component to remember something.
        Syntax: const [X, setX] = useState(0);
            Here
                - X is state variable
                - 0 is initialValue passed as argument
                - setX is setter state functions which triggers to update state variables.
            Eg:-      const [index, setIndex] = useState(0);
                      function f1(){
                        setIndex(index + 1);
                      }

    -> setCount(count++); -> Err: Assignment to constant variable we assigned to const keyword.
        const [count, setCount] = useState(1);
    -> Even if we change from const to let also gives problems but not by throwing error.
        let [count, setCount] = useState(1);
    -> When we 1st time click btn not changing the value. 
    -> On 2nd time clicking only changes value. Due to below reason.
    -> This '++' is post increment which posts the current value & then increment. 
    -> So these type of (POST & PRE | increment & decrement) operators not used in React Hooks.
    -> In above code, we want React to remember index.
    -> useState is one of the core Hook provides by React.
    -> While calling useState we pass only ONE argument to it which is the initial value of your state variable & that ONE argument can be of any data type.
    -> The state variable (index) with the value you stored.
    -> State variable is immutable. Only by assigning we can change.
    -> Throws Error: Assignment to constant variable
    -> The state setter function (setIndex) which can update the state variable 
    -> Not only updating value but also trigger by rerender the React components by changing DOM (inspect-code under Elements tab) also.
    -> It helps by triggering React to render the component again (Re-render).

VS Code Git pushCode:- [ Under  Terminal ]
    -> cd ..
    -> git add .
    -> git commit -m "useState Added"
    -> git push origin main/master

Day 54 : 26.07.2023 -----------------------------
Curriculum: 
    - Revise useState Hook with Object Argument
    - Class Based Components
    - How to pass Props in Class components.
    - Creating state variable in Class components.
    - Updating state variable in Class components.
    - Lifecycle methods in class components.
__________________________________________________

Revise useState Hook:- 
    -> Passing only ONE which can be of different datatypes.
    -> Like Number, String, Array, Object etc.
    -> You can have as many state variables of as many types as you like in one component.
    -> But only ONE argument is passed as useState parameter which can be of any datatype.
    -> (IMPüö®) State variables are immutable/cannot change. If we want to change, we need to assign new value to state variables.
    [Time Stamp: 01:37:46]
    -> üö®All Hooks starts with 'use'
    -> How may state variables can be create in a component?
    Ans: Infinite times
    -> How may arguments can we pass in a useState hook of a component?
    Ans: Only ONE
 Eg1:- 
    const [detailObj, setDetailObj] = useState({ n1:"Pratik" });
    <h1>{detailObj‚ùå}</h1> -> JSX (Obj)
 - Throws Error: Objects are not valid as a React Child (found: objects with keys {n1}). If you meant to render a collection of children, use an array instead.
    <h1>{detailObj.n1‚úÖ}</h1> -> JSX (Obj with keyName)
 Eg2:- 
      const [detailObj, setDetailObj] = useState({n1:"Pratik", country:"India"});
      <input onChange={() => {
        setDetailObj({ n1: event.target.value, country:"India" })
      }}
      />
 - We cannot print our Object directly without accessing keyName. [Obj.key]
 - State variables are not mutable every time we need to assign even old values newly & complete new value in Object. 
 - If one key only we need to update & other is old value, in this case also we need to assign whole object newly with 1st key as new value & append same 2nd key as old value.
 - As we need to assign completely.

[Time Stamp: 01:13:50] 

Class Based Components:
    -> It were the traditional way of components in React.
    -> It may be you will never use it(unless we are working on old code)

Day 55 : 27.07.2023 -----------------------------
Curriculum: 
   -
   -
   -
   - Lifecycle of class-based components
   - (1) Mounting stage
__________________________________________________

Lifecycle of class-based components:-
    -> There are 3 stages in lifecycle of class-based components.
      1. Mounting
      2. Updating
      3. Unmounting

-> There are 2 phases in lifecycle of class based components.
      - Render phase: Pure and has no side effects. May be paused, aborted or restarted by React.:
      - Commit phase: Can work with DOM, run side effects, schedule updates.

-> There are 6 methods in Lifecycle of class-based components. They are:-
    i) Under Mounting stage:
         - constructor, render, componentdidmount in Mounting phase 

          (1) constructor(props)
          (2) render()
          (3) componentDidMount()

    ii) Under Updating stage:
        - NewProps, setState(), forceUpdate()
        - Never forceUpdate() 
        - render(), componentdidupdate, shouldComponentUpdate(nextProps,nextState)
          (4) componentDidUpdate()
          (5) shouldComponentUpdate(nextProps, nextState)

    iii) Under Unmounting stage:
         (6) componentWillMount()

NOTE: 
     - While console logging always 2 times printed. 
     - Due to we render <App/ > within <React.StrictMode> in index.js file. 
     - This makes React to check for two times each components are pure or not.
     - While updating at UI & DOM & triggers the rerender the components .

Day 56 : 28.07.2023 -----------------------------
Curriculum: 
    - Updating stage:
        componentdidupdate() &
        shouldComponentUpdate() 
    - Unmounting phase:
        componentWillUnmount()
    - Synchronize with Effects
    - useEffect Hooks
    - Live Project on Google News API call(GNews.io) by fetching in async-await using useEffect() Hook
    
__________________________________________________
Updating stage:
    componentdidupdate() &shouldComponentUpdate()
    
Unmounting phase:-
    componentWillUnmount();
        -> This will be used mostly while routing in Node.js
        -> So we will see on 31st july or 1st august class.

Synchronize with Effects:-
    -> Some time we want to Synchronize our react component with external effects.
    -> Example - API CALLS etc.
    -> useEffect() is a React Hook that lets you synchronize a component with an external system.
    
useEffect Hooks:-
    -> From 305 slide [IMP]
    -> useEffect(setup_function, dependencies_Array) and returns undefined.
    -> React will render the component or jsx 1st.
    -> Then call the callback function or setup functions.
    -> If we don't have 2nd argument, then setup_function will be called after every time state or props changed.
    -> Let's write the useHook & use Google News API [took from GNews.io site]. In that API key is important after signup click on click "Search Endpoint" under Dashboard.
    -> SYNTAX: useEffect(() => {},[]);
    -> 2 Arguments in useEffext(): setter function & dependencies_Array
    -> 2nd argument is optional
    -> When useEffect calls, 2nd argument as array have 3 cases.
        CASE 1: If we don't have 2nd argument (dependencies_Array)
            - setup function called once after (initial) 1st render AND then every time when state & props changes.
        CASE 2: If we have an empty array = [],
            - setup function called only once after (initial) 1st render
            - In general, setup function is useEffect 1st argument
            - In our example, console.log("useEffect called"); inside useEffect as 1st parameter {}.
        CASE 3: If we have some state variable in [],
            - setup function called only once after (initial)1st render and after any change in given state variable.
    -> MORE THINGS RELATED TO useEffect
        - Setup function also returns the cleanup function but this optionally.
        - After ur component is removed from the DOM, React will run your cleanup function one last time.
        - Maybeüö®QUESTION: You can't make the useEffect function itself async. WHY????
        - Answer: We know that useEffect returns undefined. If we add async keyword to it, then useEffect will return Promise.object.
        So in order to avoid it, we use nested/inner function inside useEffect's arrow function.
        - You can implement debouncing and throttling techniques with useEffect to control.

Day 57 : 31.07.2023 -----------------------------
Curriculum: Assignment Discussion | Project 1 Starting - Google OAuth Integration Saving User Data in Local Storage
   - Google Auth Project
   - O Auth 2.0 
        Refer [authO.com/intro-to-iam/what-is-oauth-2]
   - Saving Gmail user's data values at localStorage in React
   - ReactStrictMode
   - How to create a new React Project at console?

API URL:  https://api.themoviedb.org/3/movie/popular?api_key=cfe422613b250f702980a3bbf9e90716
Reference URL:  https://codepen.io/Mustafa-Ispahani25/full/MERMWG
REACT TODO Application: https://www.youtube.com/watch?v=e_ZibOe77yo
__________________________________________________

Google Authorization Project:
 -> What we need to build for this project?
 -> Requirements for the project
 -> Build News Website
    1. Get News data from Google News API
    2. Search News functionality
    3. Login Setup 
        - Normal way of login (‚ùå userName & Password checking)
        - Google O Auth ‚úÖ (Login with gmail account)
-> User can access & read News only when the user is logged in with valid gmail account.
-> If they are not logged in, we won't allow them to access our news website.
-> Once they logged in, we will store it at local storage & need not to ask them every time.
-> We will ask for G O Auth again if user when logged out by themself last time. 

O Auth 2.0:
    - OAuth stands for "Open Authorization" is a standard designed
    - To allow a website or application to access resources hosted by other web apps on behalf of user.
    - OAuth provides consented access and restricts actions of what the client app can perform on resources on behalf of the user, without ever sharing the user's credentials.
    - An open protocol to allow secure authorization in a simple & standard method from web, mobile and desktop applications.
    - It is an industry standard protocol for authorization and focuses on client developer simplicity while providing specific authorization flows for each & every web, desktop, mobile phones applications & living room devices.
    - Instead of we build our own authentication system from scratch (userId & Password) for each websites etc. We can use this OAuth system.
    - Hey! We can login with Gmail, Linkedin, Github, Google, Microsoft account etc.
    - Building user authentication from scratch is a good thing but as a user experience it is quiet difficult to remember all 50+ website's passwords and all.

Principles of OAuth:-
    - OAuth 2.0 is an authorization protocol and NOT an authentication protocol
    - Authentication means Checking for userId & password - Login credentials
    - As such, it is designed primarily as a means of granting access to a set of resources, for example, remote APIs or user data.
    - OAuth 2.0  uses Access Tokens
    - Access Token:-  It is a piece of data that represents to access resources on behalf of the end-user.
    - OAuth 2.0 doesn't define a specific format for Access tokens.
    - However, in some contexts, the JSON Web Token (JWT) format is often used.
    - This enables token issuers to include data in the token itself. Also, for security reasons, Access Tokens may have an expiration date.

Roles of OAuth 2.0:-
    - The idea of role is part of the core specification of the OAuth 2.0 authorization framework. These define the essential components of an OAuth 2.0 system, and as follows:
        (i) Resource Owner:> The user or system that owns the protected resources and can grant access to them.
        (ii) Client:> The client is the system that requires access to the protected resources. To access resources, the client must hold the appropriate Access Token.
        (iii) Authorization (G-OAuth) Server:> This server receives requests from the client for Access tokens and issues them upon successful authentication and consent by the Resource Owner. The authorization server exposes 2 endpoints:
            1. Authorization endpoint
                - Handles the interactive authentication & consent of the user.
            2. Token endpoint
                - Involves in a machine-to-machine interaction.
        (iv) Resource Server (News Website - Local storage):> A server that protects the user's resources & receives access requests from the client. It accepts & validates an Access Token from the client & returns the appropriate resources to it.

Auth.js:
    - Refer news-website-app folder for this new React Project.
    - We need to do google authentication sytem, for that we should go to google developer console to get out own client ID & all.
    - Create a new prject at google developer console site.
    - After created name go to API & Services -> Enable API & Services
    - We want to use Google Services
    - So click on Credentials, click on Create Credentials -> OAuth Client ID
    - This client ID requests user consent so your app can access the user's data.
    - To create an OAuth clientID, you must first configure your consent screen.
    - So click on CONFIGURE CONSENT SCREEN button.
    - Why client ID?
    - Client ID is used to identify a single app to Google's OAuth servers.
    - If your app runs on multiple platforms, each will need its own client ID.
    - Select User Type as External and click CREATE button.
    - Edit app Registration (How this info presented to users?)
    - Here we can insert Company name & logo
    - Give Project Name, User support email & App Logo
    - Project Name: The name of the app asking for consent
    - User Support email: For users to contact you with questions about their consent
    - Logo: This is your logo. It helps people recognize your app and is displayed on the OAuth consent screen. After you upload a logo, you will need to submit your app for verification unless the app is configured for internal use only or has a publishing status of "Testing".
    - Developer Contact Information (mail): These email addresses are for Google to notify you about any changes to your project.
    - Now click on 'Save & Continue'.
    - Under Scopes, Test Users & Summary Tabs just click Save & Continue button and Back to Dashboard.
    - Now ur app is in Testing phase under Publishing Status. 
    - Click on Publish App button
    - Now it asks for Push to production?
    - You say confirm.
    - Again go to Credentials -> Create Credentials -> OAuth Client ID
    - It asks for Application type -> Web application
    -> Then give name as 'Web client 1' for the name of your OAuth 2.0 client. This name is only used to identify the client in the console and will not be shown to end users. 
    - [IMP] Authorized Javascript origins: For use with requests from a browser
    - Add URLs like http://localhost:3000 & http://localhost
    - Then give Authorized redirect URLs: For use with requests from a web server
    - Add URL like http://localhost
    - Note: It may take 5 minutes to a few hours for settings to take effect
    - Click CREATE button.
    - Now finally our OAuth ID created. We need to use this ID for this project only.
    - Kindly save it somewhere for project use. Below is my client ID
    - 441215130608-5jvm3sobckna1u36q6gvp9ojk9eoqvdv.apps.googleusercontent.com
    - If we miss our client Id also no problem, we can collect it agin under Credentials tab at Google developer console.
    - When we get our new project, we need to remove unneccessary files.
    - Make components folder to keep all components inside it.
    - Make assets folder to keep all images inside it.
    - import and export all components with App.js file.
    - Search 'login with google' & refer.
    - Now we have to use pre-built ones instead of creating it.
    - For that we are going to add dependencies which are pre-written codes.
    - We can view them in package.json file.
    - These like react, reactDOM etc. all are coming from npm website.
    - In npmjs.com, we have all our dependencies. This is a central repository for ReactJS, NextJS, NodeJS, AngularJS kind of Projects.
    - Every JS have npm packages with all dependencies.
    - Search react in npmjs.com search box. You will see the React package.
    - Earlier we used CDN link of React which gived pain to developers while coding pure React. 
    - So we shifted to bundlers in which CRA have these npm packages.
    - React is a JavaScript library for building user interfaces.
    - Now we can search 'react-oauth/google' in Google search engine.
    - To get OAuth dependencies, https://www.npmjs.com/package/@react-oauth/google
    - We don't need to understand how these packages work
    - We need to know how to utilize them that's it.
    - Copy right side code 'npm i @react-oauth/google'.
    - And paste it in terminal of VS code.
    - '"@react-oauth/google": "^0.11.1",' -> It appears in package.json file as one of dependencies automatically.
    - We need to refer https://www.npmjs.com/package/@react-oauth/google this page documentation for how to use them to get GOAuth.
    - We need to copy GoogleOAuthProvider & GoogleLogin codes and paste it in Auth.js file.
    SAMPLE CODE DEMO:-
            <GoogleOAuthProvider>
                <GoogleLogin 
                />
            </GoogleOAuthProvider>
    - GoogleOAuthProvider is a component inside which have props GoogleLogin
    - GoogleLogin is works as props. So it should be like <GoogleLogin />
    - We get credentialResponse as below:
        Logged In --> {
            credential: 'eyJhbGciOiJSUzI1NiIsImtpZCI6ImZkNDhhNzUxMzhkOWQ0OG‚Ä¶I4g-7BeBzEKTs5boEIa_ssDpV32xskkqwabIybSlu5F--pyVg', 
            clientId: '441215130608-5jvm3sobckna1u36q6gvp9ojk9eoqvdv.apps.googleusercontent.com', 
            select_by: 'btn_confirm'
            }

            clientId: "441215130608-5jvm3sobckna1u36q6gvp9ojk9eoqvdv.apps.googleusercontent.com"
            credential: "eyJhbGciOiJSUzI1NiIsImtpZCI6ImZkNDhhNzUxMzhkOWQ0OGYwYWE2MzVlZjU2OWM0ZTE5NmY3YWU4ZDYiLCJ0eXAiOiJKV1QifQ.eyJpc3MiOiJodHRwczovL2FjY291bnRzLmdvb2dsZS5jb20iLCJuYmYiOjE2OTA5MDY5MjcsImF1ZCI6IjQ0MTIxNTEzMDYwOC01anZtM3NvYmNrbmExdTM2cTZndnA5b2prOWVvcXZkdi5hcHBzLmdvb2dsZXVzZXJjb250ZW50LmNvbSIsInN1YiI6IjEwMzAxOTg0NDkwMDUwOTI5ODU4NSIsImVtYWlsIjoibW9uaW15dGhpbGk5N0BnbWFpbC5jb20iLCJlbWFpbF92ZXJpZmllZCI6dHJ1ZSwiYXpwIjoiNDQxMjE1MTMwNjA4LTVqdm0zc29iY2tuYTF1MzZxNmd2cDlvams5ZW9xdmR2LmFwcHMuZ29vZ2xldXNlcmNvbnRlbnQuY29tIiwibmFtZSI6Ik1vbmlzaGEiLCJwaWN0dXJlIjoiaHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUFjSFR0ZHF1Z3drWUk2eEFuLUtOWWp4M2RiTDMtZnBrR3RzQTd3RUdDdk0zMndZPXM5Ni1jIiwiZ2l2ZW5fbmFtZSI6Ik1vbmlzaGEiLCJpYXQiOjE2OTA5MDcyMjcsImV4cCI6MTY5MDkxMDgyNywianRpIjoiMTY3NjJkNzEwYmUwYzk1ZGI0OTUwYmZkMTJkOTY3YzExYzI0MmUwMCJ9.fmp5_icNBLje_-Q2RaRjyJh0wd_0HadAkOhcDfXJQoZEoS9kfj9DDLGiP7VDOHiiyqEuO6ZekVh4QjvSvWdXumJANwHw_rd9aiFfMKofDKuqRLcDu6NZMazGLVaytpVebICcriuiKP5j5NpdgRof73vTlNSXNIhiZO0LYZeEBTLQqFwnCY0wxd3g2-loNQhPvncq4CAtcirrFjop1YH5NsRwDGLVjBRsEHQm4KbLIOzRmtXMxpSt1BlyTH3vI0rhkra1ACagz_qwB2fKK3eQMGYP6v4FUaNSwnJxaI4g-7BeBzEKTs5boEIa_ssDpV32xskkqwabIybSlu5F--pyVg"
            select_by: "btn_confirm"
        [[Prototype]]: Object
        
    => Here 'credentials' is nothing but Token.
    - With this token, we are going to decode name, email, and password of the user.
    - We need to capture these 3 data before that we have to decode token.
    - JWT means passing the data/information via token.
  Q: How to Decode the token?
  A: For decoding this token also, we have a npm package called 'jwt-decode'.
    - Search jwt-decode in npmjs website, copy 'npm i jwt-decode' code.
    - Install that piece of code in your React project via terminal in VS code.
    - You can see "jwt-decode":'^3.1.2'; in package.json file of your React project.
    - Start to import jwt_decode from 'jwt-decode'; at your component where you use to decode.
    - You can refer npmjs site for jwt-decode.
    - Successfully decoded the encoded data using jwt_decode method.
  
  FRONTEND Process:-
    - First, we encoded the data, then we decoded the TOKEN (encoded data) successfully.
    - Encoding:- All Data is converted into one Token [ENCRYPTION]
  BACKEND Process:-
    - Decoding:- Token is converted into data [DECRYPTION]
    - In order to collect useful & required data (user's name, email & picture) from user's entire data.
    - We use stateVariable & its setter functino in useState Hook.
    - Then passing decoded token value into the state setter function.
    - We want to display the user's name, email & picture using state variable.

 Local Storage:- 
    - We going to store these 3 data by using state variable.
    - setItem things before return jsx statements in Auth.js
    - At User component receive props and get state variable's values.
    - At User component, return statement have fragments <>...</> instead of div jsx tag.
    - Inside fragment, instead of h1 jsx tag & then give some other tags needed.
    - We are going to pass information from user.js to auth.js file using 'props'.
    - If we don't have user's data at localstorage, then only we ask user to enter login detail.
    - If we have their data, we hide login detail from user.
    - Once you get data from localstorage, then only User component should be called.
    - If not having data, user component should not be called.
    - Initially, we set useState as false "".
    - Now after updation by setter function 'setUserData', it will set the rerendered values at localStorage.
    - Once you have data successfully stored at localstorage.
    - Next get the stored information from localstorage.
    - Once user logged in, we should not show again log-in details from line no 34.
    - We have to show only User component to users after logged in.
    {IMP}
    - If we have open a new tab with data already stored at localStorage, then we need to get data from LS & have to update state variable with it's setter function which retriggers & return User component values to UI by fetching from LS.
    - So to hide Login details, we use to check with condition that LS getItems are present to be true.
    - CONDITION: if we have name, email & pwd at LS, it means user is already logged in.
    - Decoded information names(Keys) and localStorage names are same(Values).
        setUserData(name:name, email:email, picture:picture)
    - Above code is bad way.
    - When Key and Value NAMES are same IN es6 we can write as one also which is valid too. As in production we frequently use like that.
        setUserData(name, email, picture)
    - If we open in new tab freshly start, 'userData' ==> local state variable will be empty.
    - If we open in new tab even after one month,, 'userData' ==> local state variable will get updated from LS using 'setUserData' setter function.
    - If userData get updated to be true, then call User Component.
    - If we don't have any data at LS, then only we will get Login details.
    - Checking whether n, e & p are !== undefined
        Eg to check truthy value:- 
            const name = undefined;
             if(name){
                console.log("if");
             } else {
                console.log("else");
             }
        Output:- else
        Reason:- As name is undefined/null/zero (falsy value), it will execute else condition.
    - In ES6, line no 37 at Auth component, we can write as setUserData({ name, email, password })
    - As per ES6, if we have name & value both are with same names, then we can write as one name.

Log Out Feature:-
    -> On click of Log Out button, we will just clear the local storage information.
    -> How? localStorage.clear(); & we should redirect to initial position of the same page.
    -> To redirect, we use window.location.assign instead of useNavigate() Hook.

ü™Ñüö© SHORTCUT: Redirect to Component's file by CTRL + click on componentName from it's parent component.

Saving Gmail user's data values at localStorage in React:
    - NOTE: Here No parse and stringify for just values to store.
    - As we know parse and stringify are used only for json * Object typeof data.
    - setItem
    - getItem

ReactStrictMode
    - <ReactStrictMode></ReactStrictMode> in index.js file
    - React is very intelligent & evolving library.
    - They will try to suggest or restrict something
    - When u put React project in strict mode, each components will call for two times
    - Why it calls twice to check if ur component is pure react or not?
    - So strict mode offers you to check like other details(feature).
    - This is React's best feature.
    - When u work & build a project in individual development size, usually we don't care about strictmode.
    - StrictMode is taken care when we works at production build code which shares across the world.

How to create a new React Project at console?
    - Go to command prompt (black screen)
    - Type 'code .' to get into VS Code
    - Type (make directory/folder) 'mkdir project-folder-name
    - Type (change directory) 'cd project-folder-name
    - To create a React Project, type 'npx create-react-app new-website-app'
    - Press Enter & cd new-website-app
    - npm start
    - ü™Ñüö©SHORTCUT: To stop terminal, press ctrl+c represented as ^c in terminal.

FAQs:
    1. Which npm package we used to integrate Google OAuth?
    A: @react-oauth/google - {GoogleOAuthProvider, GoogleLogin}
    2. Which npm package we used to decode the response?
    A: jwt-decode - jwt_decode()
    3. Where we have saved our user data info?
    A: localStorage - setItem & getItem
*********************************** AUTHENTICATION PART ENDS *********************************************

Day 58 : 01.08.2023 -----------------------------
Curriculum: Connecting to Backend | Project - 1 Completing | Building News Website
Sub-topics: 
    -> HTTP requests in React
    -> Installing & understanding Axios
    -> Fetching data from Server
    -> Handling Network Errors
    -> Reference Materials
        * Frontend vs Backend: https://www.pluralsight.com/blog/software-development/front-end-vs-back-end
        * Http Requests: https://javascript.plainenglish.io/the-4-http-request-types-you-need-to-know-about-b15af2ae54
   - Build a news website
   - NavBar
   - News Section 
__________________________________________________

Build a news website => NavBar:-
   -> NavBar (Header.js) consists of logo HOME GOAuth & Log Out Button
   -> User component has Header component & pass props as data to Header component.
   -> üö®What is Props drilling?
   -> 1stly, From Auth component we render User component.
   -> Then we also Pass props from User component to Header component as data.
   -> This is called as Props drilling.
   -> Props drilling means we take data from one component(Auth) to its child component(User).
   -> From User also we rendering & calling a component (Header) to which we again passing the same information as data.
   -> Passing informatin indirectly called as prop drilling

News Section:-
    -> We fetch news from API call and make search bar to search news related to topics.
    -> To get google news api, we need to go to https://gnew.io/dashboard
    -> API Key should be changed for each time usage: https://gnews.io/api/v4/search?q=india&lang=en&country=us&max=10&apikey=427bf738f7f568e213071713f4a8dbee
    -> Now we will do API call at NewsComponent.js
    -> We will take help of useEffect, Async-await & Immediately invoked function expression to fetch API data & then json it.
    -> After that we utilize useState variable & setter function to get updated & rerendered News to UPDATE STATE VARIABLES.
    -> As our response is in Array format, we pass empty array at useState initially.
    -> This API returns totalArticles & articles in array.
    -> So we set our newsData using setter function.
    -> In useEffect, we pass empty array as 2nd parameter.
    -> üì¢Don't forget to call IIFE function of API by adding '()' brackets after IIFE function.
    -> If not added, we get below error.
    -? [eslint] src/components/NewsComponent.js
    Line 7:5: Expected an assignment or function call and instead saw an expression no-used-expressions
    -> In NewsComponent.js, we use to render using map on stateVariable newsData instead of rendering NewsCard component multiple times.
    -> üö®While getting data directly from API call, don't forget to use "optional chaining" while mapping on API state variable.
    -> Optional chaining in Javascript is used to map only when the data is available from API call.
    -> Optional Chaining (?.) checks for data is available and then only do map on API state variable.
    -> It is an operator accesses an object's property or calls a function. If the object accessed or function called using this operator is undefined or null, the expression short circuits & evaluates to undefined instead of throwing an error.
    -> Why Optional chaining?
    -> Sometimes during API call the data will not available due to delay in server-side processing or internet connection slow etc. 
    -> At that point of time, we should not iterate over an empty array (map on empty array -> state variable).
    -> In order to make sure (?) that the state variable having data with it & then only we should iterate over that data.üö©
    -> So in NewsComponent.js file, we call an API data & capturing that data in state variable by updating data in state setter function.
    -> We are mapping state varible which has all data to render then on UI fo that we passed data as props to NewsCard component.
    -> We are running a loop on state varible which is an array & everytime we returning as NewCard component.
    -> So that we receive data at NewsCard component and utilize data to render on UI/webpage.
    -> Inititally useState array will be null/empty, what will happen in this case it'll say map is not defined.
    -? This throws an error like Uncaught: TypeError: stateVariable.map is not an function
    -> To overcome this error, we use optional chaining (?) to iterate over empty array which passed as argument to useState.
    -> In order to handle undefined or null conditions, 
    -> But we have to handle this kind of errors & all we are just putting this question mark.
    -> If my null array added to state variable (newsData) [ERROR], then do not iterate over it. 
    -> If my data array added to state variable (newsData), then only iterate over it. 
    -> useEffect will be called once after 1st render of NewsCard. 

Search Bar Feature:-
    -> Create an input tag at NewsComponent & give some style in object 2nd way of styling.
    -> NOTE:- Only for inline CSS we give 2 {{}}. For object CSS, we use only 1 {ObjName} at JSX & outside return statement within function we give an let ObjName={color: "#ccc", bgc:"white"}.
    -> Then we create a state variable using useState for search text given by user.
    -> To re-render news based on user input.
    -> For that we create a state variable & state setter function.
    -> We pass initial value at useState() as string & change url with backticks to make a template string.
    -> In that template string, we use ${search} to get stateVariable's value [state variable => search]
    -> Now on user input change, we need to re-render news related to user search input.
    -> For that, we need to use setter function onChange of input pass an event to arrow function with that we will update setter function using e.target.value.
    -> Here e.target means input tag
    -> So e.target.value means input tag's value given by user.
    -> In useEffect, we gave 2nd parameter as Empty array.
    -> This leads to useEffect not getting triggered on user search input after pressing enter.
    -> This useEffect triggers only one time as it's 2nd parameter has empty array.
    -> Refer 308 page in FSR ppt of sir's 3 cases for useEffect()'s 2nd parameter [dependencies_Array].
        (1) If we don't have 2nd argument (array), then setup function called only once after 1st render & every time same occurs when state & prop changes.
        (2) If we have empty array = [], then setup function called only once after 1st render.
        (3) If we have some state variable (in this case search) in [], then setup function called only once after 1st render & after any change in given state variable.
    -> We need to give the state variable as per above 3rd condition, to change news data according to user input.
    -> What we want is everytime User changes input at state variable (search), useEffect should call this callbacks.
    -> So we mention state variable 'search' inside empty array as 2nd argument of useEffect hook.
    -> So whenever user types input and press enter, useEffect called and then hit an API which will give latest news information based on typed user current input.
    -> By default, we given "tech" news to render from API at useState by passing as argument.
    -> search stateVariable is dependent on dependencies_Array of useEffect.

Steps to check Test API works:-
 => API Check is working or not after 100 attempts of refreshing and calling it.
 => After inspect ur web page, under Network tab, go to leftside Name tab & select ur API 
 => Then rightSide we find Response tab where it shows any error occurs for Test API or shows API data if success.
 => Under Headers tab, we can check even status code as 200 means success, 403 means error -> failed to call API as API reached 100 times limit in gnews.io dashboard / exceeded the limit.

Calc function in css:-
 => calc(75vw / 2); -> This makes our search bar position at center of the system screen.
 => 1vw = 10px
 => 150vw = 1500px
 => Here 
    - vw -> viewport width
    - px -> pixel

Change in Date format:-
 -> This publishedAt is not in readable format.
 -> Below code gives error due to date is in Object
    let date = new Date(props.data.publishedAt);
    return(<h6 className="card-timestamp">{date}</h6>);
 -? Uncaught Error: Objects are not valid as a React child (found: [Object Date]). If you meant to render a collection of children, use array instead.
 -> To overcome this error, we add .toString() to the {date.toString()}

Flow of components in News Application Project:-
    * App -> Auth -> User -> Header & NewsComponent -> NewsCard

Day 59 : 02.08.2023 -----------------------------
Curriculum: Routing (Next.js routing technique needs to be taught)
Sub-Topics: 
    -> Setting up React-Router
    -> Links instead of anchor tag
    -> Routes with Route components
    -> Passing Route Parameters
    -> Redirecting requests
    -> Conditional redirects
    -> Handling 404 
   -  Important Extensions
   -  What is routing in general?
   -  What is URL & important things?
   -  How to do Routing in React JS?
   -  Which npm package to use for Navigation[Redirection] & params?

Time Stamp: [01:26:09]
__________________________________________________

Important chrome Extensions:-
    (1) React developer tool
        -> If we go to any websites like Instagram, airbnb, Edyoda digital university etc. running on React code, after pin extension up on web browser extension's color changes from White to Black background.
        -> This extension is very helpful to know which website is built with React code.
        -> Even we get components list at browser's inspect area.
    (2) JSON Formatter
        -> This extension helps to view JSON in Parsed neat manner.
    (3) Wappalyzer - technology profiler
        -> This extension tells us what technology & what frameworks are used to built their platform.
        -> In airbnb website, we can able to view all technologies & frameworks they used.
    (4) Pesticides for Chrome
        -> Structure of HTML & CSS
    (5) Colourpick Eyedropper for CSS

Routing:-
    -> It refers to the process of determining how the application should respond to a specific URL or path entered by a user in their web browser.
    -> URL (Uniform Resource Locator) is a string of characters that provides a way to identify a resource on the internet and specifies how to retrieve it.

Important things in a URL:-
    * Scheme/Protocol: 
        -> This specifies the protocol or method used to access the resource. 
        -> Common examples include: "http", "https", "ftp", "mailto" & "file".
    * Domain/Host:
        -> This is the domain name or IP address of the server where the resource is located.
        -> IP address can be fetch from command promp black screen.
        -> Every Domain Name has IP address & can be fetch using it's IP address also.
        -> To get IP address of google.com / facebook.com, we use cmd prompt 'ping google.com' command in windows.
        -> For MAC 'nslookup google.com' -> This command will tell exact IP address of google.com.
        -> Ex- google.com, fb.com etc.
        -> Now-a-days fb, insta are not allowing[Restricted] to access their site via IP address which is good.
        -> Companies can restrict this power to access via IP address.
    * Port:
        -> This optional component specifies the port number to connect to on the server. 
        -> There 65,000 ports are there.
        -> Some ports are free. 
        -> Some applications like MongoDB, postgres runs on different ports which have reserve ports in our system.
        -> Every application runs on several ports in any specified port.
        -> When we do npm start, our React application runs on 3000 port.
        -> If 3000 is busy with running some other project, then asks for user permission to open in other port like 3001.
        -> Ex: 3000, 3001, 8080 etc.
    * Path:
        -> The path represents the specific location of (application) the resource on the server's file system or within its structure.
        -> Path is to find which page of site.
    * Query Parameters:
        -> These are optional key-value pairs that are appended to the URL after a question mark "?".
        -> Query Parameters will be after ?q= whatever we search in google will attach after ?q=

Routing Techniques in React JS:-
    -> Routing refers to the process of navigating betweeen different web pages.
    -> Technique for Routing in React slightly changes.
    -> But Routing in React refers to the process of navigating between different components or pages of a single page application (SPA) without actually loading a new (only ONE) HTML page -> index.html in our each React project.
    -> 'React Router DOM' (Library) is a popular & famous npm package used to implement routing in React applications.
    -> Router is not like a tag but kindof anchor tag.

URL:
    Eg:-
    https://www.flipkart.com:8080/products/widgets?category=electronics&page=2
    Breakdown:
        Schema/Protocol (Hidden but it's there when we copy paste visible): http (or) https
        DomainName/Host: flipkart.com
        Port: 8080
        Path (Routing): /products/widgets
        Query Parameters [after ?]: category=electronics&page=2

Example Code:-
    - 1st we need to download & install npm package known as 'react-router-dom' from npmjs site.
    - Copy this piece of code from site 'npm i react-router-dom' & paste in VS code terminal after ur Project folder name.
    - To come outside of current folder type cd ..
    - After installation, we can check at package.json file under dependencies "react-router-dom": "^6.14.2" is installed.
    - The react-router-dom package contains bindings for using React Router in web applications. Please see the Getting Started guide for more information on how to get started with React Router.
    - First, we need to go to index.js
    - In index.js, we need to wrap this App component with something called as BrowserRouter like below:
                <BrowserRouter> 
                    <App /> 
                </BrowserRouter>
    - So we need to import BrowserRouter from react-router-dom
    - Now come to App component & import Routes & Route from react-router-dom
    - Then add Route as component inside Routes component inside return JSX.
    - In Route, we pass path & element as props.
    - If you Route path is /, display Header component via element.
    - Here '/' means "http://localhost:3000/", then display Header component.
    - If you Route path is /sachin, display Sachin component via element.
    - If you Route path is /dhoni, display Dhoni component via element.
    - If you Route path is /kohli, display Kohli component via element.
    - If you Route path is /rohit, display Rohit component via element.
    - Path & elements are kind of attributes which are props passed through Route component to its children.
    - But one problem is there, while all this redirections loading to new HTML page also occurs.
    - In React, components should not reload as React is SPA (Single Page Application) do not reload page.
    - It should not reload the entire page.
    - If a page reload can be found by carefully look reload symbol changes from reload symbol to X symbol. Then again to reload symbol.
    - üîÑÔ∏è-->‚ùé-->üîÑÔ∏è
    - React was all about creating single page application without reload the entire page again & again.
    - Reloading the pages is not allowed in React.
    - But here it is happening because of anchor tag.
    - By default, <a></a> tags refresh/reloads a web page when redirecting from one page to another.
    - To overcome this in React, we have link which also comes from react-router-dom.
    - So we replace anchor (html) tag with Link (jsx) tag which have 'to' props which have path instead of 'href' attribute.
    - Now components/pages are redirecting without (NOT) refresh/reload.
    - But we see a surprise that in DOM at Web Browser under Elements tab after inspecting that page.
    - We see Link changes automatically into anchor tags finally.
    - But Link will not refresh ur page which is similar to airbnb website built with React code.
    - If unknown path is given, we need to create 404 Not Found page.
    - For that we put * in it's route's path.
    - Here * means everything other than mentioned Routes, should shows not found.

Nested Routes:-
    - Nested Routes example car with model & color component.
    - In Car component, we use ul > li > Link tag with "to" for color & model.
    - We also created Car Model & Car Color which are child component of Car component.
    - So instead of creating both seperately at App component, we created Nested inside Route of Car component.
    - As Color & Model are part of Car, we nested them inside Car's Route.
    - After this also only path changes, we cannot view Color component's things or Model Component's things at Car Website Page.
    - [IMPüö®] Because we need to do one more thing  called "Outlet" should be import from react-router-dom & added at Car component always at last after all tags.
    - And Beauty of this is when u click color or model, car will also appear along with it due to nesting & outlet from npm package.
    - Here Outlet says this parent component [Car] + it's child component [Color or Model]
    - [IMPüö®] To Add & import 'Outlet'in Nest Routes to render component in same page of it's parent. Otherwise only it's path will change.

useParams Hook:-
    - Create a User component at Header Component.
    - After clicking User, it shows as Oops! URL is Wrong.
    - Why? As no User component available at this time + no route defined for slash user (/user) at App component
    - After creating componet & route for user. It displayed.
    - Now we need to add some params like https://localhost:3000/user/Monisha
    - Monisha is not Route/path, it is just a param what user searches in search bar.
    - Or when you go to your profile page URL added with your userName.
    - [IMPüö®] To pass Params, we need to add /:param 'colon' after a slash then userId, userName etc.
    - Eg:- 
        <Route path="/user/:userId"
    - If you remove ":", then it becomes Route.
    - After adding ONE param, we can't use https://localhost:3000/user only.
    - This from now will give Not Found component thing. ("Oops! URL is Wrong").
    - In order to grab random value after /user/, we add a hook called "useParams" at User component.
    - SYNTAX: (Inside function before jsx return statements)
        const params = useParams();
        console.log(params);
        console.log(params.userId);
                [OR]
      // Better syntax
        const { userId } = useParams();
        console.log({ userId }); // {userId: Monisha}
        console.log({ userId }.userId); // Monisha
    - We can also add many params at same time.
    - MULTIPLE params:-
        -> Eg: <Route path="/user/:userId/:userName" element={<User />} />
        -> Make sure seperate each params by "/:"
        -> After adding MULTIPLE params, we can't use https://localhost:3000/user/Monisha only.
        -> This from now will give Not Found component thing. ("Oops! URL is Wrong").
        -> We need to give complete path with all Params also.
        -> Eg for URL: https://localhost:3000/user/4444/Monisha
            const { userId, userName } = useParams();
            console.log({ userId, userName }); // {userId: '4444', userName: 'Monisha'}
            console.log({ userId }.userId); // 4444
            console.log({ userName }.userName); // Monisha
            return (
              <>
                <h1>User Page</h1>
                <h2>User Id is {userId}</h2>
                <h2>User Name is {userName}</h2>
              </>
            );
    - Query Parameter is divided by q= after ?
    - This params is different from Query Params.
    - How we will check if it is not route?
    - Go to App component & check for colon & then say no it is not route. It is Param.
    -> At User component, we destructure keys using params.
    -> This useParams will return us as an Object which consists of id, name, and country.
        eg:-   const { userId, userName, userCountry } = useParams();
               console.log(useParams());

useNavigate Hook:-
    -> If user use wrong URL, we wait for 2 seconds with display Not Found component & then we redirect user to Header page (HOME PG) after 2 seconds.
    -> For that we need to use 2 Hooks in NotFound component.
    -> One is useNavigate & another is useEffect to make setTimeOut (2secs delay).
    -> Eg:- 
            import React, { useEffect } from 'react';
            import { useNavigate } from 'react-router-dom';

            export default function NotFound() {
                const navigate = useNavigate();
                useEffect(() => {
                    setTimeout(() => {
                        navigate("/");
                    }, 2000)
                })
                return (
                    <>
                      <h1>Oops! URL is Wrong.</h1>
                    </>
                );
            }
                            [OR]
    // This below code is also correct but it displays count at UI.(2 -> 8)
    // To avoid this we use as above code with useEffect() hook.
            export default function NotFound() {
                const navigate = useNavigate();
                return (
                    <>
                      <h1>Oops! URL is Wrong.</h1>
                      {
                        setTimeout(() => {
                            navigate("/");
                        }, 2000)
                      }
                    </>
                );
            }

useEffect Hook:-
    - useEffect hook not only used for API call but also used for setTimeout() & many others.
    - With useEffect we can use lots of things not just API call & setTimeout().

Avoid to make silly mistakes like below:-
    - Don't forget to import Link, Outlet, Routes, Route, useParams hook & useNavigate hook within {} as they are built-in name exports from react-router-dom npm package.
    - Use Link instead of anchor tag in React.
    - As <a></a> tag will reload/refresh our page which we don't want to occur, to avoid it we use Link along with to props instead of href attribute.
    - We should use useNavigate hook to redirect without reload page instead of window.location.assign which will refresh our React (SPA) component/page.

SHORTCUTS:-
    - command + click on child component name from parent component in MAC
    - ctrl + click on child component name from parent component in Windows to redirect from parent to child component immediately.
    - We use ctrl + c to stop the VS Code terminal server immediately in Windows using GITHUB
    - Another Git commands are:
        -> To go back from current folder, type "cd .."
        -> Then type "your GitHub folder name"
        -> To bring & open that folder into VS code, we type "code ."

CONCLUSION:-
    - We used 2 hooks with react-router-dom downloaded & installed in our React Project at package.json under dependencies from npm package (npmjs site).
    - useParams used in User component & useNavigate used in NotFound component.
    - We are going to build Responsive HTML & CSS website along with Google Keep in REACT but not using Tailwind CSS/Material UI only with normal CSS external files & some context API also.


Day 60 : 03.08.2023 -----------------------------
Curriculum: Forms | Prop Types | Movie Booking Form and Sending Email Confirmation
Sub-Topics: 
    -> Controlled and Uncontrolled Components
    -> Sending data to Server
    -> Deleting data on Server
    -> Code Structure
    -> PropTypes
    -> Conditional redirects
    -> Handling 404 
   -  Important Extensions
   -  What is routing in general?
   -  What is URL & important things?
   -  How to do Routing in React JS?
   -  Which npm package to use for Navigation[Redirection] & params?

Agenda:- [Time Stamp: 00:46:04]
    -> What is Form and when to use it?
    -> How to build & handle forms in React JS?
    -> Let's build Movie Booking Form
    -> Send an email on successful ticket Booking
    -> Discuss about Formik library
    -> What is PropTypes in React?

Time Stamp: [01:40:07] about undefined for props not defined in React overcome by PropTypes.

Reference Material:-
Forms in React.js: https://legacy.reactjs.org/docs/forms.html
PropTypes: https://legacy.reactjs.org/docs/typechecking-with-proptypes.html

Pre-Watch Videos: 
    1. Forms | PropTypes: https://classroom.edyoda.com/program-modules/FSR310323/React/38115/?type=topic
__________________________________________________
What is Form?
    => A form is a crucial part of web that allows users to input and submit data to a server.
    => Forms are used for various purposes, such as user registration, login, data submission, and more.
    => A form typically consists of input fields, checkboxes, radio buttons, dropdowns, and buttons for submission or reset.

How to build & handle forms in React JS?
    => Data input wise like how we use to put user data in that form those things will be exactly same 
    => But how we handle data by taking those data, how we use state variables and change the state & all is very important thing to know.
FormData (let's build a Movie form):-
    - We will build movie form from which collects data like name email address & time & no.of tickets. 
    - Once user submit our form, we trigger an email to user's mail address given in movie form on ticket booking confirmation.
    - Once we created a form, we cannot type in input due to value attribute was given as empty strings.
    - In order to type input, we create state variables by useState Hook.
    - Initial value we set as an object with sample values at useState() argument.
    - But still we can't see or type in input area as we given value attr as "".
    - Now we give attr value as {formData.name} etc. using state variable.
    - Then we able to see the sample values at UI.
    - But still we can't enter anything, because when user types input tag's onChange event is triggered.
    - Still we didn't defines new values onChange handleChange() function.
    - So we cannot give input by typing.
    - Now we console log event at handleChange function, we can see our typed letters are shown at console.
    - Here e.target means target event at which tag
    - And e.target.value means targeting value of tag after it's event takes place.
    - Now we can Destructure our props (attr) as they are located inside e.target which has those values.
    - Why default initial values stick with new values still because we didn't update our state (function value).
    - When we update our state, then it will change.
            setFormData({ name: value });
    - Now the problem is if we update UserName & then email both are getting same updation.
    - As we updated only name in setter function.
    - To overcome this problem, we give callback [Arrow function] to setter function.
    - We just spreading our prevData object & updating new values.
    - If you don't update state setter function, new values will not updates at UI.
    - Line no 15 is spread operator in MovieBookForm.js 
    - In prevData, we update only name.
    - In const {name, value}, name denotes all keyNames (name, email, movie, time, tickets) comes from input tag's attribute name.
    - eventValue denotes all key's values.
    - How we update our state variables?
    - Whenever we have objects, we don't just update our current varaible.
    - We use to take all the previous data of object by using spread operator so that prevData should be there. 
    - We will just change its name with some other value.
    - Then why we are in need of square barckets [name].
    - Is this neccessary?
    - So whenever we start typing at username, it writes but when comes to email and type means it is not changing.
    - Without [] name variable, e.target's name variable becomes local variable only for object's 1st key & do not update individually for other keys.
    - If we do not put name variable within [], it'll change before variable's value too along with current one.
    - So finally conclusion is that input tag's name attribute's value is passed as object keyNames at useState hook.
    - That we destructured at e.target & used to update state setter function.
    - üì¢ In order to update each key individually, we need to pass genral keyName within array [].
    - Every field should have a unique name in a form to type values in each field individually. Without causing problems to other input fields.
    - We don't want to hardCode obj's key everytime.
    - We want particular value to be changed based on which e.target name attr's value as key at useState.
    - So if we do not want to just give as a key, we will provide in an array to give it's value [username / emailId / movieName / timeVal / ticketNum] = [name]
    - It is actually Javascript concept,
            const obj1 = {
                name: "Monisha",
                email: "moni@gmail.com",
                movieName: "jawan"
            }
            name = "email";
    - To update above object, 
        const obj2 = {...obj1, name: "monisha@gmail.com" }
        console.log(obj2);
    - Output:
        {
            name: "monisha@gmail.com",
            email: "moni@gmail.com",
            movieName: "jawan"
        }
    - Now if we see clearly that 1st key's value got changed into new email address.
    - But we want 2nd key's value to be changed with new email address
    - For that we enclose name within [] while updating above object.
    -     - To update above object,
        const obj2 = {...obj1, [name]: "monisha@gmail.com" }
        console.log(obj2);
    - Output:
        {
            name: "Monisha",
            email: "monisha@gmail.com", => This exactly changes
            movieName: "jawan"
        }
    - So this general name should be used as a value. So I will drop in the array.
        // This[name] is just = "email" key here.
    
How to stop Refresh Page when we submit out form by click?
    - Refresh a page happens due to default behavior of submit form button.
    - Use e.preventDefault();
    - This will prevent the page from getting refresh by default.

Trigger a mail after click event from ReactJS application:-
    -> Using npm package emailjs-com deprecated from npmjs site but we still can use it. 
    -> Need to install 'npm i emailjs-com' at ur React Project in VSCode Integrated terminal.
    -> Create an account at https://emailjs.com site with Login Credentials.
    -> Your Name: Monisha | Your Email: moni97kumar@gmail.com | Your Password: Moni97sha$
  Under Email Services:
    -> Click on Add a service button => Select Gmail => Click on Connect Account button => GAuth opens select Your Email in which u registered => Check this checkbox "Send email on your behalf." => Then click on Continue => Click Create Service button
    -> Service is now created with Service ID
    -> We can even refer https://emailjs.com/docs/examples/reactjs/ site.
  Under Email Templates:
    -> To create a new template, click on Create New Template button
    -> We need to give subject with content.
    -> Always give values of names given same as per our code variables for: to, from, message & reply_to(mailId) are enclosed within {{}}.
    -> Now we give input tag's name attributes (keyNames) accordingly.
  Email Template/Format:- 
    [Left]
    Subject: 
        Movie Booking confirmation {{from_name}}
    Content: 
        Hello {{username}},
        ¬† Your movie {{movieName}} booking confirmed with {{ticketNum}} number of tickets. Enjoy your Movie {{movieName}}!!
        //{{message}}

        Best wishes,
        Monisha S
        [CEO of BookMyCinema]
    [Right]
    To Email (Sender email address)
        moni97kumar@gmail.com IMPORTANT to change into {{emailId}}
    From Name
        Monisha
    From Email
        Checkbox: Use Default Email Address
    Reply To
        {{reply_to}}
    Bcc
        {{otherMailIds who need to reply or acknowledge it}}
    Cc
        {{otherMailIds who we need to only view}}
    
    -> Click on SAVE button.
    -> Now very important things to be noted are API key under General tab, Service ID under Email Services tab & Template ID under Email Templates tab.
    -> After npm pkge installation, need to import at MovieBookForm.js 'import emailjs from "emailjs-com";'
    -> Only with Service ID, Template ID, form.current => e.target, API key passes as argument of response= emailjs.sendForm() by making form tag's onsubmit function as async-await function. Refer documentation.
    
OUTPUT at Console on click of "Book Ticket" button:-
    => Email sent successfully 
    => EmailJSResponseStatus¬†{status: 200, text: 'OK'}
    => status: 200
    => text: "OK"
    => [[Prototype]]: Object

    -> This emailjs (only Learning feature) is not suitable for production applications as it is free tier & very easy to code.
    -> For production purpose, there is something called AWS(Cloud Provider) SES (Amazon Simple Email Service) is a real-time implementation using paid-account for sending email addresses automatically.
    -> We can send only emails to verified number / email addresses.
    -> Even for AWS SES, they have documentation "Getting started"
    -> Even we can google and learn "Aws ses nodejs send mail"

CSS Animation on Form after Submission:-
    -> On click of Book Ticket button, className of form Tag is changed from movieBookingForm to submitted.
    -> For that, let's define a state variable submitted using useState Hook.
    -> If submitted state variable is true after email sent successfully, then add submitted class to form tag.

How to add React project in Github as new repo?
    -> Create a normal Repository and copy the https link and come to vscode terminal and go to a folder by change/make directory (cd/mkdir) here directory means folder and type 'git clone (https link)'
    -> Then type cd UrProjectName
    -> Then create ur React App using command 'npx create-react-app moni-app'.
    -> Now we can code a project inside 'cd moni-app' using VSCode.
    -> Before upload 'cd ..' to come back to main folder UrProjectName from moni-app.
    -> And upload in Github clone folder using 'git add .'
    -> Then type 'git commit -m "message"'
    -> Then type 'git push origin main/master'

Day 61 : 04.08.2023 -----------------------------
Curriculum: PropTypes | React Production Build | Cloud | Deployment Netlify | Project - 2 | Part -1 | Building Responsive Navbar
Sub-topics: 
    -> ES6: Async and await
    -> Creating a Production Build
    -> Practice Problems + Thought Process + Coding Challenge
    -> Promises
Production Build: https://www.copycat.dev/blog/reactjs-build-production/
Async Await: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function
   - üö®PropTypes in React [Refer in my-app folder]
        Refer for PropTypes: https://www.npmjs.com/package/prop-types/v/15.8.1       
   - Code in PropTypes
   - Kickstart Project 2 [refer in Project2 folder]  [Time Stamp: 01:22:17]
   - Part-1 Building Responsive NavBars in React
   x Let's talk about Production build
   x Deployment on Netlify

__________________________________________________

Glimpse of AWS [Trending & Marketing]:-
    -> AWS Account Creation & debit card from scratch
    -> If you want to create AWS account, we need to give debit card details & they will deduct Rs.2 and after 7-10 days refund that 2 rupees back to our account.
    -> Just to check you're valid user or not.
    -> We have to consume free tier products and after 10-12 months close your account before getting expired.
    -> How to Create & close your AWS account?
    -> Every services of AWS a developer cannot master
    -> They just learn some of the services like S3, vc2s, ctl Lamda etc. & implement it.
    -> As AWS is vast like ocean. Everyday new features will be introduced.
    -> But as a developer what we should know in AWS will be teach by sir.
    -> At Production level, we use only AWS to deploy our project codes.
    -> Not Github or Netlify.

Last Project by Sir:-
    -> Chat Application in React with 50-60 lines of Backend Code
    -> This application consists of both Front & Back End parts of code.
    -> In NodeJS module, we will make another project like Group Chat & One-on-One chat application like Whatsapp service.

Example code & uses for PropTypes:-
    -> At user component file, we are passing 1000 as string for salary and adding number 200 with it.
    -> Both "1000" + 200 => 1000200 gets concatenated together. (Not added)
    -> Which not even tells as error at browser console & VS code terminal also. 
    -> 1000's of components in same project is simple now-a-days.
    -> Sir currently works on 2000 no.of components
    -> In that cases, it is very difficult to know what goes wrong which can become weird thing when we run big applications with lots of components.
    -> To overcome it, we have defense mechanism (PropTypes) which can check what goes wrong
    -> Even in case of not passing props from parent component, no error reflect only at UI get NaN.
    -> This is really bad code without PropTypes as we don't have any defense mechanism to cross check our small mistakes at Production level. Debugging them will be worsens.
    -> Like this name, salary are required must. Without passing them error should occur.
    -> Now after installation of proptypes, use its method by importing it.
    -> import PropTypes from 'prop-types';
    -> Method: ComponentName.propTypes = {name: PropTypes.string.isRequired};
    -> Now we will get error for 1000200 at browser console.
    -? ERROR: "Warning: Failed prop type: Invalid prop 'salary' of type 'string' supplied to `User`, expected `number`. 
    at User 
    at App
    -> To overcome this warning, we pass salary prop as number within {}. And instead of concat now it adds.
    -> Now is we don't pass one of props value, React should warn me atleast.
    -> But not warning as we didn't mention them as required one.
    -> If I say as isRequired at User component. Now if we miss country props to pass, it will warn us.
    -? Warning: Failed prop type: The prop `country` is marked as required in `User`, but its value is `undefined` at App component.
    -> After adding isRequired to the user component of country prop, now it will clear warning.
    -> Not passing props also gives below error as warning.
    -? react-dom.development.js:86 Warning: Failed prop type: The prop `info` is marked as required in `User`, but its value is `undefined`.
    at User (http://localhost:3000/main.799f69ecf88cdd14375e.hot-update.js:41:3)
    at div
    at App 
    -> Now we created id for each user, for one user id with string type within "str" & another with number type within {7}.
    -> Sometime type of id can be changed. So we use oneOfType([PropTypes.string, PropTypes.number]) function within array we pass what types for type flexibility like below code:
        User.propTypes = { id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]) }
    -> Instead of above code, we hardcode it as {id: PropTypes.string} & passed as number type, then we get warning as below:
    -? Warning: Failed prop type: Invalid prop 'id' of type `number` supplied to `User`, expected `string`.
    -> Now for gender we have only 2 options male or female: So we have to use oneOf function in PropTypes.
        Code:   gender: PropTypes.oneOf("male", "female").isRequired -> This code is without [] in oneOf[]
    -? Warning: Invalid arguments supplied to oneOf, expected an array, got 2 arguments. A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z]).
        Code:   gender: PropTypes.oneOf(["male", "female"]).isRequired -> This code is for 3rd "other"
    -? Warning: Failed prop type: User: prop type `gender` is invalid; it must be a function, usually from the `prop-types` package, but received `undefined`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.
    at User (http://localhost:3000/static/js/bundle.js:141:3)
    at App
    -> If we give extra 3rd option as other which is not provided at user component, then it shows as below warning.
    -? Warning: Failed prop type: Invalid prop `gender` of value `other` extra supplied(passed as props) to `User`(child) from `App`(parent), expected one of ["male","female"].
    at User (http://localhost:3000/static/js/bundle.js:141:3)
    at App
    -> gender only can be either "male" or "female; It cannot be other than these.
    -> To show this as warning we use oneOf function in PropTypes.
    -> CONCLUSION: So using this PropTypes, we can restrict our codes & get some warnings wherever go wrong.
    -> Remember GoogleLogin was one open source component which was developed by senior coders.
    -> They highly provide codes for world to use freely using PropTypes.
    -> We also have shape function which shapes an object in particular each keys. (refer in website)
    

Need of PropTypes:-
    -> In Javascript, we don't need to tell type of variables statically.
    -> Typescript developed by Microsoft Corporation 
    -> In Typescript, we can define what should be variable type as well like c, c++, Java etc.
    -> Now we can decide the type of the props should be passed from parent components.
    -> If we want salary to be type of number but passed as string, that time react will throw some error.
    -> Code expects salary to be number but passes as string & if we not even passing then that time also it will throws error. 
    -> Facebook develops React & prop-types npm packages
    -> If you do not put PropTypes in code, then ur code will behave in unexpected way. [Unexpected Behaviours]
    -> When ur no of lines of code grows from 10 to 10,000 lines, then it will hard to manage ur code.
    -> This makes sense of provide as we want.
    -> Real life scenario: A person lending Rs1000 to B. Then B returns Rs500 to A. A gets it without checking which leads to balance Rs500 loss for A.

CONCLUSION for need of PropTypes:-
    -> Type checking is literally very important for developers. It will reduce complexity of code & energy as developer & increases performance.
    -> When we work for very big projects where we get NaN or undefined issues. We need to spend more time and effort to find where this occurs.
    -> Instead, we get as error/warnings, developers can easily keep track of errors to find and solve it.
    -> This will reduce unneccessary confusions while debug our code by us or others.

üö®PropTypes:-
  -> It is a defense mechanism which has a npm package as prop-types at npmjs site.
  -> This is very important package in React projects.
  -> They are mechanisms that ensures that the passed props values are of correct data type.
  -> We can check datatype of passed props and handle errors if props are not passed what we expected. 
  -> At npmjs site, Runtime type checking for React props and similar objects.
  -> You can use prop-types to document the intended types of properties passed to components. 
  -> React (and potentially other libraries‚Äîsee the checkPropTypes() reference below) will check props passed to your components against those definitions, and warn in development if they don‚Äôt match.

Movie.js file:-
    -> Within Movie component, we pass another Demo component as a prop.
    -> Already we did similar thing in Route as 
        <Route path="/dhoni" element={ <Dhoni /> } />
    -> There react-router-dom developer also done this same thing.
    -> Prop received & destructured as element in Movie Component & returned that element.
    -> This element is Demo Component only.
    -> üö® Whenever we pass props as component, we should give PropTypes as "node".
    -> Otherwise, it will as warning.
    -> If we give string instead of node like below code, we get error. 
            Movie.propTypes = {
                element: PropTypes.string
            }
    -? We get Warning: Failed prop type: Invalid prop `element` of type `object` supplied to `Movie`, expected `string`.
    at Movie (http://localhost:3000/main.9dd2f94e5bb79f732dce.hot-update.js:24:3)
    at div
    at App
    -> When we pass prop element as Object, we get error as "Objects are not valid as a React child".
    -> In <Movie element={{ a : 10, b : 20 }} /> case, we get warning & error like below as we given PropTypes as node.
    -? Warning: Failed prop type: Invalid prop `element` supplied to `Movie`, expected a ReactNode (component).
    at Movie (http://localhost:3000/static/js/bundle.js:205:3)
    at App
    -? Uncaught Error: Objects are not valid as a React child (found: object with keys {a, b}). If you meant to render a collection of children, use an array instead.
    -> When we pass prop element = "Monisha" as string or element, we won't get error.
    -> CONCLUSION: "node" can be of any type.

Project2 - Part-1 Building Responsive NavBars in React:-
    -> We create good folder structures like components, styles & pages.
        => components folder contains all components .js files
        => styles folder contains all styles .css files
        => pages folder contains all pages .js files but Routes
    -> HomePage route have NavBar component.
    -> NavBar contains logo, pages & instead of log-in button we create GOAuth user profile with log-out button.
    -> We have installed two packages react-router-dom for BrowserRoute, Routes, Route & Link and react-icons for Hamburger icon to comprise nav-menu items.
    -> Then search hamburger icon react icons: https://react-icons.github.io/react-icons/
    -> Search FaBars for Hamburger icon & FaTimes for X close icon in above site.
    -> üì¢z-index in CSS property is very IMPORTANT one to make z-index: -1 to nav-menu screen to make it go behind header of navbar at home page.

Created a new React responsive-navbar project:-
    -> Added react-router-dom, react-icons & PropTypes npm packages.

Day 62 : 05.08.2023 -----------------------------
Curriculum: Learning Cloud | AWS | React Deployment on AWS S3 service
Agenda:
    - Let's talk about Production build
    - Deployment on Netlify
    - Cloud
    - AWS
    - 
    - 

__________________________________________________

Production build:-
    -> React developer Tools [COLORS Differentiation]
        - White color means that webpage not built with React codes.
        - Orange means that webpage built with React code & PRODUCTION Build
        - Black means that webpage built with React code & DEVELOPMENT Build
    -> 'npm run build' command at terminal changes our project from development stage to production build.
    -> This command creates build folder inside ur project.
    -> To start production build project in localhost => 'server -s build'
    -> npm i dependency => 'i' denotes install
    -> https://create-react-app.dev/docs/deployment/
    -> 

Deployment on Netlify:-
    -> Deployment only build folder into Netlify by dragging orelse via github.
    -> But not recommended to upload ur production React code into Netlify.
    -> As it is not utilized by companies, to upload the large production projects.
    -> They prefer AWS cloud storage to store them now-a-days.
    -> https://dapper-axolotl-6fbf3f.netlify.app/

Cloud:-
    -> AWS is one of cloud company.
    -> Cloud history 2002 internally launched

AWS [Trending & Marketing]:-
    -> PPT: https://docs.google.com/presentation/d/1BZztq0bLdNc-DAsNAthxIdMbeBaVoW0IZJty__EwGQc/edit#slide=id.g23901a669b0_0_0
    -> AWS stands for Amazon Web Services is a cloud service provider.
    -> Hardwares are costly to buy when compare to take in softwares rents.
    -> Use cloud services instead of buying resources
    -> Only few companies/industries are using data center, others are using AWS cloud only.
    -> Remote access possible when using cloud.
    -> Netflix, Zoom, Airbnb, Dropbox, NASA & Amazon uses AWS services
    -> Live streaming Video splitted into chunks are captured at youtube server
    -> All streaming data sent to youtube server in chunks continuously
    -> 

AWS Use cases:-
  * Use cases include
    -> Enterprise IT, Backup & Storage, Big Data analytics
    -> Website hosting, Mobile & Social Apps	
    -> Gaming
  * Applicable to a almost all industries.

AWS Global Infrastructure:-
    -> Divided into 4 parts:
    -> AWS Regions
        - AWS has regions all over around the world 
        - A region is a cluster of data centers.
    -> AWS Availability Zones
        - Each region has many availability zones (usually 3, Min is 3, Max is 6)
        - Example
            ap-southeast-2a 
            ap-southeast-2b 
            Ap-southeast-2c
        - AZ‚Äôs separate from each other, so that they‚Äôre isolated from disasters.
        - They‚Äôre connected with high bandwidth, ultra-low latency networking
    -> AWS Data center
        - 
    -> AWS Edge locations

How to choose an AWS Region?
    -> Proximity to customers: reduced latency

    -> Pricing: pricing varies region to region and is transparent in the service pricing page

    -> Compliance with data governance and legal requirements: data never leaves a region without your explicit permission

    -> Available services within a Region: new services and new features aren‚Äôt available in every Region

Download AWS for Free (Personal Use):-
    ->  Refer Website: https://aws.amazon.com/free 

Amazon S3 Service:- 
    -> Amazon Simple Storage Service
    -> Amazon S3 allows people to store objects (files) in ‚Äúbuckets‚Äù (directories)
    -> Amazon S3 Use cases:
       * Backup and storage 
       * Disaster Recovery 
       * Archive 
       * Hybrid Cloud storage 
       * Application hosting 
       * Media hosting Data lakes & big data analytics 
       * Software delivery 
       * Static website
    -> We need to create a bucket. Every bucket name should be unique.
    -> http://harshit-71-responsive-website.s3-website-us-east-1.amazonaws.com/

Day 63 : 07.08.2023 -----------------------------
Curriculum: Learning Cloud | AWS | React Deployment on AWS S3 service
Agenda:
    - Last Project Discussion
    - Project 2 Responsive Navbar continuation 
    - Build a project on crytocurrency website
    - Home Page
    - 
    - 
NOTE:- 
    -> In React, there is no ‚ùå id attribute in css files.
    -> If node modules missing, just enter npm install at vs code terminal
__________________________________________________

Home Page:-
    -> We installed 2 packages for image/video carousel.
    -> They are react-slick & slick-carousel.

Day 64 : 08.08.2023 -----------------------------
Curriculum: Learning Cloud | AWS | React Deployment on AWS S3 service
Agenda:
    - Project 2 Responsive Navbar continuation 
    - Build a project on crytocurrency website
    - Chart in Buy page
    - Footer Section
    - List of npm packages for React Final Assignment 
__________________________________________________

Chart in Buy page:-
    -> Chart.js is a popular JavaScript library
    -> Recharts is also similar to Chart.js library.
    -> React chartjs 2 is very popular superset of chart.js library. Here we get each chart in components.
    -> We install 2 packages. They are chart.js & react-chartjs-2
    -> NOTE: Don't forget to use optional chaining during API call
    -> Then sir used Final React assignment's API & fetch using axios package for 3 various charts.
        => Pie Chart
            * We need dashBoardPage -> stored -> 3 data
        => Line Chart
        => Horizontal Bar Chart
    -> Axios is used to fetch API call with useEffect & Async function embed inside Immediately Invoked Function Expression (IIFE) function
Q1: Write all the packages we have used.
A:- 
       1. react-router-dom:
              -> For Routes and Route in App component.
              -> For Link in Header component

       2. react-icons/fa:
              -> For FaBars & FaTimes icons at Header & NavBar components.
              -> For FaInstagram, FaFacebook, FaTwitter & FaWhatsapp at Footer component.

       3. react-slick:
             -> For Slider at VideoCarousel component.

       4. slick-carousel/slick/slick.css:
             ->  For Slider at VideoCarousel component.

       5. slick-carousel/slick/slick-theme.css:
            -> For Slider at VideoCarousel component.
      
       6. emailjs-com:
            -> For emailjs at Checkout component.

       7. chart.js/auto:
            -> For Chart at PieChart component.
            -> For Chart at LineChart component.

       8. react-chartjs-2:
            -> For Pie at PieChart component.
            -> For Line at LineChart component.

      9. axios:
            -> For axios at BuyPage pages.

Q2: Write all the feature we have build.
A:  List of features in Responsive Crypto Website are:-
       (1) Video Carousel is used to show video related to cryptocurrency.
       (2) Email JS is used to send mail confirmation on successful orders to Crypto Buyer's mail.
       (3) Chart JS and React chart JS 2 are used to build various charts like Pie chart, Smooth Line Chart & Horizontal Bar chart etc.
       (4) Axios used to fetch API call easily.
       (5) Even we can include Google OAuthorization to login this website.
Day 65 : 09.08.2023 -----------------------------
Curriculum: Redux (using useSelector/useDispatch hooks or Redux Toolkit) Part - 1
Sub-topics: (1) Updating State Immutably (2) Handling Multiple Reducers 
Agenda:
    - What is Redux?
    - Why should we use Redux?
    - Understanding Global State Management
    - Terminology related to Redux
    - Building store, creating Slices and Reading data.
__________________________________________________

Let's assume a Situation:-
    -> Let's say you building an e-commerce website.
    -> We will have different components like:-
        (i) Product component
        (ii) Cart component
        (iii) Payment component
    -> While adding Product to Cart, we need to Product data.
    -> Same way if we are on Payment page, we need to Cart data.
    -> So here we will pass the information from component to component using props.
    -> (Product => Cart => Payment) Data passed from Product to Payment page is called Props drilling.

This is called as Props Drilling:-
    -> Prop drilling in React refers to the practice of passing data from a parent component down to a child component through multiple components.
    -> Let's check this in Code.
    -> Doing Props drilling till 3-4 component is kind of OK.
    -> But when projects grow, it'll become very hard to work.
    -> Repeating same steps passing same function as props for different components to update.
    -> When no of components increases, then it becomes hell.
    -> Now to overcome this problem in large projects, Redux comes into picture. Even 10-15 solutions currently for this problem.

Multiple Solutions:-
    (1st solution) Context API
    (2nd solution) Redux
    (3rd solution) MobX -> npm package
    (4th solution) Recoil -> npm package
    => They all are Global State Management Solution.
    => They enables you to maintain a single centralized store that manages the state of your entire application.
    => All components in your application can access this store and update or retrieve data from it as needed.

What is Redux?
    -> Redux allows you to store all data in one central location where they can easily be accessible & updated.
    -> This makes it easier to manage complex states and keep your application organized.
    -> It's important to note that Redux is not limited to React & you can use it with other frameworks or even vanilla Javascript.
    -> Redux is a library can be used with React JS, Angular JS, Next JS, Vue Js etc. Even with Vanilla JS.

Why should we use Redux?
    * Centralized state management:
        => With Redux, you can maintain the state of your entire application in a single store.
        => Making it easier to manage & access data across components.
    * Better performance:
        => By minimizing the number of state updates & reducing the need for prop drilling.
        => Redux helps improve your application's performance.
        => Just for one click, changes multiple components at same time by multiple rerendering which crashes your application.
        => Multiple rerendering unneccessarily causes crash in your app.

Terminologies related to Redux:-
    (1) Store / Global store [Container]:
        - Redux store is like a big container that holds all the data for your application.
        - (Main store): The center of every Redux application in the store.
        - This means that any component in ur application can access it to retrieve and update data.
        - A Store is a JavaScript object with a few special functions & abilities that make it different than a plain global object.

    (2) Slice:
        - A slice is the portion of Redux store that relates to a specific set of data & actions within the store's state.
        - In Slice, we create the actual data and define reducers.
        - Example: UserSlice, CartSlice, PaymentSlice.
        - Store can have multiple Slice.
        - We have various slice like login slice, logout slice, etc.

    (3) Actions (Update):
        - An action is an object that describes what changes need to be made to the state of you application.
        - It sends data from your application to the Redux store and serves as the only way to update the store.
        - (to update redux store/slice - what action need to provide - we will despatch an action)
        - Eg:- Add/Removing a product cards is part of our actions.
    
    (4) Dispatch (Throws action):
        - In Redux, useDispatch React Hook.
        - How to send data from your application to the Redux store by above Hook.
        - This hook will allow us to send an action to update the state of your application.
        - You can think of dispatch as a mail carrier (action) who delivers mail to different departments in a large company.
    
    Refer Websites: https://www.redux-toolkit.js.org/api/createSlice
    Now-a-days instead of pure Redux, developers use redux in packages.
    Install 2 packages: react-redux & redux-toolkit npm packages from npmjs site or redux-toolkit site.

    (5) Reducer:
        - In Redux, a reducer is a function that takes in the current state of an application and an action as arguments, and returns a new state based on the action.

Example code:-
    - Watch & ProductContainer components.
    - Used @reduxjs/toolkit npm package => configureStore, createSlice, 
    - redux:
        -> Big Container (Store)  - store.js [Global Store]
        -> Piece of code (Slice)  - ProductSlice.js & UserSlice.js files are part of store.
        -> To connect Slice to ur Store and keep slice inside big container
        -> We need to export slice default ProductSlice.reducer & import at store as exported defaultly we can give any name while importing it.
        -> reducer function comes form createSlice.
        -> Above export & import statement connects
        -> Dispatch an action will call/trigger reducer function.
        -> In ProductSlice.js we defines & pass as 3 objects:
            KeyNames: name, initialState & reducers 
        -> Inside reducers key we give more no.of reducer functions in object type as value to update slice inside our store data.
        -> This reducers key is a collection of multiple reducer functions.
        -> In App.js, we should import {Provider} from react-redux package.
        -> üì¢And then wraps App component by Provider component. This is very important to connect React with Redux.
        -> At Watch.js file, useSelector() Hook has passed complete store as callback function is used to store complete store.
        -> From this store we get product details from data object to return
        -> useSelector hook comes from react-redux package is used to read data from UserSlice, ProductSlice store etc.
        -> How to update your store values on button click?
        -> We want to dispatch an action.
        -> How to dispatch an action?
        -> By utilizing useDispatch hook from react-redux package.
        -> increasePrice, decreasePrice actions passed in dispatch method comes from ProductSlice.actions

Day 66 : 10.08.2023 -----------------------------
Curriculum: Redux continuation | Part-2 | E-commenrce Applications
Sub-topics: (1)  (2)  
Agenda:
    - Redux Continuation (useSelector Hook)
    - 
    - 
    - 
    - 
__________________________________________________

useSelector hook:-
 -> This is used to read the store by using it's callback functionality
 -> Reading the data from store is "Subscribe".
 -> useSelector not only used to read ur information. It also helps to subscribe global store.
 -> Any change to this data, will retrigger / rerender your data.


Day 67 : 11.08.2023 -----------------------------
Curriculum: Virtual DOM | Reconciliation | React Fragments | Event | Project -3 | Chat Application | React | Node | Socket.io

Session Details: Find the demo of the ReactJs auto-graded exam below in the "PREWATCH VIDEOS" for React Certification.

Agenda:
    - Diff Virtual DOM & Real DOM
    - Reconciliation -> Diffing algorithm
    - Why JSX within React Fragments <> </>
    - Event based handling
    - Project-3 Chat Application (one-to-one & group chat)
__________________________________________________

Diff Virtual DOM & Real DOM? 
    -> Virtual DOM is pseudo (imaginary DOM) which is replica of our real DOM.
    -> This DOM helps for minimal changes to overcome the decrease in performance of code.
    -> In Real DOM (JavaScript), we use to refresh the entire DOM for each changes/event occurs.
    -> This leads to massive performance breakdown.
    -> To overcome this situation, developers created virtual DOM to maintain the performance in same level without decreasing it.
    ->

Reconciliation 
    -> Diffing algorithm is used to find how to perform minimal changes at the DOM for good performance.
    -> 

Why JSX within React Fragments <> </>:-
    -> This exactly located at all components of React project within return statement of JSX tags wrapped by <React.Fragment></React.Fragment>
    -> This also has shorthand <> </> instead of <React.Fragment></React.Fragment>
    -> This tag doen't shows itself in real DOM.
    -> 

Event-based handling:-
    -> It has 2 things. One is message consuming (receive msg by receiving end user from server / server from client-end [sender] user) denotes by ".on()" from Global Node.js package.

    -> Another is message emiting (sends by user to server / server to other users) denotes by ".emit()" from Global Node.js package require.

    -> .on(MessageName, ExactMessage);
    -> .listen() is used to arrange server's port at 4000.

Project-3 Chat Application (one-to-one & group chat):-
    -> STRUCTURE: In this project, we use three folders.
        (1) chat-frontend 
            => This contains all frontend application like React CRA app.
        (2) chat-backend 
            => This contains all backend application like package.json, package-lock.json, node-modules & server.js files
        (3) node-events
            => This contains all event (Link) application like package.json & server.js files.

    -> EXTENSION & PACKAGES:-
    -> Here we use various npm packages and a chrome extension to overcome from cross-orgin error occuring [cors - add‚úÖ & setup Test CORS‚ùåüö© (still pending)].
    -> The full name of chrome extension is "Allow CORS: Access-Control-Allow-Origin"
    -> How to install this chrome extension?
    -> Refer this link: https://mybrowseraddon.com/access-control-allow-origin.html?v=0.1.8&type=install

    -> List of npm packages in this project listed in their respective package.json under dependencies (visually) are:
        (1) Front-End packages:
            => socket.io-client

        (2) Back-End packages:
            => express
            => socket.io
    -> Object creation & its Flow of working:
        * At node-events (server.js), myEvents object is created from Event class created with the help of events from require global package of Node.js
        * At chat-backend (server.js), 
            => 'http' class created with the help of http from require global package of Node.js, 

            => 'express' class created with the help of express from require global package of Node.js,

            => 'socketIo' class created with the help of socket.io from require global package of Node.js

            => Created an 'app' from express() class

            => Created an 'server' from http.createServer(app) using app.

            => Then 'io' object is created from socketIo class created with the help of socket.io from require global package of Node.js

            =>  We created an initial connection using io object using a callback function via socket variable pass as argument. This socket goes to App component.
        * At chat-frontend (App.js),
            => 'socket' object is created from io component imported (through which we pass server's port 4000) from "socket.io-client" npm package

            => We also imported named Socket component from "socket.io-client" npm package

Day 68 : 12.08.2023 -----------------------------
Curriculum: Project-3 Chat Application continuation

Sub-topics: 

Agenda:
    - Performance optimization when hampered
    - useMemo
    - useCallback
    - useRef
   
__________________________________________________

Performance optimization when hampered:-
-> Rerendering means again & again calling
-> But we also do the expensive calculation again n again on click of button which takes some time to executes.
-> Here the scope of performance happens.
-> Now our web application becomes slow as it don't want to be rerenders by recalculated.
-> To overcome this kind of situations, a hook is introduced.

useMemo():-
-> This hook is a powerful tool in React that allows you to optimize the performance of your components.
-> 'memoizing' means remembering what we've done in past/catch the results of .
-> Refer site: react.dev/reference/react/useMemo
-> It helps to memoizing the results of expensive 
-> useMemo only returns when it dependencies_Array (2nd argument instead of empty array) updates.
-> Value get updates only when dependencies changes.
-> If any change in state variable 

useCallback:-
    -> useCallback Hook is used to memoize the functions, which can help optimize the performance of your components.
    -> Father & childComponent are used for this Hook.
    -> If there is no use at all for child component then why rerender again & again.
    -> To overcome this, we use 'memo' keyword before export of child component. Due to memo lets you skip re-rendering a component when its props are unchanged.
    -> Refer site: react.dev/reference/react/memo
    -> 'memo' imported from react package.
    -> But after this, if we try to pass a function asa props also again rerendering happens.
    -> To overcome this, we try to remember this printStatus function using useCallback().
    -> Now only father component is rerenders without child component.
    -> But to skip the rerender of child component, we should use memo keyword along with useCallback.
    -> If there is any change in 2nd argument (dependencies_Array), then child component is rerendered.
    -> It's especially useful when dealing with child components that receive functions as props.
    -> AS it ensures that these functions are not recreated on every render unless their dependencies change.
    -> 

useState:-
    -> useState change applied only in next time rerenders.

useRef:-
    -> This triggers
    -> Types of variables in React.
    -> (1) Local variable & state Variable
    -> Create buttons for them
    -> Refer site: react.dev/reference/react/useRef
    -> useRef is a React Hook that lets you reference a value that‚Äôs not needed for rendering.
    -> const ref = useRef(initialValue)
    -> useRef will only update the value & will not rerender when they change
    -> If we give only variable name, it throws an error.
    -> To overcome this situation, if we check using console.log(RefVariable);.
    -> We can see value stored inside keyName current in an object.
    -> useRef will return values in an object at current key.
    -> Rerender happens only when there is updation on state variable.
    -> Local Variable shows changes only at console but state variable shoes changes both at UI & console but not remember before value increased using local variable.
    -> But useRef will remembers the last rendered value & continues from there.
    -> To rerender we just store the value in useRef.
    -> This used to remember the last value by continue from where we left by storing the last value without retrigger from first.

Use Cases of useRef:-
    => DOM Manipulation:
    => Previous Values:
    => Avoid rerenders:
    => Catching values:

Context API:-
    -> Alternative Redux, MobX & Recoil are various libraries not coming from React.
    -> But Context API comes from React 
    -> https://react.dev/reference/react/createContext#createcontext
    -> Require (in ES6) is same as import (in ES7)
    -> Wrap App component codes inside UserContext.Provider and pass a value as props.
    -> Then import useContext at User component.
    -> We are reading userContext and passing value in provider.
    -> 1st user change the name then c1 or any component will get rendered values.
    -> On change in User component, on click of button renders at every components.

Disadvantage of Context API:-
    -> We as developers not feel like use from Global store.
    -> So there is 2 types of variable in React. State & useRef.

Leftout topics:-
(1) Tailwind CSS | Material userId
(2) HOC | Lefting state up


Day 69 : 13.08.2023 -----------------------------
Curriculum: Project-3 Chat Application continuation

Sub-topics: 

Agenda:
    - Performance optimization when hampered
    - useMemo
    - useCallback
    - useRef
   
__________________________________________________

Day 70 : 14.08.2023 [My SQL Module] -----------------------------
Curriculum: Database Fundamentals

Sub-topics: 
    (1) What is Database?
    (2) Types of Databases
    (3) Introduction to DBMS
    (4) Installation of MySQL
    (5) DBMS Architecture
    (6) Tables in MySQL
    (7) Create DB, Tables
    (8) Constraints
    (9) Example of Queries

Agenda:
    - 
    - 
    -     
    - 
Pre-Watch Videos: https://classroom.edyoda.com/program-modules/FSR310323/MySQL/38126/?type=topic

Edyoda PPT: https://docs.google.com/presentation/d/1A4U8Q6s6NIW0q-AjAQCQXRl40dPL_RL5FLtxuiTGRVI/edit#slide=id.g6d83c41cf6_1_206

ÔªøMaster PPT - https://docs.google.com/presentation/d/18filyiHB3bKs4MJZ4m0PX3vWm7Dv7wrsV1UvvhcGy_4/edit#slide=id.p

ÔªøComunity Class - https://community.edyoda.com/t/learning-database-fundamentals/8539
_________________________________________________

How to show list of databases in MySQL command line client?
    => show databases;
How to create a database in MySQL command line client?
    => create database employee;
How to get into a database in MySQL command line client?
    => use databaseName; -> Eg:- use employee;
How to create multiple tables inside a created database in MySQL command line client?
    => create table employee_details(
        -> id int,
        -> name varchar(20),
        -> salary int
       );
    => show tables; // Tables_in_employee -> employee_details

Day 71 : 16.08.2023 -----------------------------
Curriculum: Tables | Queries
Sub-topics: 
    (1) Operators
    (2) Logical Operators
    (3) Drop Table
    (4) Insert into Table
    (5) Select from Table
    (6) Where filter
    (7) Delete from Table
    (8) Transactions in DBMS

Agenda:
    - Revision Databases, Columns, SQL
    - MySQL commands
    - 
    - Type 'system cls' and then enter to clear screen my SQL commmand line client.

Pre-Watch Videos: https://classroom.edyoda.com/program-modules/FSR310323/MySQL/38127/?type=topic

Community Class = https://community.edyoda.com/t/tables-queries/8569

PPT: https://docs.google.com/presentation/d/1A4U8Q6s6NIW0q-AjAQCQXRl40dPL_RL5FLtxuiTGRVI/edit#slide=id.g6d83c41cf6_1_206
_____________________________________________

REVISION:
    Databases:- Cassandra is column based database.
    Columns:- Are called as Attributes in SQL but in MongoDB (NoSQL) called as fields.
    SQL:- MySQL & Postgress are popular SQL.

MySQL commands:-
    -> To get into / open 'mysql -u root'
    -> We can create multiple databases 1st 'show databases;' | Response: 6 rows in set
    -> To create a table 'create database employee;' | Response: Query OK,  1 row affected [Here tableName is employee]
    -> Again 'show databases' to check if our table is added | Response: 7 rows in set
    -> use employee; | Response: Database changed
    -> create table employee(id int, name varchar(20), salary int); | Response: Query OK,  0 rows affected
    -> create table student(id int, name varchar(20), class int); | Response: Query OK,  0 rows affected
    -> show tables; | Response: 2 rows in set
    -> select * from employee; | Response: Empty set
    -> describe employee;

    -> To insert some values: 'insert into employee(id,name,salary)values(101,'Monisha',1000);
    -> To view all inserted rows: 'select * from employee;'
    -> 'insert into employee(id,name,salary)values(102,'Abhi',1500);
    -> select * from employee;
    -> 'insert into employee(id,name,salary)values(103,'Suraj',2000);
    -> select * from employee;
    -> 'insert into employee(id,name,salary)values(104,'Navya',2500);
    -> select * from employee;
    -> To insert multiple rows separate with comma after values: 'insert into employee(id,name,salary)values(105,'Akhila',3000),(106,'Harshit',3500);
    -> select * from employee;
    -> How to get name & salary from ur data table not entire?
    -> select name,salary from employee;
    -> select name from employee;
    -> Shortcut to get previous commands just up arrow key & down arrow key
    -> select * from employee where id=105;
    -> select * from employee where salary=9000;

Logical operator:-
    -> select * from employee where salary>5000;
    -> select * from employee where salary>=4000;
    -> select * from employee where id=106 and salary=6000; // harshit
    -> select * from employee where salary=6000; // harshit
    -> select * from employee where name='harshit'; // harshit
- and command says both condition to be true then return
- or command says any one condition is true then return
    -> select * from employee where id=106 and salary=9000; // nothing Empty set | Reason: As there is no row satisfies this both condition
    -> select * from employee where salary between 4000 and 9000;
    -> select * from employee where salary in(2000,3000,4000);
- Pattern Matching:
    * To open new terminal in new tab => ctrl + T
    -> insert into employee(id,name,salary)values(111,'mythili',30000);
    -> insert into employee(id,name,salary)values(112,'Harshit',60000);
    -> insert into employee(id,name,salary)values(113,'Harshita',50000);
    -> insert into employee(id,name,salary)values(114,'harshita',40000);
    * PAttern Match:
    -> select * from employee where name like 'h%';
        - This returns all values starting with from H & h
    -> select * from employee where name like '%h';
        - This returns all values ends with from H & h
    -> select * from employee where name like 'harsh%';
    -> select * from employee where name like 'har_hit';
        - If there is missing keyword, then we can use underscore.
    -> select * from employee where name like 'har_hi%';
        - If there is missing keyword, then we can use underscore and % for after hi can be anything.
    -> select * from employee where name like 'har_%';
        - Only 106 harshit, Harish, 112 & 113 we get
    -> select * from employee where name like 'ha_s%';
        - Only 106 harshit, 112 & 113 we get
    -> select * from employee where name like 'ha_i%';
        - Only 106 Harish we get
- Update table:
    -> update employee set salary=5000 where id=112; | Response: Query Rows: 1 matched Changed:1
    -> update employee set salary=salary+50 where id=112; | Response: Query Rows: 1 matched Changed:1
    -> Update the id: 'update employee set id=120 where name='Pavan';'
    -> Update the every person's salary by +1: 'update employee set salary=salary+1 where id>100;' => In case of table shown to us
    -> Update the every person's salary by +1: 'update employee set salary=salary+1 where 1>0;' => In case of table NOT shown to us
        - To get truthy value (1>0) always be true.



Day 72 : 17.08.2023 -----------------------------
Curriculum: Limit Offset | Alter | OrderBy | Aggregate Function | GroupBy | Having | Keys | Primary | Foreign | JOIN

Sub-topics: 
(1) Sorting using OrderBy (ascending order/descending order using DESC keyword)
(2) Group By
(3) Limit & Offsets
(4) Alter Table
(5) Indexes in MySQL
(6) Update
(7) Joins

Agenda:
    - Alter
    - OrderBy
    - Aggregate Functions
    - Nested Query
    - GroupBy
    - Having
    - Keys

Community Class - https://community.edyoda.com/t/limit-offset-alter-orderby-aggregate-function-groupby-having-keys-primary-foreign-join/8607
   
PPT DB03: https://drive.google.com/file/d/1x3Isr-eXiD6PrlRMvPDT_PA7nInrcpjq/view
   
DISCLAIMER:- We should know only Existence of concepts(topics)
__________________________________________________
Alter:-
        -> 
OrderBy:-
        -> 
Aggregate Functions:- 
        -> (total, sum, avg, max, min) for sales like attribute.

Nested Query:- 
        -> 
GroupBy:-
        -> We can group by rows based on column/attribute name.
        -> If we have COMMON column values like same names/category etc then we can use Group By.

    Calculate the average/(total/count) sales of each category?
        => select category, avg(sales) from product group by category;
        -> Above command gives avg sales of Mobile, Laptop & Shoes category.

    Calculate the sum/total sales of each category?
        => select category, sum(sales) from product group by category;
        -> Above command gives sum of sales of Mobile, Laptop & Shoes category.

    Calculate the maximum sales of each category?
        => select category, max(sales) from product group by category;
        -> Above command gives max of sales of Mobile, Laptop & Shoes category.

    Group by location attribute(column):-
        => select location, sum(sales) from product group by location;

Having:-
        -> When we apply more operation on aggregated data ( already applied some operations like Group By, etc) this is used.
        -> This clause filters on group by aggregated data.
        -> Example:
            - group by average rating
            => select m-name, avg(rating) from movie group by m_name;
            - Having clause is used below
            => select m-name, avg(rating) from movie group by m_name having avg(rating) > 7;
Keys:-
    -> In SQL, keys are fields in a table that are used to identify specific row in a table.
    -> Also to find or create relationship between tables.
    -> Helps in data integrity, Relationships between 2 or more tables.
    -> And ensuring that each row in a table has a unique identifier.
    -> In facebook/Meta, currently active users are 2.6 billion (290 crores)
    -> They optimization of every user's data in database.
    -> Handles them without hangs/crash using with supercomputers 
    -> Relationships means Department table we have deptId, deptName, deptLocation & in Employee table we have empId, empName, empSal, deptId, empAge etc.
    -> This employee belongs to which department can be getting by linked by using deptID inside empTable.

    Types of Key:-
        - Primary Key [IMPüö®]
        - Foreign Key (IMP)
        - Candidate Key -> Comes under Primary Key
        - Composite Key
        - Super Key -> Comes under Primary Key
    (1) Primary Key:-
        -> A key

Day 73 : 18.08.2023 -----------------------------
Curriculum: Primary and Foreign Key | Different Types of Joins in MYSQL | Indexes | Views

Sub-topics: 
    (1) Views
    (2) Example on views and joins
    (3) Stored Procedure
    (4) Candidate Key
    (5) Composite Keys
    (6) Normalization in DBMS

Agenda:
    - 
    - 
    - 

PPT DB04: https://drive.google.com/file/d/1hlS3UCd1ByO882JD8KVmO5DFheea-K5z/view

Community Class - https://community.edyoda.com/t/primary-and-foreign-key-different-types-of-joins-in-mysql-views/8646
__________________________________________________

Day 74 : 19.08.2023 -----------------------------
Curriculum: Indexes | View | DELIMITER | Stored Procedure | Candidate Key | Transactions

Sub-topics: 
    (1) Views
    (2) Examples on Views and Joins
    (3) Candidate Key
    (4) Composite Keys
    (5) Normalization in DBMS

Practice Resources: 
    -> View of Data in DBMS: https://beginnersbook.com/2015/04/view-in-dbms/

PPT DB04: https://drive.google.com/file/d/1hlS3UCd1ByO882JD8KVmO5DFheea-K5z/view

Agenda:
    - 
    - 
    - 
    - 
   
__________________________________________________


Day 75 :21.08.2023 -----------------------------
Curriculum: Transactions | ER diagram | World Cup 2023 ER Diagram | Normalization

Sub-topics: 
(1) Normalization 1NF,2NF,3NF
(2) entity Relationship Diagrams
(3) Cardinality

Agenda:
    - Transactions
    - 
    -  
    -  
    - 
    - 
    - 
   
PPT DB05:- https://drive.google.com/file/d/1pJtldVoIsu6dIkYBiOjVRJ0-LdYhZsxR/view

Community Class - https://community.edyoda.com/t/transactions-er-diagram-world-cup-2023-er-diagram-normalization/8758
__________________________________________________

Transactions
    -> A transaction is a sequence of 1 or more SQL statements that are treated as a single unit of work.
    -> Transactions ensure that a series of operations are executed successfully or not at all.
    -> One transaction can have multiple SQL queries.

Why we need Transactions?
    -> Transactions are crucial

ACID Properties:-
    (1) Atomicity:
        -> Only when we press commit, updation takes place at both (Debit & Credit) ends.
        -> 100% success or 100% Rolled Back
        -> Roll back means no operations takes place or it will retain as it is | after debit but not credited @receiver end then they will refund to sender's account [Partial Transaction 50%].

    (2) Consistency: 
        -> Eg:- Money Transfer: T is equal to a matrix of (1) Update A amount = amount - 100; & (2) Update A amount = amount + 100;
        -> 1st operation is for Debit amount by deducting from sender account & 2nd operation is for Credit amount by adds to receiver account.
        -> Both Debit & Credit side should works together to become success orelse no transaction should start.
        -> If it is NOT either SUCCESS or FAILURE, then this falls into data inconsistency from ACID 'C' for Consistency.

    (3) Isolation:
        -> No interference
        -> Changes made by 1 transaction aren't visible to others until the transaction is committed.
        -> First comes given 1st preference in case of similar to movie booking tickets scenarios.
        -> If 2 differen person books the ticket at same time, the ticket will be provides based in milliseconds difference. Otherwise refund happens for 2nd person.

    (4) Durability:
        -> Once transaction is committed, it's changes are permanent and won't be lost, even in the event of a system failure or power loss.

ER Diagram:-
    => 1. ER stands for Entity-Relationship which is a digramatic graphical representation of the entities, relationships, attributes and cardinalities in a database.
    => Entity means real-time world representations in form of tables (Rectangle). Relationship between 2 systems using Entities.
    => Relationship means one-to-one / One-to-Many / Many-to-one / Many-to-Many etc.
    => ER diagram is completely like a roadmap.
    => 2. Weak Entity represented by Double Reactangle nested within one other.
    => Eg:- Installment weak entity only exists when Loan (normal entity exists) & depnds on Loan entity
    => 3. Attribute: 
            (1) Key
            (2) Composite
            (3) 
    => 4. Relationship:
            (1) One-to-One
                Eg:-
            (2) One-to-Many
                Eg:-
            (3) Many-to-One
                Eg:-
            (4) Many-to-Many
                Eg:- 
                    (i) In companies, staff belongs to department and each department have many staffs
                    (ii) 
                    (iii)
                    (iv)
Eg: Worls Cup 2023 ER diagram:-
    > 


Day 76 : 22.08.2023 -----------------------------
Curriculum:- Candidate & Alternate & Super Key | Normalization (1NF, 2NF, 3NF) | Prime & Non Prime | Full Dependency | Partial Dependency | Transitive Dependency

INTERVIEW QUESTIONS & Practice Resources Links:-
    (1) MySQL Revision: https://www.interviewbit.com/mysql-interview-questions/
    (2) Basic MySQL Interview Questions: https://www.interviewbit.com/mysql-interview-questions/#mysql-basic-questions
    (3) Intermediate MySQL Interview Questions: https://www.interviewbit.com/mysql-interview-questions/#mysql-intermediate-questions
    
Agenda:
    - Super Key
    - Candidate key
    - Alternate Key
    - Composite Primary Key
    - Foreign Key Glimpse
    - Prime Attribute
    - Non-prime Attribute
    - üö®Normalization
   
Practice Resources:
    MySQL Revision: https://www.interviewbit.com/mysql-interview-questions/

    Basic MySQL Interview Questions: https://www.interviewbit.com/mysql-interview-questions/#mysql-basic-questions

    Intermediate MySQL Interview Questions: https://www.interviewbit.com/mysql-interview-questions/#mysql-intermediate-questions
__________________________________________________

Super key:-
    -> Purpose of key is to find unique row/tuple of a table.
    -> Super key is a set of one or more attributes that helps us to find a row from table.
    -> There can be multiple super keys per table & can have unneccessary attributes (not required) as well.
    -> Every Candidate key cannot be Super Key

Candidate Key:-
    -> by default index created while we create a primary key or others too.
    -> Candidate Key is a minimal of super key.
    -> Meaning it is a set of attributes that can uniquely identify a row without unneccessary attributes (Not Required).
    -> Every Super keys can be Candidate Key
    -> There can be lots of Candidate Key but only one primary key in a table
    -> Only one (who similar to winning candidate) will be Primary key among Candidate Keys.
    -> Alternate Key are also Candidate Key those were not chosen as Primary Key. Eg:- RollNo, id, rollno
    -> Every PK can be SK & CK
    -> Every AK is CK
    -> Not every PK is AK
    -> Every AK is SK

Composite Primary Key:-
    -> Id is primary key | RollNo can beunique primary key
    -> But Id & RollNo can be composite key

Foriegn Key:-
    -> The purpose of FK is to make Releaionship between 2 tables.
    -> Foreign key is primary key in another table.

Composite Key:-
    -> Composite key is also candidate key as it consists of Primary Key.

Prime attributes:-
    -> It is part of primary key.

Non-Prime attributes:-
    -> It is not part of primary key.

üö® Normalization:-
    -> Make sure there should nto be Data redundency (repeating same info twice or more times) while updations.
    -> To avoid Data redundancy & Data Consistency, we use the following Normalization process.
    -> This helps us to reduce Data redundancy & Data Consistency
    -> To create nicely designed using Normal Forms (NF).
    -> We achieve this Normalization suing labels.
    -> There are labels: 1NF, 2NF, 3NF & BCNF
(i)   1NF  [Level-1]:
        => 1NF stands for First Normal Forms
        => Rules:
            - Each attribute must be Atomic value.
            - Atomic Value means Single value
            - MultiValue attribute (cell) enclosed within Double nested eclipse (elongated circles).
            - If our table has anyone multi-value, then it will not fall under level-1

(ii)  2NF  [Level 2]: Already in 1Nf & no partial dependency
        => It should already exist in 1NF.
        => Table should not have any partial dependency.
        => Partial Dependency means when non-prime attribute depends on part of prime attributes.
        -> Eg:- OrderId, CustId, CustName & ProductName are column names of a table.
        -> OrderId & CustId are Primary Key & Prime Attributes.
        -> CustName & ProductName are non-prime attributes.
        -> 'CustName' is a non-prime attribute depends only on 'CustId' which is one of prime attributes.
        => This can be overcome by decompose this one table into 2 tables to convert into 2NF.
        -> Eg:- OrderId, ProductName & CustId are in one table where CustId is foreign key.
        -> CustId & CustName are resided in another table with CustId as Primary key.
        => Separation of tables based on our concern.
        => We no need to club everything in one table.
        =? How to check if there is any Partial Dependency or not?
        => 

(iii) 3NF  [Level-3]:
        => It should already exist in 2NF.
        => Table should not have any Transitive dependency 
    Note: Non-prime attribute depends on part of Prime attribute is called Partial Dependency.
        => Transitive dependency means when a non-prime attribute finds/depends on another non-prime attributes.
        -> Eg:- teacher_id, teacher_name, department_id & department_HOD are column names in a table.
        -> teacher_id is Primary & prime attribute
        -> teacher_name, department_id & department_HOD are non-prime attribute.
        -> To know who is dept_HOD of some dept, we need only dept_name.
        => Department_HOD is non-prime attribute which depends only on Department_name which is another non-prime attribute.
        => If there is any Transitive Dependency, then our table will not fall under 3NF.
        => This can be overcome by decompose this one table into 2 tables to convert into 3NF.
        -> Eg:- teacher_id, teacher_name, department_name & department_HOD are in one table where department_name is foreign key.
        -> Department_name & Department_HOD are resided in another table with department_name as Primary key.

(iv)  BCNF:

Revision: 
    1NF  - Only Atomic Value & No multi-value
    2NF  - Already in 1NF & No P.D
    3NF  - Already in 2NF & No T.D

Day 77 : 23.08.2023 -----------------------------
Curriculum: Interview Preparation Part 1 | Writing Sub Queries | Complex Queries | CASE

Sub-topics:
    (1) SQL Concepts
    (2) SubQuery
    (3) CASE
    (4) Practice Problem
     
Agenda:
    - SubQuery (nested within () circular brackets)
    - Joins
    - Practice questions for Examples

Practice Resources: 
   Basic MySQL Interview Questions: https://www.interviewbit.com/mysql-interview-questions/#mysql-basic-questions
   Intermediate MySQL Interview Questions: https://www.interviewbit.com/mysql-interview-questions/#mysql-intermediate-questions
__________________________________________________

SubQuery:-
    -> One or more Sub-queries are nested within a query to solve single table for normal simple operations.

Joins:-
    -> Joins is used to solve among multiple tables for complex operations.

Practice questions for Examples:-


Day 78 : 24.08.2023 -----------------------------
Curriculum: Interview Preparation part 2 | MySQL Completion | FAQs | Revisiting JS - 1

Sub-topics: 
    (1) Procedures in detail and examples
    (2) Interview Questions
    (3) Python and MySQL

Agenda:
    - Scaling
    - Virtual Server in EC2 of AWS
    - BCNF

Practice Resources:
    Basic MySQL Interview Questions: https://www.interviewbit.com/mysql-interview-questions/#mysql-basic-questions
    Intermediate MySQL Interview Questions: https://www.interviewbit.com/mysql-interview-questions/#mysql-intermediate-questions
    Advanced MySQL Interview Questions: https://www.interviewbit.com/mysql-interview-questions/#mysql-advanced-questions
__________________________________________________
Scaling:- 
    -> Vertical Scaling: Increase size of database from 1 TB to 3TB.
    -> Horizontal Scaling: Instead Extend size we can buy completely separate to setup new db/RAM/LapTop etc.
    -> Due to cost-cutting strategy, vertical is best when we have small user database.
    -> Horizontal is best when we have larger no of user databases.
    -> 

Virtual Server in EC2 of AWS:-

BCNF:-
    -> BCNF stands for Boyce Codd Normal Forms.
    -> 2 rules:
        1. Should be already in 3NF.
        2. Only super keys in non-prime or prime attributes.
        => Any relationship who is having leftside not as super key. Therefore, table is NOT in BCNF.
        => Calculate all possible super keys & then check all Relationships.
        => Leftside of Relationship should be super key.

Day 79 : 25.08.2023 -----------------------------
Curriculum: Interview Preparation part 3 | MySQL FAQs | Revisiting JS - 2

Sub-topics: 
    (1) 
    (2) 
    (3)
    (4) 
    (5) 
    (6) 
    (7) 

Agenda:
    - 
    - 
    - 
    - 
   
__________________________________________________


Day 80 : 26.08.2023 -----------------------------
Curriculum: 
Sub-topics: 
    (1) 
    (2) 
    (3)
    (4) 
    (5) 
    (6) 
    (7) 

Agenda:
    - 
    - 
    - 
    - 
   
__________________________________________________






































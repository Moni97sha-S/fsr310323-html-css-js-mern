
JS Fundamental Concepts:

JS Advanced Concepts:
1.
- Execution context
    > Context is a set of circumstances or facts that surround a particular event, situation, etc.
    > EC means code currently running and everything surrounding it helps run it
- Lexical Environment
    > Lexical means related to something
    > LE means how and where your code is physically placed.
- Parser
    > Syntax Parser takes the array of tokens and create an Abstract Syntax Tree(AST) so that it can be processed further to create executable code.
https://blog.greenroots.info/understanding-javascript-execution-context-like-never-before
/*******************************üö® means important topic for Exam***********************************/

Day 1 : 15.05.2023 -------------------------------------
Curriculum:
üìçIntroduction to Javascript
üìçLanguage Basics: Variables, Data Types - Primitive and Reference, Number (Add, Sub, Mul, NaN, Infinity), Inbuilt Functions - Numbers
üìçDialogs: Alert, Confirm, Input
üìçControl Flow
----------------------------------------------------------
LMS 
Sub-Topics
    Introduction to JavaScript
    Language Basics
    Dialogs: Alert, Confirm, Input
    Control Flow

Session Details
1. Introduction to JavaScript
2. Language Basics: Variables, Data Types - Primitive and Reference, Number (Add, Sub, Mul, NaN, Infinity), Inbuilt Functions - Numbers
3. Dialogs: Alert, Confirm, Input
4. Control Flow

Practice resources:
    ÔªøIntro to javascript
    Javascript tutorial
    notes

LMS END

Intoduction:-
    - Javascript file u must have .js extension
    - JS is case-sensitive language.
    - JS is a script language which needs an interpreter
    - It can change HTML & CSS dynamically.
    - Can do events (click, key press etc.)
    - Sending & receiving data to server.
    - Storing the data in cloud/
        ? 1st old JS is client-side.
        ? Became server-side by using Node.js
    - It can perform an action, validation & adds functionality.
    - We can create dynamic web page.
    - We can interact with web page through JS.
    - Without JS web pages are called as Static & dummy pages.

Lang Basics:
    - Ways to insert js code into HTML file:
        1. Using script tag:
            <script>
            //your js code
            </script>
        2. External script (Insert it after body tag):
            <script src="./style.js"></script>
    - Diff between scripting & programming language?
        + Script:
            > Scripting lang is high-level language.
            > Works according to the script like do this & that.
            > Script works on the programming lang.
            > Executes dependently inside the parent. That parent has to be a programming lang.
        + Programming: 
            > Programming lang is low-level language.
            > Executes independently.
    - Where to Practice :
       > VS Code, Browser console in source tb.
       > Its result will be in browser's console tab.

Dialogs: Alert, Confirm, Input
    - alert('Hi, how are you?');

Control Flow
    -

Variables:
    - It is a container to hold some data that can be used that can be used by the program.
    - It means to store some data in memory address.
    - var name = 'Moni';
        -> var means keywordVariable
        -> name means variableName
        -> = means Assignment operator
        -> Moni means variableValue string should be mentioned inside '' | number can be simple given without inside ''| boolean means true & false | array means [] | object means {}

Declare a variable (Syntax):
        -> keywordVariable yourVarName = yourVarValue;

Types of keyword Variables:-
1. var - Global scope variable. | Global means for easy understanding public but we shld not mention like that
------ came after 2015 ES6 (express.js)
2. let - Block scope variables. {}
3. const means never change - Block scope variables. {} | Block means for easy understanding private but we shld not mention like that

What kind of data u r going to store & declaration + initialization of different data.
(5) Types of Data-types:-----------------
1. number - 12233 | Eg: var mathMark = 95;
2. string - 'nsffd' | Eg: var engMark = 'wwww';
3. boolean - true or false | Eg: var tamilMark = true;
4. array - [] | Eg: var socialMark = [];
5. object - {} | Eg: let engMark = {};
//0 means atleast last empty roll is thr 
    5.1 null means one of object nothing empty toilet roll only it's holder
6. undefined means not clearly defined i dont know what is thr in past no holder

üí° console.log(var-name);
    - gives result at browser console
    - it cannot access var-name before its initialization.
    - always we need to declare variables before accessing it.
    - always takes from bottom to top approach.
    - In othr words, last come first according to the rules below.

üö®Main concept & rules:
üí° redeclare means declare again with same var keyword & variable-name with different value.
    Eg: var name = 'qwe';
        var name = '123';

üí° reassign means assign again without repeating variable keyword but with same variable name with different value.
    Eg: var total = 'qwe';
        total = '123';
üìåRules:-
    1. Var
        > We can redeclare in same & different scopes & reassign.
    2. let 
        > We cannot redeclare in same scope.
        > We can redeclare in different scope.
        > We can reassign.
    3. const
        > We cannot redeclare in same scope.
        > We can redeclare in different scope.
        > We cannot reassign.
   üì¢Notes: scope means a set of code inside a block {}.

Main difference among var, let & const?
    - Var
        > redeclare
            ‚úÖ We can redeclare in same & different scope.
            ‚úÖ Eg: var name = '123'
                    var name = 'abc'
                    console.log(name);
                    Res: abc \\ We can redeclare a global scope variable-name again & again.
        > reassign
            ‚úÖ We can reassign.
            ‚úÖ Eg: var total = '123';
                    var total = 'abc';
                    total = 'wwww';
                    console.log(total);
                    Res: wwww \\ We can reassign a global scope variable-name without mention it's type again.
    - 'let' works on scope-level.
        > redeclare 
            ‚úÖ We cannot redeclare in same scope which will result in error.
                    Eg: let tot = '234';
                        let tot = 'abc';
                   ‚ùå Warning: We cannot redeclare a block scope variable-name again & again.
            ‚úÖ We cannot redeclare in different scope.
               Eg: let name = '123';
                   {
                    let name = 'abc'; //Block of code
                   }
                    Res: abc
            
        > reassign
            ‚úÖ We can reassign.
                Eg: let total = 'abc';
                    total = 'wwww';
                    console.log(total);
                    // Res: wwww

                    if{
                    var a=10;
                    var b=20;
                    let c=a+b;
                    }
                    console.log(c); //Res: ?

    - 'const' means constant
        > redeclare 
            ‚úÖ We cannot redeclare in same scope which will result in error.
                Eg: const pi = 3.14;
                    pi = 5;
                    console.log(pi);
                     // Res: Error
                ‚ùå Warning: We cannot redeclare a block scope variable-name again & again.
            ‚úÖ We can redeclare in different scope.
                Eg: const name = 'Ravi';
                    {
                        const name = 'Ravi One';
                        console.log(name);
                        // Res: Ravi One 
                        // like in scenarios like school attendance register
                    }
        > reassign
            ‚úÖ We cannot reassign.

Day 2 : 16-05-2023 agenda: -----------------
    Basic revise (From Day 1)
    Doubts related to Variable and data type-
    Q&A:
    Strings (One of the data type)
    Control Flow statements
-------------------------------
LMS 
Sub-Topics
    Strings
    Inbuilt Functions - Strings
    Null and undefined
    If-else

Session Details
    1. Strings
    2. Inbuilt Functions - Strings
    3. Null and undefined
    4. If-else

Practice resources:
    FrontEnd Quiz | Community
    Strings
    Working with strings

LMS END

JS handles all the controls in the website
    - how brain controls human body
    - how human contorls the car
What is Variable?
    - It is a container to hold some data.
    - To create a variable, there are some keywords.
What is hoisting?
    - It is moving declaration to the top of the assignment & console and executes the result with value.
    - var name -> declaration
    - name = 'raj'; -> value initialization
    - Eg: name = 123;
          console.log(name);
          var name; // res:123
    - In let & const (more strict & brought discipline in variable declaration), so hoisting is not possible.
Datatype - What type of data u are storing?
    - string: 'name', 'address'
        Eg: var tyre = 'name';
    - number: 12324 ex-phone num, adhaar card not
        Eg: let phone = 123545;
    - boolean: true or false
        Eg: let isTodayMonday = false;
    - object: {} group of related items like variables etc.
        Eg: let tyre = {
            name: 'moni',
            color: 'red',
            owner: 'MRF'
            }
    - array: [] collection of related value
        Eg: let carBrand = [maruthi, tata, java] // One method of create an Array
            let carBrand1 = new Array(maruthi, tata, java); // Another method of create an Array

Day 3 : 17-05-2023 ------------------

LMS 
Sub-Topics
    Switch
    Arithmetic Operators
    Assignment Operators
    Comparison Operators
    Logical Operators
    Coercion - Implicit

Session Details

1. Switch
2. Arithmetic Operators
3. Assignment Operators
4. Comparison Operators
5. Logical Operators
6. Coercion - Implicit

Practice resources:
    JavaScript Practice Resources | Community
    Operators
    Type of coercion / Type conversion

LMS END

Datatypes:
    - string | number | boolean | array |object
In-built methods:
    - predefined rules/codes
    - starts with .
    - Gives us result based on the input

String Methods:-
    >.length
        - It tells how many characters are there in the string.
    >.toUpperCase()
        - It turns all small letter into capital letter.
    >.toLowerCase()
        - It turns all capital letter into small letter.
    >.charAt(3)
        - It shows exact letter at mentioned position.
    >.charCodeAt(4)
        - It shows computer understandable binary (ASCII) code at mentioned position.
        - ASCII -> American Standard Code Information Interchange 
        - If 'm' at 4th position from 0 then it executes m's ascii value 101
    >.trim()
        - It trims from whitespaces before and after of a string.
        - to remove leading and trailing whitespace
    >.trimStart()
        - It trims from whitespaces before of a string.
    >.trimEnd()
        - It trims from whitespaces after of a string.
    >.concat('Morning')
        - It adds two strings (+)
        - adding a string into another string
    >.slice(from, end) 
        - .slice(7,10) or .slice(-3)
        - It takes negative value and start from end position
        - negative number given means it takes from end
    >.substring(3)
        - it won't take negative
        - It don't take negative value and result will be from 0th position always.
    >.indexof('how') 
        - search exactly with word/characters in strings
        - whereas .charAt() mtd will differ as we can mention position in numbers.
    >.startswith('e') 
        - it shows res in boolean T/F if that string starts with given str then true orelse F
    >.

Control Flow
    - how ur code execution happens based on the variables or some operators
    - Conditional statements: if, if-else, switch
        > true or false
        > Eg if-else:   
                let rajesh = 23;
                if(23>18){
                    console.log('He can vote')
                }
                else{
                    console.log('He cannot vote')
                }
        > Eg else-if:   
                let mark = 400;
                if(mark<=400){
                    console.log('C');
                }
                else if(mark <=450){
                    console.log('B')
                }
                else{
                    cosole.log('F')
                }
    - looping statements: for, while , do-while

Day 4 : 18.05.2023 -----------------------
Curriculum:
    - Switch statement
    - for loop
    - while loop
    - do-while loop statement
    - Operators
--------------------------------------
LMS
Sub-Topics
    Coercion - Explicit
    Objects
    Different ways to create Objects
    Updating an Object
    Printing an Object in console
    Remove key-value pair from object
    How to get all values from an object?
    How to get all keys from an object?

Session Details
1. Coercion - Explicit
2. Objects
3. Three ways to create Objects - new Object(), Object.create(), mObj = {}
4. Updating an Object
5. Printing an Object in console
6. Remove key-value pair from object
7. How to get all values from an object?
8. How to get all keys from an object?

Practice resources:
    Objects
    Understanding JS Objects

LMS END

1. Diff between Document.write() & console.log?
    - document.write() used in UI
    - console.log() used in browser/VS code

2. Control flow :-
If-else is used for 2-3 conditions & gives True/False.
Switch Statement
    - It is used for more than 3 conditions

3. Operators :-
    - operators do some operations on operands.
   Types of Operators :-
    1) Arithmetic Operators (+,-,*,/,++a,a++,--a,a--)
        > BODMAS rule (bracket, order means power or roots, division, multiplication, addition, substraction) is the order of operations in calculations.
        > Increment & decrement
            - Pre-Increment - It will increase add 1 and then post value.
            eg:-
            let aa=11;
            console.log(++aa); //Res:12
            console.log(aa); //Res:12
            - Post-Increment - It will post as it is & then increase value for next iteration.
            eg:-
            let aa=11;
            console.log(aa++); //Res:11
            console.log(aa); //Res:12
            - Pre-Decrement - It will decrease and then post value. 
            - Post-Decrement - It will post as it is & then decrease value for next iteration.

            ‚ùå Dont's
            - we cannot assign increment & decrement to a variable.
            
    2) Assignment Operators (+=,-=,*=,/=,%=)
        > a+=1 shorthand for a=a+1; 
    3) Comparison Operators (<, >, =, <=, >=, ==, ===, !=)
        > we have to determine equality between 2 values.
    4) Logical Operators (&&, ||, !)
        [and, or & not]
        > rule for and: Both shld be T means T, anyone F means F.
        > rule for or: Both T means T , anyone T means T, both F means F.
        > rule for not: T ----> F ; F ----> T.
    5) Conditional (Ternary) Operator
        > Syntax () ? T/F : F/T
        > It assigns the value to the variable based on the condition.
    
Day 5 : 19.05.2023-------------------------------
    Curriculum:-
        - Type Conversion is also called as Coercion.
        - Objects
-------------------------------------------------
LMS 
Sub-Topics
    Practice Problem
    Doubts Clearing

Session Details
1. Practice Problem
2. Doubts Clearing

Practice resources:
    Javascript practice challange
    Online quiz

LMS END

Type Conversion: One data type to another data type.
    1) Implicit Conversion:-
        - Js will take care
        - Eg: let a = 12 + "";
              console.log(typeof(a)); //Res: string
        - add: if we have add a number and string then a string.
        - mul, div: if we have sub/mul/div a number and string then a number.
    2) Explicit Conversion:-
        - We tell the js to covert into particular type.
        - String(), Number() & Boolean()
        - Eg: convert number to string
              let age = 35;
              let str = String(age);
              console.log(str);
              console.log(typeof(str));
        - Eg: convert string to number
              let person = 'moni';
              let name = Number(person);
              console.log(name);
              console.log(typeof(name));

              Number('') //Res: 0 [Empty String is equal to 0 number]
        - Eg: convert number into boolean
              let a = 0;
              console.log(Boolean(a)); //Res: false

Objects: 
    - A container has group of properties with key & value pairs.
    - collects 2 or more no of information of a variable name.
    - Here variable-name is known as Object.

// Creation of an object
Skeleton/Syntax:-
    let var-name = {
        key:value,
        key1:value1
    }

//how to access particular key from an Object
//Ways to access are (.) & ['']
    i) console.log(var-name.key1);
    ii) console.log(var-name['key']);
              
Day 6 : 22.05.2023 -----------------------------
Curriculum:
    - Assignment 1 discussion
------------------------------------------------
LMS 
Sub-Topics
    Assignment Discussion

Session Details
    Assignment-1 Discussion

Practice resources:
    Javascript basic- Exercise ,Practice
    Programming Example

LMS END

Q-1 
let Result = str1.concat(' '),str2.trim(),str3.trimEnd()

Q-2
let enteredAlphabet = '123';
if(typeof enteredAlphabet === 'string'){
    enteredAlphabet = enteredAlphabet.toLowerCase();
}
else if(typeof enteredAlphabet === 'number'){
    enteredAlphabet = 'number';
}
switch(enteredAlphabet){
    case 'a':
    case 'e':
    case 'i':
    case 'o':
    case 'u':
    console.log(Vowel);
    break();
    case 'number':
    console.log(Non-Alphabet);
    break;
    default:
    console.log(Consonant);
} 

Q-3 (55:00)

Q-4

Q-5

Q-6

Day 7 : 23.05.2023 -----------------------------
Curriculum:
    - Object
    - Arrays
------------------------------------------------
LMS 
Sub-Topics
    Arrays
    Inbuilt Functions - Arrays
    Practice Problems

Session Details
1. Arrays
2. Inbuilt Functions - Arrays

Practice resources:
    Arrays Intro
    Array methods
    Array const
    JavaScript Practice Resources | Community

LMS END

Object
    - It is a heterogeneous datatypes.

Arrays
    - Collection of homogeneous (same kind of) datatypes
    - storing group of values with same references
    - It is denoted by [].
    - Two types of datatypes:
        1. Primitive datatypes => String, Number, Boolean
        2. Non-primitive datatypes => Array & Object is also called as reference data types
    - Declaration of array (Syntax)
      var <array-name> = [comma separated values];
    - Normally we store one by one in each declaration.
    - But using array we can store many values.
    - We no need to assign size for an array in JS.

JSON
    - Javascript Object Notation
    - Array of Objects

Index
    - Position/location of values/items.
    - index starts from 0 to n-1, where n is the number of items
    - Eg: var users = ["Kajal", "Asin", "Hansika", "Genelia", "Keerthy", "Deepika Padukone"];
          console.log(users);
          n=6 & n-1=5
          console.log(users[6]); //undefined
    - Identify an Item using Index postn values
          console.log(users[1]); //Asin
    - Adding an item in an array
          users[6]="Tammanah";
          console.log(users);
    - Length of an array => arr.length;

Methods
    - Push method to insert an array & it will always adds at end => <arr_name>.push("value");
    - Pop method to remove an items from the end => <arr_name>.pop("value");
    - shift & pop won't accept any item in its argument ().
    - push() => it will insert a new item at the end of array
    - pop() => remove an item from the end
    - unshift() => insert an item at the beginning of an array
    - shift() => Delete/remove an item at the beginning of an array
    - problem of using index for adding an item at middle is it removes before item and store new one.
    - To overcome this we use .splice()
    - sort() => sort / arrange items only in ascending/alphabetical order

**********ANYTHING IN JAVASCRIPT IS CONSIDERED AS AN OBJECT NOT LIKE DATATYPE'S OBJ LIKE IN OOPS CONCEPT*********

    - reverse() => Reverse an array of items by chaining of methods -> .sort().reverse()
    - concat() => It will merge arrays
    - isArray() => to identify array is an array
    - toString() => converts array to string
    - split() => It will convert string to an array
    - üö® splice()
       > It is mutable (changes original array)
       > arr.splice(start-index, delete/remove how many items, "what new item we need to add"); 
       > it will allow us to add an item at any specific position of an array
       > Syntax: arr.splice(start_index, remove_index, "new-item");
       > We can directly edit the original array.
       > We can delete from any index just we have to mention it as 1st parameter.
       > We can add new item in array.

Find/Search in net that object is object or not?

Day 8 : 24.05.2023 -----------------------------
Curriculum:
    - slice()
    üö® Difference between slice & splice methods? 
    - constant arrays
    - Loops
    - Types of Loops:-
        - For Loop
        - While Loop
    - break statement
    - continue statement
------------------------------------------------
LMS 
Sub-Topics
    While Loop
    For loop (Break and Continue)

Session Details
    Learn FREE Spoken English Easy and Quick on YouTube! SUBSCRIBE NOW!

Practice Problems:
    How do you find the missing number in a given integer array of 1 to 100?
    How do you find the duplicate number on a given integer array?
    How do you find the largest and smallest number in an unsorted integer array?
    How do you find all pairs of an integer array whose sum is equal to a given number?
    How do you find duplicate numbers in an array if it contains multiple duplicates?
    How do you reverse an array in place in JavaScript? In place means you cannot create a new array. You have to update the original array.
    How do you print duplicate characters from a string?
    How do you check if two strings are anagrams of each other?
    How do you print the first non-repeated character from a string?
    How can a given string be reversed using recursion?
    How do you check if a string contains only digits?
    How are duplicate characters found in a string?
    How do you count a number of vowels and consonants in a given string?
    How do you count the occurrence of a given character in a string?
    How do you find all permutations of a string?
    How do you reverse words in a given sentence without using any in-built method?
    How do you check if two strings are a rotation of each other?
    How do you check if a given string is a palindrome?

Practice resources:
    Loops
    For loops,of loop

LMS END

üö® slice():
    > Immutable means not change original array
    > Syntax: let newArr = arr.slice(no_of_items_to_delete);
    > Syntax: let newArr = arr.slice(start_index_as_arr_starts_from_[0], normal_position_starts_from_1);
üö®Main diff btn slice & splice methods:-
    slice():
        > Immutable means not change original array.
                    // pass one argument deletes slice of original array & returns in new array.
        > Syntax: let newArr = arr.slice(no_of_items_to_delete); 
                    // passes 2 arguments gives subarray
        > Syntax: let newArr = arr.slice(start_index_as_arr_starts_from_[0], normal_position_starts_from_1);
        > We need to assign it to a new array by creating new one. We can't edit in original array.
        > It takes some slice from original array & distribute it via new array & remaining all items get deleted.
        > Here we can delete from any start (eg:-0) array index & normal position if 3 means it deletes till 2nd postn.
        > We cannot add new item in array.
        > It will take some part from that original array index & return it as subset as new-array from original array.
        > 2nd parameter minus 1st parameter gives position value which counts from 1st parameter.
    splice()
       > Syntax: arr.splice(start_index, remove_index, "new-item");
       > Syntax meaning arr.splice(start-index, delete/remove how many items, "what new item we need to add"); 
       > It is mutable (changes original array).
       > it will allow us to add an item at any specific position of an array
       > We can directly edit the original array.
       > We can delete from any index just we have to mention it as 1st parameter.
       > We can add new item in array.

Constant Arrays:
    > constant means permanent/fixed/stable/can't change
    > We cannot redeclare in same scope with same arr_name.
    > When only one item need to be selected in an array or some array we don't want to change in those cases we use const (keyword means reserved word).

Loops:
    > Cycle
    > Repeating something in a particular manner.
    > Efficient method
    > In order to avoid wasting memory and time, we use loops.
    > Types: Only two i. while loop & ii. for loop

While Loop:
    - Syntax: while(condition){ 
                logic for repeat
                optional: increment / decrement; for next iteration
              }
    - Optimized & efficient one.

For Loop:
    - Syntax: for(initialization;condition;increment/decrement operator){
                    logic for code;
              }
    - 

Break statement:
    - To break at some point and completely come out of it.

Continue statement:
    - continue => To skip the items

Day 9 : 25.05.2023 -----------------------------
Curriculum:
    - Function
------------------------------------------------
LMS
Sub-Topics
    Functions
    Hoisting

Session Details
1. Functions in JavaScript: Writing our first function, Passing Arguments, Optional Args;
2. Hoisting - Variables and Functions

Practice resources:
JavaScript Practice Resources | Community
    Functions
    Define and call a function
LMS END

Function
- What is function?
    > set of reusable code - that we use to perform some action
    > Inbuilt Functions/methods means do some task which already mentioned in that code | We dont need to do any code or write statements Eg:- slice(), toString() 
    > User defined functions are developer created functions.

- How to create a function?
    > function is a keyword
    > sum() is a function_name(parameter/arguments)
    Eg:- function sumOfTwo(){ //Function Declaration | Accelerator or rules
          let a=10;
          let b=10;
          let c=a+b;
          console.log(c);
         } //Res: No execution
- How to call a function?
    > console.log(c); -----> not defined
    > To execute, we need to call the function. Until & unless we call function code will not executed.
    > sumOfTwo(); //Above code executes | Function call 
- How to pass the parameters to the function?
    > Reusability
- how we can get result from the function?
    > return keyword is used to returns the result to function call.
    > If return is spotted immediately comes out and gives the result. This won't checks for code lines after return keyword.
    > return is optional.

-  How to print at console using function call - invoke?
    > using return keyword at end within function block of code 
    > And (outside the function block) variable declaration = function call();
    > 'return' value will store at variable declared outside the function when variable mapped with function call.
    > Without return keyword if we call the function after variable declaration and console it becomes undefined datatype.

- function hoisting:
    > function declaration are hoisted at the top
    > It is similar to var keyword

- Link: https://github.com/Thangarajcs/js-notes/blob/main/day-9

Day 10 : 26.05.2023 -----------------------------
Curriculum:
    - Objects continuation
    - Function continuation
    - Doubt clarification Q&A
------------------------------------------------
LMS
Sub-Topics
    Practice Problem
    Doubts Clearing
    function cont....
    Objects - cont

Practice resources:
    Questions
    Quiz
LMS END

Practice:
    - Square of a Number using dynamic function
      var i;
      function squareOfNum(10){
        var j = i * i;
        return j;
      }
        res = squareOfNum(i);
        console.log(res);
    - https://contactmentor.com/js-function-exercises-solution/
Function (fn):
    - For parameters, we don't need to store in a variables as we are already directly passing the parameter in fn.
    - Because we directly use parameters which are already defined.
    - Always use return in place of console.log inside function so it will come out of fn block which assigns to a var outside and we can reuse it many number of times outside fn block.
    - "===" => compares even datatype of two sides too which evaluates strictly.
    - Scope of Function is within {}
    - Function Hoisting (from Day 2):     
        > Hoisting means moving declaration to the top of the assignment & console and executes the result with value.
        > When fn call placed before fn declaration & executes.
     üö® > Function declaration is Hoisted.
    - Function Expression:
        > When we explicitly assign a func to a variable its called fn expression.
        > Instead of fn name that name comes in place of variable_name
        > Syntax: let variable_name = function(a){
                    return a='Hai';
                  }
                  console.log(variable_name());
        > Eg:- const sum = function (){
               return 'hai';
               }
               console.log(sum());
        > If we try to access this con.log() before fn block, it will show "Cannot access 'sum' before intialization" -> Reference Error
        > So we cannot Hoist around fn expression.
    üö® > Function expression is not Hoisted becoz it is strict validation.

üåüüåüüåüüåüüåüüåüüåüüåüüåüüåüüåüüåüüåüüåüüåüüåüüåüüåüüåüüåüüåüüåüüåüüåüüåüüåüüåüüåüüåüüåüüåüüåüüåüüåüüåüüåüüåüüåüüåüüåüüåüüåüüåüüåüüåüüåü
Conclusion: üö©üö©üö©üö© FN EXPRESSION ARE NOT HOISTED ONLY FN DECLARATION ARE HOISTED AT THE TOP LEVEL   üö©üö©üö©üö©
üåüüåüüåüüåüüåüüåüüåüüåüüåüüåüüåüüåüüåüüåüüåüüåüüåüüåüüåüüåüüåüüåüüåüüåüüåüüåüüåüüåüüåüüåüüåüüåüüåüüåüüåüüåüüåüüåüüåüüåüüåüüåüüåüüåüüåüüåü
    - typeof operator of function => object but it returns function in browser console.
    - 'arguments' is a predefined keyword for inbuilt functions like add() etc. 
        <!----------------PARAM VS ARGUMENTS---------------------------------->
        > Eg:- function sum(gettingReceiveParameters -> a,b,c){
               console.log(arguments <- 10,'Hai", 50);
               }
               sum(givingSendArguments -> 10,'Hai", 50);
        > Eg:- function sum(a,b,c){
               console.log(c); => prints one of parameter named as c => 50
               }
               sum(10,'Hai", 50);
        > Eg:- function sum(a,b,c){
               console.log(arguments); => prints entire list which is stored like array
               }
               sum(10,'Hai", 50);
               //arguments[0] => 10
               //arguments[1] => 'Hai'
               //arguments[2] => 50
Exercise for Function Expression:
    - Odd/even
    - Square of 2 nos

Objects Datatype (obj):
    - Obj is a basic building block of a program.
    - It is a collection of properties in key='value' pairs which are separated by (,)
    - Eg: let car = {
            model:"bmw",
            color:'blue',
            type:'automatic'
          }
          console.log(car.color) => Access above object properties using (. operator) | Printing an obj in console
    - Update an object:
      --------------------------------------------------------------------------------------------------------
        > Now I want to change the color of car
        > Eg: car.color ='red';
              console.log(car.color); 
              console.log(car); => How to get all values from an obj?
        > So best way is to use OBJECT LITERALS means obj={}
        > const student = {
            rollNo: "0024",
            name: 'Ravi',
            mark: 240
         }
    - Three ways to create an obj: new Object(), Object.create(), mObj={}
        1. using 'new' keyword:
        ------------------------------------------------------------------------------------------------------------
        > Syntax: const student = new Object();
                  student.class='first';
        > We can create new pair and make it sit at last inside obj collection of pairs. But it is not correct way of approach which reduces performance.
    -  2. Copy Obj 
      --------------------------------------------------------------------------------------------------------
        > Syntax => let newObjName = Object.create(existingObjName);
       3. 


    - How to get all keys from an obj?
    
    - Remove key-value pair from obj

Day 11 : 29.05.2023 -----------------------------
Curriculum:
    - Array iteration methods: forEach(), map()
    - Assignment-2 discussion
    - Doubt clarification Q&A
------------------------------------------------

Array iteration methods:
    - forEach()
        > It contains 3 params: 1st value, 2nd is index of that value, 3rd is whole array
        > SYNTAX:-
        > arr.forEach(function(currentValue, index, wholeArray){
            console.log(wholeArray);
        })
                    OR
        > arr.forEach(myArr) // myArr is function_name
        function myArr(currentValue, index, wholeArray){
            console.log(wholeArray);
        }
        > checking methodology
        > It does not mutates (changes) original array & returns not as new array but as updated individual values.
        > If we want output in array format we need to explicitly create an empty array and print it.
    - map()
        > if u map an array forms a new array with ur actions
        > always map method will return new array with updated values
        > SYNTAX:-
        > let newArray = orgArray.map(function(value,position,array){
            console.log(value);
        })
                        OR
        > let newArray = originalArray.map(function_name)
          function function_name(value,position,array){
            console.log(value);
        }
        > It does mutates (changes) original array & returns as new array with updated values.

Day 12 : 30.05.2023 -----------------------------
Curriculum:
    - Intro to DOM -> Documentation Object Model
    - DOM methods: getElementById(), getElementsByClassName(), getElementsByTagName(), querySelector(), querySelctorAll()
    - Doubt clarification Q&A
------------------------------------------------
LMS
Sub-Topics
    Introduction to DOM
    Selecting Nodes getElementById() - getElementsByClassName

Session Details
    JavaScript PopUp Boxes | Community!
1. Introduction to Document Object Model(DOM)
2. DOM Structure
3. Selecting Nodes - getElementById, getElementByClassname, getElementByTag, Query Selectors

Practices:
    DOM
    Basics of DOM

LMS END

Intro to DOM
    -> Documentation Object Model
    -> JavaScript can control HTML and CSS via Document Object
    -> JS can change html Element, attribute, css styles (Add or Removed)
    -> SYNTAX
    -> Document is an inbuild Object that has access to html and css
    -> Access any element by id or className

DOM STRUCTURE
    -> It arranges items in tree format like below:
        > Document is root element under which html element comes under which 2 elements: head & body...then under head is link tag element....under body is <div id="myDiv"> placed.
    
DOM MANIPULATION
-> moving / adding / deleting
-> (.) means object
-> Once you get the element u can modify the element: innerHTML, Access style & attribute
-> DOM provide methods to traverse inside the document object or tree:
        ‚èπÔ∏è getElementById()
        ‚èπÔ∏è getElementByClassname()
        ‚èπÔ∏è getElementByTagName()
        ‚èπÔ∏è querySelector()
        ‚èπÔ∏è querySelctorAll()
 1. getElementById()
    - Uniquely identify elements
    - Access html element by id
    - It will always returns u only (single unique) an element with given id
    - once u get the element u can access inside properties
     i. innerHTML
        - innerHTML: content of the HTML element between open & close tag.
        - Eg:- p tag's content - Lorem epsum prints
 2. getElementsByClassName()
    - Access html element by SAME/DIFFERENT className.
    - So we can change same style to multiple elements using same className. From that we can access using index for an element to apply.
    - We can change all css properties too.
    - Returns Collection of Items one by one
 3. getElementsByTagName()
    - Access all html element by HTML Element's Name.
    - Returns Collection of Items one by one
    - Eg:- <div>
 4. querySelector()
    - Combinators like body .child{}
    - Returns only 1 item which is first element in whole document that matches a CSS Selector.
    - Eg:- const q = document.querySelector('body .child'); //  returns only 1 item
           console.log(q);
           
 5. querySelectorAll()
    - combinators like body .child{}
    - Returns Collection of Items one by one
    - Eg:- const allq = document.querySelectorAll('body .child'); // returns all matching items as a list Eg: NodeList
           console.log(allq);
      Eg:- <script>
           let a = document.querySelctorAll(p.para); // we can access only p element with para class content
           console.log(a);
           </script>
           <body>
           <p class="para">1</p>
           <p class="para">2</p>
           <p class="paragraph">3</p>
           </body>


Day 13 : 31.05.2023 -----------------------------
Curriculum:
    - DOM add, delete & update
    - Array iteration methods
    - Doubt clarification Q&A
------------------------------------------------

LMS 

Sub-Topics
    find tags
    update tags
    delete
    
Session Details
1. Finding HTML Elements:
    document.getElementById
    document.getElementsByClassName
    document.getElementsByTagName
    document.querySelector
    document.querySelectorAll

2. Changing HTML Elements:
    innerHTML
    style
    src
    attribute
    element.setAttribute(attribute, value)

3. Adding and Deleting Elements:
    document.createElement(element)
    document.removeChild(element)
    document.appendChild(element)

Practice resources:
    Events
    Handling Events in javascript

LMS END
img
    - adding id & classnames dynamically
    - UPDATING ALL BY SEARCHING DOCUMENT ELEMENTS
Changing HTML Elements:
    - innerHTML
    - style
    - src
    - attribute
    - element.setAttribute(attribute,value)
Adding & Deleting Elements:
    - document.createElement(element) - add a new element to the Document
    - document.appendChild(element) - push our image into document's body tag | adds newtag variable
    - document.removeChild(element) - it removes from existing child
    - document.replaceChild(new,old)
<!-- <img id="myimg" class="image1 image2" src="" alt="">
    <div class="newpara">

    </div>
    <div class="empty" id="tag">1
    </div>
    <div class="empty">2
    </div>
    <div class="empty">3
        <img src="" alt=""> This image should be push into this div using JS // Comment
    </div>
    <div class="empty1">
    </div> -->
 /* Practice Ques:
            - Add img tag using createElement method
            - Perform delete of 2nd para element <p> tag that is inside is div
            - for a div set class, set some new attribute
            - add input tag into body
            - in html div has yellow background - change to green backgroung using JS */
//img
        /* let imgtag = document.getElementById('myimg');
        //let imgtag =document.querySelector('#myimg');
        //let imgtag =document.querySelectorAll('#myimg');
        //UPDATING ALL BY SEARCHING DOCUMENT ELEMENTS
        imgtag.src = 'https//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/External_link_font_awesome.svg.png'
        imgtag.style.width = '200px';
        imgtag.style.height = '200px';
        // adds classname for your element dynamically | Updating class names
        imgtag.classList.add('wwww'); // This will append at last of image1 image wwww
        imgtag.id = ('sss');
        imgtag.setAttribute('mybatch', 'sssss'); */

        /*
        //CREATE IMAGE TAG
        // doing operation like adding style like css in js, creating html elements in js inside document
        let imgnew = document.createElement('img');
        //added src attribute
        imgnew.src =
            console.log(imgnew);
        imgtag.setAttribute('dddddd', 'aaaaa'); // dddddd & aaaaa means attribute name
        */

        /*
        // now I need to tell document where to add my image
        document.body.appendChild(imgnew);
        //if u want in specific place
        //search ur target element - where to add ur img
        let target = document.getElementsByClassName('empty'); //empty means classname
        //As class returns in array we need to indicate index
        target[2].appendChild(imgnew);
        */

        /*
        //removeChild()
        let targetDocument = document.getElementsByClassName('parent'); //parent means classname of body
        targetDocument[0].removeChild(targetDocument[1].firstElementChild); // removed 2nd div inside body by using classname
        targetDocument.removeChild(targetDocument.firstElementChild); // removed 1st div inside body by using id
        targetDocument.removeChild(targetDocument.Children[1]); // removed 1st div inside body
        */

        //Task - create/add a button to the body
        /* let newBtn = document.createElement('button');
        newbtn.innerHTML = "Button";
        document.body.appendChild(newBtn); */

        //need to add paragraph to div with class - ragav
        /* let newpara = document.createElement('p');
        newpara.innerHTML = 'sawetwhgbnfmgj,ykuytrere dsryteryuyjtu'; */
        //u need to find the target by className
        /* let targetDiv = document.getElementsByClassName('ragav');
        targetDiv.appendChild(newpara); */
        //u need to find the target by id
        /* let targetDiv = document.getElementById('ragav'); //if ragav is id means
        targetDiv[0].appendChild(newpara); */

Day 14 : 01.06.2023 -----------------------------
Curriculum:
    - Intro to Events
    - Event Handler
    - Event Listener > Event Propagation : i) Bubbling ii) Capturing
    - Doubt clarification Q&A
------------------------------------------------
Events means actions like click using mouse, pageload, keypress using keyboard
onclick we have to add event which wrapped in a function 

In HTML how to add events attr:
event attributes: onclick(), onchange(), onload()
<body onload="sayhi(5)">

event handlers - who handles ur task like click | perform tasks when action fires
_______________________________________________________
How to add events using JS:
Without Param:
let btn = document.getElementsByClassName('btn');
btn[0].onclick = sayhi; // We cannot assign using js mtd but useful when everything is dynamic onclick what content show up

With param:
To generalize using arrow wrapper function with param:
let btn = document.getElementsByClassName('btn');
        btn[0].onclick = function () {
            sayhi(4)
        }
Note:- Assignment-4
We should not store image's index number as parameter directly in event handler. Instead create new function with index & call inside event handler.
_____________________________________________________

event listeners - who listens to that click which take care of what event should do
                - will observe events & if specification matches actual execution starts and obeys
                - we can add same event multiple times
______________________________________________________________
        btn[0].addEventListener('event_name', when I click what i should do -> functionName)

______________________________________________________________
diff btn event handler & event listener
handler: to click
    - with this we can add only one event
Listener: to solve overlap/override problem we have this will doesn't overlaps shows all values
    - with this we can add same event multiple times
________________________________________________________________-
bubbling:
    It means button inside div but both alerts will pop ups even we touch button only div's alert also will PopUp
    Inward to outward as btn1 inside div1 container
    in addEventListener('click', sayhi)
    by default bubble
    inner element to outer element
    if there is no third param then bubble will happen or if u send 3rd param as true capturing happen


Event Propagation: (in to out or out to in) Another feature of event listner
Transmitting an event on click
To overcome bubbling, Way of defining the event order 

    1) bubbling (in to out)
            in addEventListener('click', sayhi, true) 
               -> false means by default bubble happens;  
               -> button => div => body | child to parent to grand parent

    2) Capturing (out to in)
               -> true should be passed as 3rd parameter in addEventListener
               -> body => div => button | grand parent to parent to child


Day 15 : 02.06.2023 -----------------------------
Curriculum:
    - DOM add, delete & update (CRUD file)
    - Array iteration methods
    - Doubt clarification Q&A
    https://github.com/Thangarajcs/todo-project
------------------------------------------------
üö®/***********innerHTML VS innerText VS textNode**********/

/* // Diff btwn innerHTML, innerText & textNode using <button>
function getData(){
    let todovalue = document.getElementById('user-btn');
console.log(todovalue.innerHTML); -> Res: Add todo
}

*/
/* // Diff btwn innerHTML, innerText & textNode using <div>
function getData(){let todovalue = document.getElementById('user-div');
console.log(todovalue.innerHTML); -> Res: this is div &<p>ssss</p>
todovalue.innerHTML=''; -> This will remove innertext & html tags

console.log(todovalue.innerText); -> Res: this is div & ssss 
// innerText will extract only text from all tags like todovalue.innerHTML; & we cannot assign like todovalue.innerText='';

// to add a text via code use createTextNode()
let newNode=document.createTextNode('ssssqqqqq');
todovalue.appendChild(newNode);
}
*/

// HTML like string in JS using back tick (`)



Day 16 : 03.06.2023 -----------------------------
Curriculum:
    - Event 
    - small projects using event listener
    - Data Validation
    - Doubt clarification Q&A
    
------------------------------------------------
Event -> Any action performed by user / happened on web browser
Eg:- click, scroll, keypress, page load

üö®SYNTAX:
 Event Handler 
    -> elementName.eventName = functionName;
    -> eventName : onclick

 Event Listener 
    -> elementName.eventName("event" ,functionName);
    -> eventName : addEventListener()
    -> event : click, keyUp, submit, scroll, keyPress, pageLoad

DOM 
    -> Documentation Object Model
    -> To get an element from html

Features:-
1. dark Mode/light Mode Model
2. zoom In and zoom Out

Data Validation for form:-
    - Reg form contains Email, pwd & confirmPwd
    - Kinds of Events in reg form's input field & in addEventListener("below_ones", functionName)
    - Input:
        > keyup
        > keyPress
        > onFocus
        > onBlur
        > click
        > mousemove: when u move cursor inside some div/html elements
        > mouseover: hover-on
        > mouseout: hover-off
        > mousedown: when u click mouse button & till release of it this happens
        > mouseup: A user releases a mouse button over an element
        > https://www.w3schools.com/jsref/dom_obj_event.asp
    - SYNTAX:
        > element.addEventListener(event, function, useCapture);
        > useCapture means true gives event capturing otherwise by default false which represents event bubbling(inner to outer elements)
    - function functionName(e)
        > e means event for input key events like keyup or keydown events 
        > we need to pass from our input field for which key we press and same shows at console when we console.log it
        > e.target.value attribute for which key press there
    - To store these keyPress values
        > Create a variable & store in it
        > Default functionality of Register button is load to next page
        > To make it not to load to next pg by default, we use event.preventDefault() -> prevent from reload a page so that we can view in console log
Hamburger button:-
https://codepen.io/Athira231996/pen/wvYVQoX

Day 17 : 05.06.2023 -----------------------------
Curriculum:
    - String Literal : new way to build html in dom.
    - Arrow Function
    - Array method (reduce, some, every)
    - Doubt clarification Q&A
------------------------------------------------
Normal quotes:
    > Eg:-'This is my name' 
    > between Normal Quotes used for string
    > We can't pass dynamic value between normal quote

String Literal / Template literals ${}:
    > HTML skeleton inside JS using SL
    > Eg:- `String value` 
    > between (` `) Back Tick (Above Tab key) used for string literal we can pass dynamic value (multiple string lines) using ${}
    > SYNTAX: 
        `ur whatever str value ${variable}`;

Arrow Function:
    > SYNTAX: Without function keyword
        const arrowFunc = () => {
            console.log(this);   
            console.log('ssss');   // Res: ssss
        }
        arrowFunc();
    > But in normal function it won't behave like this
    > It is same as function expression only usage of binding of this will vary.
    > It is a regular expression function only syntax is diff & this keyword has some effect advantages in the arrow function.
    > If we pass only 1 param in function then no need to use ()
    Eg:-const arrowFunc = q => {
        console.log('ssss');
     }
    > If multiple params use within round brackets()
    > usage same as regular function expression but syntax will vary and 'this' in arrow function will behave differently according to the call

this
    > 'this' keyword behaves like according to the situation
    > suppose this called from some other object/function that will be different.
    > ryt now this called from global top-level so only window object output given
    > In HTML, we can use instead of parent element.

forEach()
    > It is used for no updation in future.
    > Don't want to return in new array.

Map()
    > It is used in use case scenarios like we want to update data in future.
    > This will return in new array which assigned to a variable.
    > Stores return values of updated array in a variable.

Array Methods:
1. every()
    > It will return True only when all items matches the condition.
    > Even one item fails to match condition returns False
    > Next condition won't be executed so strict officer it abruptly stops when not matched
    Eg:-let age = [13, 19 ,19,20,9]
        const result = age.every(function(val){
            return val > 18;
        })
        console.log(result);
    > every() means is everyone is above 18? asking....no so it returns as false as not every val is above 18 (Boolean Value). If one fails also this will return F
    > similar to map every() also assign to a variable

2. some()
    > It will return True if anyone items matches the condition.
    Eg:-let age1 = [13, 19, 19, 20, 9]
        const result1 = age1.some(function (val) {
            return val > 18;
        })
        console.log(result1);
    > Anyone item passed condition, it will returns True.

Diff among (forEach & map) and (every & sum)?
- In forEach & map, it iterates for every items no matter what 
- In every & sum, it won't iterates after encountering 1st instance once condition not matched or matched returns False or True.

reduce()
    > we are going to reduce this array into one result like addition
    > We perform some operation in this so it returns one res
    > Syntax:
    const res = total.reduce(function(acc, value, index, arr){
            return acc*val;
        })
    console.log(res);
        where function means callbackfunction
              total means holds calc temporarily for every iteration / accumulator = 0 initially

Day 18 : 06.06.2023 -----------------------------
Curriculum:
    - BOM 
    - 
    - Array method ()
    - Doubt clarification Q&A
------------------------------------------------
DOM
    > Ur representing ur content (document tree)

BOM (Browser Object Model)
    > We will talk to browser
    > Interact with browser using Objects
    > Browser is a tool to showcase ur website using DOM

> Window Object -> Inside window only document is available
    -> Only var can be used to declare a variable as it is global keyword.
    - window.open()
    - window.close()
    - window.moveTo(2)
    - window.moveTo(0,300)
    - window.innerHeight
    - window.outerHeight -> Total Height of screen
    - window.innerWidth
    - window.document
> Screen Object
> Navigation Object
> Location Object
> History Object
> Local Storage

1. Window Object:
    - It represents the browser's window
    - all JS global objects, (var) functions will be under window.
    - Eg:- window.innerHeight, window.innerWidth

2. Window ----> Screen Object:
    - Presents inside a window
    - window.screen 
    - visitor height in pixel, avialHeight:1080, availLeft:-1920, availTop:-180, availWidth:1920, orientation & many 

3. Window ----> Navigation Object:  window.navigator
    - Visitor browser from one tab 
    - browser setting information 
    - Like name of the browser, 
    - appName: Netscape is developer of Chrome,
    - connection: NetworkInformation{effectiveType:'4g', downlink:1.55}
    - vendor: Google Inc 
    - cookieEnabled: true or not

4. Window ----> Location Object: window.location
    - Like URL, host: "127.0.0.1:5501"
    - hostName: "127.0.0.1"
    - href: "http://127.0.0.1:5501/"
    - origin: "http://127.0.0.1:5501"
    - pathname:"/"
    - port: "5501"
    - protocol: "http:", "https:" s means connection is secured
    - reload: f reload()
    - reload: f reload()
    - replace: f replace()
    - toString: f toString()
    - valueOf: f valueOf()
-> location.reload() is used to reload the browsers
-> location.reload() is used to reload the browsers
-> location.origin('www.gmail.com') 

5. History Object: history
    - It holds the browser history
    -  history.back() -> archives
    -  history.forward()

6. Storage üö®: [Front-end developer can access]
    Eg:- AddToCart things are stored in LocalStorage
    - Web storage under Application Tab we can see both storages.
    - It is a way to store some information in the browser
    - There are two storages:
    1. Local Storage:-
        > It is a container where u store local objects
        > To set a new item in local storage using setItem()
        > Permanent storage of key:value pairs
        > There is no expiry for setItem once we set an item unless until we manually / port deletes it...this stored in local storage forever even we remove code also that stays all time.
        > It keeps info forever until we delete (either manually or using removeItem method)
    localStorage.setItem(key, value)
    localStorage.getItem(key)
    localStorage.removeItem(key)

    2. Session Storage:-
        > Temporarily stored key:value pairs
        > This means once we close that tab session gets expires and deleted stored value without deleting too.
        > This is active only until we close that tab.
        > It keeps info only till we close the window
    sessionStorage.setItem(key, value)
    sessionStorage.getItem(key)
    sessionStorage.removeItem(key)

Cookies: [Back-end developer can also access]
    - It is also kind of storage but not locally related to our code 
    - It is a kind of high level storage purpose in string form
    - Keys stores like some minute high level information
    - Like logged or not, user-id, ur information is shut down, server forgot about
    - This can be interacted with & sit directly in str form by server also
    - It contains name, value, domain, path, expires, size, HttpOnly, secure, sameSite, partition, priority etc.
    - Used for secured information like login credentials, bank details etc.
    - There is connection loss suddenly due to power cut server won't send again n all webpage takes from cookie.
    - How I know user information or how to remember if connection loss happens?
    - window.document.cookie = 'name=hi'
    - Cookies are saved in name-value pairs like:
            document.cookie='name=test; expires=Thu, 01 Jan 2024 00:00:10 GMT'
    - expires: session or date with time 
    - Max. storage 4MB  

Day 19 : 07.06.2023 -----------------------------
Curriculum:
    - JSON
    - AJAX
https://github.com/Thangarajcs/js-notes/blob/main/ajax-07-06

https://www.tutorialspoint.com/http/http_methods.htm
------------------------------------------------
JSON - Java Script Object Notation
    > Data Format that will be used to exchange things
    > Most popular data exchange format from front-end to back-end or vice-versa.
    > When client req for data match at server end becomes success by matching then server responses back with some information like next page comes in JSON format.
    > JSON is a text format to store & transporting the data . It is a data format between server and client
    > Can read server data in JSON format - JSON Strings
    > Sometimes called as json string which makes everything string.
    > There are many formatters like XML, JSON etc.
    > JSON is the most popular data exchange formatter.

JSON Data Formatter:
    > Client-side: JavaScript lang
    > Server-side: Some othr langs like GoLang, Java, Python etc
    > 2-Way Communication: While communicating b/w client & server should be of same language for that JSON format is used like common lang English. Then respective to their ends we will convert into their formats.
SYNTAX: (No Space)
JavaScript Object:
    const obj = {
        name: 'raju'
    }
    console.log(obj.name); 
Syntax:
        const jsobjName = {
            key:"value"
        }
        // Key access (Direct)
        console.log(objName.key);

JSON Object String:
    > If we add everywhere string in JS Obj becomes JSON Object
    > It is called as JSON String as it looks like string.
3 set of Rules for JSON Obj String:
    > There shld be No Space in syntax, 
    > {} should be within '' -> '{}' & 
    > keyNames should be within "" -> "key".

JSON Declaration:
    > SYNTAX: (No Space)
     const obj1 = '{"name":"raju","age":27}';
     console.log(obj1); // Prints as it is!
     console.log(obj1.name); // Res: Undefined

Conversion gives us JSON key's value:
1. GET method:
    > 2 Scenarios
    i. Fetched - Received from Server end as reponse for our request, so we convert at client end for accessing it.
    ii. Created - Already we created a JSON Obj Str, but need to see it as JavaScript for that convert.
    > Front-end sends req for that received response as in json format. Now to show it in UI we convert into JS.
    Example:- 
    criccBuzz.com website under Network -> Fetch/XHR -> select Fetch, under Response (JSON) / Preview (JS)
    > JSON.parse() - convert fetched/created JSON String into JS Object format
    > Syntax:
        const JSONobjName = '{"key":"value"}'
        // JSON String to JS Obj
        const varName = JSON.parse(JSONobjName);
        console.log(varName);
        // Res: {key:'value'}
        // Key access (Indirect)
        console.log(varName.key); //Res: value

2. POST Method: (Stringify & Send it to Server for Storing)
    > From Client to Server end we convert while data Exchange
    > Send above normal js obj to server by converting into JSON Str
    > JSON.stringify() - convert JS Object into JSON String format 
    > Syntax:
        const jsobjName = {
            key:"value"
        }
        const varName = JSON.stringify(jsobjName);
        console.log(varName);
        // Res: {"key":"value"}

JSON.parse() & JSON.stringify() are translators which inbuilt properties.

Diff b/w JS Obj & JSON StringObj?
    > We can console obj.key in JS Obj whereas in JSON Str cannot directly console but we can console after conversion using JSON.parse()
    > As JavaScript is normally understandable lang but JSON is not understandable format.
    > So we need to convert JSON str into 
    > Compare line nos 1534 & 1548

AJAX
    > Asynchronous Javascript And Xml
    > Instead XML, we use JSON format.
    > To make connections betweeen client and server
    > Data transferred to our User Interface and displayed like cricket score, weather report data
From where data is getting updated in UI?
    > Web-Server & client interaction using method AJAX
    > Reads dynamic data from Web-server & show in Web-browser UI Page (Client)
    > For that we have mechanism/tool in JS called AJAX & advanced form of AJAX is Fetch.
    > On clicking Sign Up button handled by AJAX
    > Reads data from server & display on web-page as UI display (data always supplied from server)
    > You can also send the data to server using AJAX.
    > Client sends request
    > Server process the request and sends the response back to client
    > Server URL - API

    > new is a keyword complicates the code and slows down execution speed. 
    > Do not create Number Objects which produce unexpected results.
     Eg:- let y = new Number(123);

    > XMLHttpRequest() 
        - creates new http request object
        - initiator of AJAX Object
        - is a method gives you several properties to communicate with server
    > both creates a new xmlhttprequest object
    
this 
    -> this is a keyword reponses according to the situation
    -> represents here xml http request object 
    -> Here it is a response of req.open('GET method', 'URL') & req.send()'s request

response -> Gives output once request is accepted. It is also in JSON object.

responseText -> Data is stream & response will be json like that. Sometimes both can be same. Not worried about server in that scenario u can use it.

HTTP METHODS:-
GET, POST, PUT, HEAD, PATCH, DELETE, etc refer above site.
HTTP Request Methods
> Onclick some interactions happens due to httpreq sent to the server. 
    > send() -> send request to server via browser
    > send() -> Initiates communication
    > open() -> Which server address & what http method
    > onload -> we can assign a function this will be executed once request is successful & data delivered
    Within function we can access those delivered data.
    > status() -> 200 means successfully data delivered but 400+ or 500+ means fails to get data due to some mistake in url or errors.
    > onchange()  
    > post()
    > put()
    > head()
    > patch()
    > options()
    > connect()
    > trace()
    > delete()

Http Status codes
    > 100 - Information
    > 200 - Success
    > 300 - Redirection
    > 400 - Client level Error
    > 500 - Server level Error

Response part
    > onload to the request part

HTTP Request part
    > Hyper Text Transfer Protocol
    > makes connection to server URL using get method

RequestHeader
    > We sends it.

// task 

//url - https://jsonplaceholder.typicode.com/albums
// method - GET

// get the data from server and show in  UI

Day 20 : 08.06.2023 -----------------------------
Curriculum:
    - AJAX
    - HTTP
    - Array method ()
    - Doubt clarification Q&A
    - For practice dummy json site:
https://jsonplaceholder.typicode.com/
https://dummyjson.com/products
https://github.com/Thangarajcs/js-notes/blob/main/1686176884663.pdf
------------------------------------------------
AJAX

Error Handling with Try-Catch:
    > try-catch error
    > catch an error and how to find & avoid it?
    > using throw
    > this gives the way to handle the errors
    > for API errors not for validation errors
    SYNTAX:
    try{
        normal code
    }
    catch(err){
        // from try block error will be caught here
        console.log('my error',err);
    } finally{

    }

throw (compilation error means code err):
    > throw keyword means manually throws the error missing

finally (funny):
    > no matter what it executes all time

API:
    > Application Programming Interface
    > That fake or reel API/dummy json placeholder itself is called API
    > Bulk Data (Datum) usually we get from APIs/KPIs
    > Interacting with some other machine.
    > In BackEnd only back end developers create APIs

Fetch - api: 
    > fetch()
    > new way of calling ajax urls
    > It allows you to make http request to server
    > No need to use XMLHttpRequest()
    > This makes code simpler way & advanced version.



Day 21 : 09.06.2023 -----------------------------
Curriculum:
    - Event Handler VS Event Listener
    - Simple Object
    - BOM
    - DOM
    - JSON
    - AJAX
        -> GET Method
https://codepen.io/Athira231996/pen/bGQNmKV
        -> POST Method
https://codepen.io/Athira231996/pen/bGQNmmE?editors=1111
------------------------------------------------
Event Handler VS Event Listener:
    > Handler assigns to a function & replaces/overrides for same function with different values
            // btn.onclick=function(){} -> One Way Handler

    > Listener itself a function inside which we pass an event, function
    > It won't replaces/overrides for same function calls with different values
            // btn.addEventListener("click", function); -> One Way Listener

Simple Object:
    > How to access keys (2 methods)
        1. Object.key="";
        2. Object["key"]="";
    > Reference Chaining: We can also assign an object to another variable which passes same Key:Value pairs to it.
       Eg:- let newObject = oldObject;
    > To overcome this Reference Chaining, we can do copy of that object. Refer Qiuz-6 Q-1
    > How to update value? oldValue gets replaced by newValue
       Eg:-  newObject.key="newValue";

BOM (Browser Object Model):
    > Anything related to browser
    > Window: 
        window.alert(), prompt() etc
        document => history => location => screen => navigator
    > document: DOM -> CRUD Operations(Create, Read, Update, Delete)
        // search
        document.getElementById
        document.getElementsByClassName
        document.getElementsByTagName
        // create
        document.createElement('div)
        // remove
        element.remove();
    > history: History of the browser
        search history
        > history.length
        < 2
        > history.forward
        < f forward(){[native code]}
    > location: shows current URL
        window.location
        port, hostname, protocol: "http:" without s means not secured | "https:" means secured
        To access location.port, location.protocol, location.pathname
    > screen: Screen Size
        orientation, width, height
    > navigator: device specification (Hack)
        bluetooth, appVersion, Connection, geolocation, userAgent, permissions

DOM (Document Object Model):
    > Document, HTML & its children elements
    > It is like a tree model.

JSON (Javascript Object Notation):
    > Array of Objects
    > How to access json? -> objectName[i].keyName -> here 'i' means 0 to ObjectName.length

    For Practice:
        https://jsonplaceholder.typicode.com/todos

AJAX (Asynchronous JavaScript And XML):
    > AJAX is httprequest made by the JS to receive or send data from the server without refreshing the page while we jump from one page to another page.
    > Update a web page without reloading the page
    > Requests data from a server - after the page has loaded
    > Receives data from a server - after the page has loaded
    > Sends data to a server - in the background 
    > Synchronous means will take some time until it gets response won't move to next line of code
    > Asynchronous means it will not wait up to get the response, it will run the next lines
    > Advantages of Asynchronous: Time consumption reduced, quick compilation
    > XML means Extensible Markup Language is user-defined tags like in keyName we create tags of user-details within user tag

AJAX Steps:
There are 4 steps to create AJAX. They are:
__CONNECTION_________________________________________________________________________________
    Step:1 Instantiate/start XMLHttpRequest() connection
    Step:2  To open a connection: use open method on it and pass methods(GET,POST etc.) and endpoint means URL
    Step:3 Send the request to Server
    Step:4 Register an Add EventListener method to eventName = "readystatechange", function = onReadyStateChange
__CHECK RESPONSE______________________________________________________________________________
Within server send us reponse, what are the things we have to check
    Step:5 After receiving the response, what are the things we have to check following:
        1. readyState should be 4
        2. statusCode should be 200 for success code - correct response
        This means getting exact responses & no data missing

___Pre-request OR AJAX Call___________________________________________________________________
        1. endPoint: "https://jsonplaceholder.typicode.com/todos"
            demo API / Public API from websites for practice
            In real projects, backEnd developers will provide endPoint URLs
        2. method: "GET"
____SYNTAX:___________________________________________________________________________________
    1. var ajax = new xmlHttpRequest();
    2. ajax.open(method, endpoint) => ajax.open("GET","URL");
    3. ajax.send();
    // Register an Event Listener to make this step work
    4. ajax.addEventListener("readystatechange", onReadyStateChange);
    // string to JSON 
        => let a = JSON.parse(String);
    // JSON to string 
        => var b = JSON.stringify(JSON);

Http(Hyper-Text Transfer Protocol):
    http Methods: 
        GET, -> to send the request to the server
        POST, -> to send data to the server
        Patch, -> to update data 
        delete -> to delete/remove data

    status codes: 1xx-5xx
        1xx & above 100 -> Information
        2xx & above 200 -> success code
        3xx & above 300 -> Redirection
        4xx & above 400 -> client error code
        5xx & above 500 -> server error code

    readyStateChange in AJAX:
        https://w3schools.com/xml/ajax_xmlhttprequest_response.asp
        - Request is sent by Frontend Application & Response is sent by Backend Application
        - The onreadystatechange property defines a function to be executed when the readyState changes.
        - The status property and the statusText property holds the status of the XMLHttpRequest object.
        - readyState: Holds the status of xmlhttprequest()
            0 - request not initialized
            1 - server connection established
            2 - request received by server
            3 - processing request & preparing response / waiting for response
            4 - request finished and response is ready / response received
        - statusText: Returns the status-text (e.g. "OK"-200 or "Not Found"-404)
        Eg:- The onreadystatechange function is called every time the readyState changes.
            When readyState is 4 and status is 200 - "OK", the response is ready: 
            readyState 4 !== status 200 as readyState is different property & status is different property



Day 22 : 11.06.2023 -------------------------------
Agenda:
    - Assignment:4
    - onClick image changes in preview
https://www.geeksforgeeks.org/how-to-preview-image-on-click-in-gallery-view-using-html-css-and-javascript/
    - active class toggle
https://www.w3schools.com/howto/tryit.asp?filename=tryhow_js_active_element
    - co-students work
https://codepen.io/sameersinha512/pen/qBoEwMO
https://codepen.io/Bibhujit/pen/gOQpawa
---------------------------------------------------------

Day 23 : 12.06.2023 -------------------------------
Agenda:
    - Assignment:4 Discussion
    - this
    - üö® call-bind-apply
https://github.com/Thangarajcs/js-notes/blob/main/12-06-call-bind-this
    - YouTube JS tutorials
https://www.youtube.com/@akshaymarch7/playlists
https://www.youtube.com/watch?v=hdI2bqOjy3c&list=PLillGF-RfqbbnEGy3ROiLWk7JMCuSyQtX
https://www.youtube.com/playlist?list=PLRAV69dS1uWSxUIk5o3vQY2-_VKsOpXLD
---------------------------------------------------------
'this'
    > this means from where u are calling
    > In general, it refers to currently calling an object
    > In global (Outside function), it refers to window
    > In javascript, it refers to object's key

call-bind-apply : Reusability of function code
    > call: arguments passed by ,
        SYNTAX: student.showName.call(stud2, 1, 2); // Moni 1 2 

    > apply: arguments passed inside array []
        // Difference from CALL mtd is Parameters are passes within an array
        SYNTAX: student.showName.call(stud2, [1, 2]); // Moni 1 2

    > bind
        // bind will not be called immediately
        SYNTAX: const laterUse = student.showName.bind(stud2);
        laterUse(1, 2); // Res: Moni 1 2

Day 24 : 13.06.2023 -------------------------------
Agenda:
    - OOPS in JS
    - Object, Class, Inheritance, Encapsulation, Abstraction & Polymorphism
    - Study Materials for JS
https://betterprogramming.pub/object-oriented-programming-in-javascript-b3bda28d3e81
    - JS Notes
https://www.simplilearn.com/tutorials/javascript-tutorial/oop-in-javascript
    - PDF for JS
https://github.com/Thangarajcs/js-notes/blob/main/1680523006597.pdf

    - The Net Ninja Youtube JS tutorial
https://www.youtube.com/@NetNinja
    - Traversy Media YouTube Channel
https://www.youtube.com/@TraversyMedia
    - Today's notes
    - JS code challenge websites
https://www.jschallenger.com/
https://www.learn-js.org/
https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/
---------------------------------------------------------
OOPS:
    > Object Oriented Programming Language in JS
    > JS is not OOPS; it is scripting language
    > But we can use OOPS concepts in JS
    > In Express JS (ES6 version) only OOPS concepts have more power & are mostly utilized.
    
Object:
    > Object is one of JS datatype & also comes under OOPS
    > It is one of the concept in OOPS.

Class: introduced ES6
    > Kind of object but not fully object.
    > It has some properties of object.
    > Blueprint of an object
    > It is also called as Constructor.
    > instance means from one prototype we can create 10 more bluprint from an object
    > new keyword is used to create instance (copy)

Inheritance:
    > extends keyword is used for
    > super keyword is used for
    > we can exchange one class's properties & methods to another class - Reusability

Encapsulation:
    > Hiding the information from outside world.
    > Outside the function can't know
    > Hiding as much as possible and exposing a minimal public interface.
    > mechanism by which the data & function are bound together within the object
    > multiplying the data
    > used for binding the variable functions
    > Protecting your information
    > For Our Code security

Abstraction:
    > We hide the implementation details itself. (Private)
    > Good maintainability of code & reusability is also achieved.
    > Unneccessary expose about ur code is avoided.

Polymorphism:
    >
    >

Composition:
    >
    >

Abbreviation:
    >
    >

Day 25 : 14.06.2023 -----------------------------
Curriculum:
    - JQuery & its features
    - GET Methods
    - SET Methods
    - jQuery.com (Official Website) https://jquery.com/download/
    - Add/Update/Delete HTML Elements:
https://www.w3schools.com/jquery/default.asp
https://github.com/Thangarajcs/js-notes/blob/main/jquerynotes
------------------------------------------------
jQuery
    > It is a javascript library.
    > It also simplifies the JS programming language usage.
    > "Write less code, do more." - Slogan
    > Features: 
        - HTML DOM Manipulation,
        - CSS Manipulation,
        - Events manipulation,
        - AJAX Handling,
        - Animation, Other utilities etc.
    > We use $ symbol for every action in jQuery
    > How to add jQuery into our code?
        - CDN (Content Delivery Network) internet is must to use cdn hoisting network.
        - jQuery CDN:
        Include the CDN link in the head tag
    > selectors & Events
    > create methods: append(), after(), before()
    > delete methods: remove(), empty()
    https://ajax.googleapis.com/ajax/libs/jquery/3.6.4/jquery.min.js

syntax:


Selectors and Filters:

$(<<taget ele/class/id>>).action()

$().hide();

event:

$('.b2').dblclick(function(){
  $('.jq').hide()
})

$('.txt').keypress(function(){
  $('.jq').show()
})


Add/Update/Delete HTML Elements:


// 
//js
//document.getElementsByClassName('jq')[0].style.display = 'none';

//selector
//$('.jq').hide()
//event
// $('.b1').click(function(){
//   $('.jq').hide()
// })


// $('.b2').dblclick(function(){
//   $('.jq').hide()
// })

// $('.txt').keypress(function(){
//   $('.jq').show()
// })

//eq(1) - to traverse the array 


//jQuery GET

//text()
$('.b1').click(function(){
  console.log($('p').eq(1).text())
})


//html()
$('.b1').click(function(){
  console.log($('p').eq(2).html())
})

$('.b1').click(function(){
  console.log($('p').eq(1).attr('myname'))
})

$('.news').text(function(){
  return 'HELLOW THIS IS NEWS'
})


$('.b1').click(function(){
  console.log($('p').eq(1).attr('myname1','this done now'))
})

//create a new element
//jQuery SET
const divtag = document.createElement('div');
divtag.innerHTML = 'this a javascript way';
document.body.appendChild(divtag);

//jquery
//append
//after()
//before()
const mydiv = $('<div></div>').text('this a jquery way');
$('.news').after(mydiv);

//jQuery remove
//remove()
//empty()

Day 26 : 15.06.2023 -----------------------------
Curriculum:
    - RegEx
    https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/#regular-expressions

    - More JQuery validations
    - Asynchronous JavaScript
    https://dev.to/nodedoctors/an-animated-guide-to-nodejs-event-loop-3g62
    - Event Loop
    https://dev.to/lydiahallie/javascript-visualized-event-loop-3dif        
    - Class Notes
    https://github.com/Thangarajcs/js-notes/blob/main/15-06-2022

------------------------------------------------
Regular Expressions
    > It is a sequence of characters that create a pattern. It can be later used to validate our input.
    > Like Built-in objects
    > User-input correction or replace can happen with regex.

SYNTAX:
Modifiers:
    > It tells u whether pattern should be case insensitive or global or multiple match.

Link: https://html.form.guide/jquery/validation-using-jquery-examples/
FORM VALIDATION:
    RegEx:
    ! -> Don't come inside
    /\d/g -> Gives only numbers (digit) in the string
    /\D/g -> Gives only alphabetical & whitespace (non-digits) in the string
    /^\d{10}$/ 
        -> / denotes start and end
        -> ^ means start
        -> \ means escape sequences (ignore special characters or whitespaces)
        -> d means numeric values
        -> {10} how many digits
        -> $ means end
ES6 means ECMAScript version 6
Synchronous:
    > Doing each activity/task in an same order at different time (row-wise)

Asynchronous JavaScript:
    > Multiple tasks can be done in Parallely.
    > Human daily task (Synchronous):
        - GetUp with Alarm
        - FreshUp
        - cooking breakfast
        - Having breakfast 
        - Go to Clg/Work
    > Human daily task (Asynchronous):
        - GetUp with Alarm
        - FreshUp (bath)
        - cooking breakfast (cook)
        - Having breakfast (dress)
        - Go to Clg/Work (bus)
      > But it works not in same above order
      > So I need to make it wait for some time
      > CALL BACK: running async task one by one by calling back manually each functions. Complex & confuses when many things runs.
      > Call Back Hell happens when u nest too many async functions one by one.
      > Instead of call back hell, we can use Promise
      > to rescue the call back hell and neatly execute task we got new
      > js feature PROMISE (Asynchronous concept)
      > doing the things.................................. 
      > Story on mountain well, 2 child fetch water & village house parents.
      > Syntax:
        let myPromise = new Promise(function(resolve, reject){
            if(true){
            resolve('success');
            } else {
            reject('error');
            }
        })
        myPromise
        .then(function(res){
            console.log(res);
        },
        (err)=>{
            console.log(err);
        })

Day 27 : 16.06.2023 -----------------------------
Curriculum:
    - Call Back function
    - CallBack Hell
    - Promise (Async Concept)
    - Closures

------------------------------------------------
Call Back Hell:-
    > calling function back in Nested way through which we can't find error, confuses & complex
    > Creates pyramid structure

Promise (Async Concept) - rescue from call back hell
    > Promise is the way introduced to overcome call back hell
    > to rescue the call back hell and neatly execute task we got new 
    > js feature promise
    > Either resolve success or error
    > Make asynchronous code to synchronous code through promises.
    > There is no asynchronous way.
    > We are going in synchronous way (orderly manner only) through asynchronous method
    > resolve - success
    > reject - error
    > SYNTAX:
        urPromiseName.then(function(){}, function(){})
    > Each promise has 3 execution states: Pending, Fulfilled, rejected
        1. Pending state: When execution happens & if u try to access the promise
        2. Fulfilled state: Sucess status
        3. Rejected state: Error status
Closures:-
    > Closure means when a function returns from another function that will have a context of its created place (parent context).
    > Closure means a return function will have access to its lexical context
    > Lexical means variables places way ahead / before.

Pending Topics:
    - Async using await method to fetch an API
    - Filter function
    - Polymorphism in OOPS
    - Exeception context
    - Parser
    - Indexed DB from BOM
    - for...in loop & for....of loop
    - how to get * in red when mandatory field not filled?
    - Fetch API
    x jQuery concepts
    x Closures
    x Arrow function

Final Assignment Link:-
https://drive.google.com/file/d/1FMJdWCTHDGXEWLr7XOBitsuHzogGFQfm/view

Day 28 : 17.06.2023 (SAT) -----------------------------
Curriculum:
     - jQuery
     - AJAX in jQuery
     - Fetch API in jQuery
     -  
     -
     -
https://api.jQuery.com
------------------------------------------------
jQuery
    > Library of framework | $ used to represent jQuery
    > How to add jQuery?
        - go to jQuery CDN in browser
        - Add script file in html header before title tag
    > Get
    > Get & Update content
    > addEventListener means in JQuery "on"

Ajax Get & POST Method:
    >

Day 29 : 26.06.2023 -----------------------------
Curriculum:
    - Different ways to produce function
    - Function advance concept : CALL, APPLY & BIND
    - Why call() & apply() - Usecase
   
https://docs.google.com/presentation/d/18filyiHB3bKs4MJZ4m0PX3vWm7Dv7wrsV1UvvhcGy_4/edit?pli=1#slide=id.g20a15d1d7d2_0_50
------------------------------------------------
Different ways to produce function
    > 1. Normal function
        -> If you have a normal function without any return value, then it returns "undefined".
        -> If you have a Promise function without any return value, then it returns "Promise object".
    > 2. Function expression
    > 3. Anonymous function (Function expression & Anonymous function are almost similar)
    > 4. Arrow function
    > 5. IIFE 
        -> Immediately Invoked Function Expression
        -> Definition: When we define a function, it will call automatically.
        -> In IIFE, we will wrap the function & make this function call pass something within parentheses like "India".
        -> Define, How to pass arg and return from IIFE
        -> SYNTAX:
            let f2 = (function (country) {
                console.log("hello f2() --> ", country);
            })("india");
                console.log(f2); // Undefined
        -> Why IIFE......
            - Protecting our data (implementation details like bank account number)
            - For security reasons, this works like oops concept Abstraction
            - Not conflicting with other functions
            - We are not polluting our global scope
        -> in which places we use IIFE...
            - It is used while designing libraries like jQuery Library for JavaScript (hidden code) 
            - Library means big chunk of code where u push ur code & give to world.

Lexical Scope / Lexical Context: 
    > Context means value of this
    > Scope means place where a ground in which u can access the variable like visa valid only within that particular country 
    > Assigning variable from parent scope
    > Lexical scope = Local Scope + Parent scope + Global Scope

Function Advance Concepts:- 
call():
    > Whenever we want to invoke a function & pass the lexical context
    > 'this' keyword will not invoke object (key-value pair) when u normally call a funcion with objectName & without .call() gives output as global things
    > We use skeleton of one function from another object by invoking and passing the context means values of current object
    > TODO: obj3 is borrowing print() function which is inside of obj2 

apply():
    > 100% same as call() only difference is syntax how u pass string values in ["str1", "str2"]

Why call() & apply() - Usecase
//! Function borrowing & Reusability

Example:
let obj2 = {
    name: 'Virat',
    country: "India",
    test: function (){
        console.log('test');
    },
    print() {
        console.log(`Name = ${this.name} and Country = ${this.country}`); // 'this' means obj2 used for reusability
    }
};
obj2.test(); // test
obj2.print(); // Name = Virat and Country = India

let obj3 = {
    name: 'Smith',
    country: "Australia"
}

obj2.print.call(obj3); // Name = Smith and Country = Australia  ‚úÖ syntax call method

// obj2.print() --> invoke print() function from another 'obj2' object
// obj2.print.call(obj3) --> passing context of 'obj3' current object (this)

//obj3 is borrowing print() function which is inside of obj2 


Day 30 : 27.06.2023 -----------------------------
Curriculum:
    - Live Project 1 - Video Player Application like YouTube
    - Fetch API using async-await functions
    - 
    - 
    - 

------------------------------------------------
    async keyword gives response as promise
    await keyword unwraps promise

Day 31 : 28.06.2023 -----------------------------
Curriculum:
    - Live Project 2 - Music Player Application like YouTube
    - 
    - 
    - 
    - 

------------------------------------------------
Day 32 : 29.06.2023 -----------------------------
Curriculum:
    - Live Project 3 - Video Player Application like YouTube
    - 
    - 
    - 
    - 

------------------------------------------------
Application:-
    > web browser's inbuilt feature
    > There are 3 types of storage in browser.
        1. Session storage
        2. Local storage
        3. IndexedDB

Session Storage:
    > Temporary for each session and on close stored data cleared & lost like IRCTC
    > expires after session close or powercut or shutdown

Local Storage:
    > Permananent storage of data 
    > Unless and until we delete it manually.
    > Max. limit 10MB
    > We can small amount of data for small applications
    > It is also object stores key-value pairs.
    > We can access using Object.keys() method 

Show PopUp of favorite songs:
    > add a button object for every song's buttons by using className
    > on click of button of a song that song should pops up and store

Day 33 : 30.06.2023 -----------------------------
Curriculum:
    - Asynchronous
    - HTML & CSS & JS
    - Single thread / Multi Thread
    - Keywords (var), datatypes, Strings, Array, etc
    - Functions (Code Execution & scope)
    - Browser

------------------------------------------------
Asynchronous:
    -> Non-blocking code
    -> Can avoid blocking of like setTimeout() block of cod
    -> We can do Project like live-recodring apps etc using async functions.

Language:
    1. Markup Language
        -> Doesn't throw any error and static
        -> No security and Validation available 
        -> Using HTML & CSS we can produce webpages statically only.

    2. Programming Lanaguage 
        -> Talk to ur hardware and software
        -> Capable of making Decisions (right/wrong) 
        -> This makes now Powerful in 0's & 1's binary (machine) lang

HTML: (Hyper Text Markup Language)
    -> Structure & skeleton
    -> Markup language:
CSS: (Cascading Style Sheets)
    -> Styling for Design purpose
    -> Decorate ur webpage like makeup
    -> Using HTML & CSS we can produce webpages statically only
Javascript: 
    -> But using JS we can produce dynamic websites
    -> JS is for both for frontend and backend
    -> But Java and python is only for backend & Multi Threaded language and platform independent
    -> Frontend means client-end users side in web browsers like websites or mobile user
    -> JS is Single Threaded language, Synchronous and platform independent
    -> There are 2 things in JS:
        (1) Single Thread / Multi-Thread
            (i) Javascript is Single Thread
                -> Just runs only one line of code at once.
                -> As it  behaves like man with 2 hands. If >2 balls, it can't handle & leads to hanging problem while running for loops directly in browser window's under source tab.
                -> Fully occupied and condition can't relieve current thing going on.
            (ii) Multi-Thread means superman with super power / octopus with 8 hands (NICE CONCEPT)
                -> Do task in concurrently (multitasking)
        (2) Synchronous / Asynchronous
            (i) Javascript is Synchronous
                -> Blocks the code when any interruptions like error etc occurs
                -> Blocking code and it needs all previous line should be executed
            (ii) Asynchronous
                -> Non-blocking code
                -> Youtube, FB & Insta like apps using this behaviour even we upload a big video content we can simueltaneously use it to watch some other
        (3) Var / Datatypes / Strings / Array
                -> To store we use Datatypes container
            Var: In var, we can change by re-assign its datatype according to stored values.
            Let: In let, we can't change by reassigning. 
            const:
            Datatypes: Number, String, Array, Objects & Symbol etc. 
        (4) Functions basic in-depth concepts
            (i) Code Execution:-
                1. Phase 1: Global Memory manager[GMM] (Intialization & declaration)
                    -> Checks only at Left hand side 
                    -> Looks for var, let, const & function keyword
                    -> Not exists then assign undefined to it
                2. Phase 2: Global Code Execution manager[GCEM]
                    -> Checks only value at Right hand side 
            Eg 1:-  console.log(x); -> Undefined
                     var x = 10;
                     console.log(x); -> 10

                Reason (BTS): Behind the scene, GMM assigns 'x' to undefined in first line then 
                GCEM: Asks MM what is 'x'?
                GMM: 'x' is undefined
                GCEM: Okay I will execute as undefined
                GCEM: After execution it checks 2nd line and go to MM and say I saw value as 10.
                GMM: Okay I will update it
                GCEM: Then I will execute as 10

            Eg 2:-
                console.log(a); // undefined
                function funcA(){
                    var a = 100;
                    console.log(a); // 100
                }
                funcA();

            Reason:
                GMM   - Global Memory Manager
                GCEM  - Global Code Execution Manager
                F1MM  - Function 1 Memory Manager & 
                F1CEM - Function 1 Code Execution Manager

            Behind the Scene (BTS):
                -> GMM checks for let, var, const & function keyword at first line 
                -> And then goes to 2nd line found function keyword assigns funcA's code to some other memory manager named as 'funcAMM' 
                -> And then goes to last line at funcA() no keyword so it ignores.

            Conversation between GMM & GCEM in global scope:
                GCEM: Asks GMM Do you know 'a' in 1st line?
                GMM: I don't even know what is keyword of 'a'.
                GCEM: Ok. I will execute by throwing a Reference error as 'a' is not defined at all
            
            Conversation between F1MM & F1CEM inside function scope:
                BTS, F1MM analyzes in left hand side & found var keyword and ignores console.log line as there is no keyword.
                F1CEM: Asks F1MM Do you know 'a'?
                F1MM: Yes, I know 'a'. It has var keyword.
                F1CEM: Checks for Right Hand Side and takes value as 100 & executes it.
            
            Eg 3:-
                console.log(y); // undefined
                function f1(){
                    var y = 100;
                    console.log(y); // 100
                }
                var y ="Sagar";
                console.log(y); // Sagar
                f1();

            Reason: There are GMM, GCEM, Function 1 Memory Manager(F1MM) & Function 1 Code Execution Manager(F1CEM)
            Convo: BTS, GMM checks for let, var, const & function keyword at first line then goes to next ln found function keyword assigns func code to some other memory manager named as F1MM and goes to next var keywrd found 
            F1CEM: Asks F1MM what is 'y'?
            F1MM: Yes I know'y'. It is undefined
            F1CEM: Okay I will execute as undefined
            F1CEM: After execution it checks 2nd line and go to MM and say I saw value as 10.
            F1MM: Okay I will update it
            F1CEM: Then I will execute as 10
            F1CEM: GMM

            Warning: Different functions have seperate managers for each & seperate memory.

        Eg 4:-
                console.log(y); // undefined
                function func2(){
                    console.log(y ==>", y); // undefined
                    var y = 100;
                    console.log(z); // Sagar
                }
                var y ="Sagar";
                console.log(y); // Sagar
                func2();

            Reason: There are GMM, GCEM, Function 2 Memory Manager & Function 2 Code Execution Manager
                GMM   - Global Memory Manager
                GCEM  - Global Code Execution Manager
                Func2MM  - Function 2 Memory Manager & 
                Func2CEM - Function 2 Code Execution Manager

            Behind the Scene (BTS):
                -> GMM checks for let, var, const & function keyword at first line 
                -> Then goes to 2nd line found function keyword & assign func2's code to some other memory manager named as 'func2MM'
                -> Then goes to 7th line found var keyword & ignores 8th line as no keyword.
                -> And then goes to last line at func2() no keyword so it ignores.

            Conversation between GMM & GCEM in global scope:
                GCEM: Asks GMM Do you know 'y' in 1st line?
                GMM: I don't know 'y'. So I declared as undefined.
                GCEM: Ok. I will execute 'y' as undefined
                GCEM: Asks GMM Do you know 'y' in 7th line?
                GMM: Yes, I know 'y'with var keyword.
                GCEM: Ok then I will check at Right Hand Side for value & execute 'y' as Sagar.
                GCEM handover to function managers as function called at last line 
            
            Conversation between F1MM & F1CEM inside function scope:
                BTS, Func2MM analyzes in left hand side leaves console.log line as there is no keyword & found var keyword and ignores console.log line as there is no keyword.
                Func2CEM: Asks Func2MM Do you know 'y' at line 3?
                Func2MM : No, I don't even know keyword of 'y'. So declared as undefined.
                Func2CEM: Ok. I will execute 'y' as undefined
                Func2CEM: Do you know 'z' at line 5?
                Func2MM : No, I don't even know keyword of 'z'. 
                Func2CEM: Go to it's parent scope & asks Global MM (GodFather) about 'z'
                GMM: Yes, I know 'z'.
                Func2CEM: Checks for Right Hand Side and takes value as Sagar & executes it.
            -> scope: 
        (5) OOPS
Browser
    -> It is single threaded language
    -> It get hangs / lagging while we use more tabs than its compatibility.
    -> Not responding while any for loops runs

Day 34 : 01.07.2023 -----------------------------
Curriculum:
    - Asynchronous
    - HTML & CSS & JS
    - Single thread / Multi Thread
    - Keywords (var), datatypes, Strings, Array, etc
    - Functions (Code Execution & scope)
    - Browser

------------------------------------------------